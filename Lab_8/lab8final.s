        CPU     8086
        ORG     0h
InterruptVectorTable:
        ; Internal x86 Interrupts:
        dd      0 ; Reserved (Div err)  ; Int 00h
        dd      0 ; Reserved (Step)     ; Int 01h
        dd      0 ; Reserved (NMI)      ; Int 02h
        dd      0 ; Reserved (Break)    ; Int 03h
        dd      0 ; Reserved (Overflow) ; Int 04h
        dd      0                       ; Int 05h
        dd      0                       ; Int 06h
        dd      0                       ; Int 07h
        ; Hardware Interrupts:
        dd      Reset ; Reset               ; Int 08h (IRQ 0)
        dd      Tick ; Tick                ; Int 09h (IRQ 1)
        dd      Keyboard ; Keyboard            ; Int 0Ah (IRQ 2)
        dd      gameOver ; Simptris Game Over  ; Int 0Bh (IRQ 3)
        dd      newPiece ; Simptris New Piece  ; Int 0Ch (IRQ 4)
        dd      received ; Simptris Received   ; Int 0Dh (IRQ 5)
        dd      touchdown ; Simptris Touchdown  ; Int 0Eh (IRQ 6)
        dd      lineClear ; Simptris Clear      ; Int 0Fh (IRQ 7)
        ; Software Interrupts:
        dd      0 ; Reserved (PC BIOS)  ; Int 10h
        dd      0                       ; Int 11h
        dd      0                       ; Int 12h
        dd      0                       ; Int 13h
        dd      0                       ; Int 14h
        dd      0                       ; Int 15h
        dd      0                       ; Int 16h
        dd      0                       ; Int 17h
        dd      0                       ; Int 18h
        dd      0                       ; Int 19h
        dd      0                       ; Int 1Ah
        dd      0                       ; Int 1Bh
        dd      0                       ; Int 1Ch
        dd      0                       ; Int 1Dh
        dd      0                       ; Int 1Eh
        dd      0                       ; Int 1Fh
        dd      0                       ; Int 20h
        dd      0 ; Reserved (DOS)      ; Int 21h
        dd      0 ; Simptris Services   ; Int 22h
        dd      0                       ; Int 23h
        dd      0                       ; Int 24h
        dd      0                       ; Int 25h
        dd      0                       ; Int 26h
        dd      0                       ; Int 27h
        dd      0                       ; Int 28h
        dd      0                       ; Int 29h
        dd      0                       ; Int 2Ah
        dd      0                       ; Int 2Bh
        dd      0                       ; Int 2Ch
        dd      0                       ; Int 2Dh
        dd      0                       ; Int 2Eh
        dd      0                       ; Int 2Fh
KeyBuffer:                              ; Address 0xC0
        dw      0
NewPieceType:                           ; Address 0xC2
        dw      0
NewPieceID:                             ; Address 0xC4
        dw      0
NewPieceOrientation:                    ; Address 0xC6
        dw      0
NewPieceColumn:                         ; Address 0xC8
        dw      0
TouchdownID:                            ; Address 0xCA
	dw	0
ScreenBitMap0:                          ; Address 0xCC
        dw      0
ScreenBitMap1:
        dw      0
ScreenBitMap2:
        dw      0
ScreenBitMap3:
        dw      0
ScreenBitMap4:
        dw      0
ScreenBitMap5:
        dw      0
TIMES   100h-($-$$) db  0               ; Fill up to (but not including) address 100h with 0
	jmp	main
; This file contains support routines for 32-bit on the 8086.
; It is intended for use code generated by the C86 compiler.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SR_asldiv:			; l1 /= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_ldiv
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmod:			; l1 %= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmod
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmul:			; l1 *= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmul
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshl:			; l1 <<= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshl
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshr:			; l1 >>= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshr
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


SR_asuldiv:			; u1 /= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_uldiv
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asilmod:			; u1 %= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ilmod
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulmul:			; u1 *= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulmul
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshl:			; u1 << u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshl
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshr:			; u1 >> u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshr
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


; Main 32-bit routines begin here:

SR_ldiv:	; N_LDIV@
	pop    cx
	push   cs
	push   cx
	; LDIV@
	xor    cx,cx
	jmp    LSR_01
SR_uldiv:	; N_LUDIV@
	pop    cx
	push   cs
	push   cx
	; F_LUDIV@
	mov    cx,0001
	jmp    LSR_01
SR_lmod:	; N_LMOD@
	pop    cx
	push   cs
	push   cx
	; F_LMOD@
	mov    cx,0002
	jmp    LSR_01
SR_ilmod:	; N_LUMOD@
	pop    cx
	push   cs
	push   cx
	; LUMOD@
	mov    cx,0003
LSR_01:
	push   bp
	push   si
	push   di
	mov    bp,sp
	mov    di,cx
	mov    ax,[bp+0Ah]
	mov    dx,[bp+0Ch]
	mov    bx,[bp+0Eh]
	mov    cx,[bp+10h]
	or     cx,cx
	jne    LSR_02
	or     dx,dx
	je     LSR_10
	or     bx,bx
	je     LSR_10
LSR_02:
	test   di,0001
	jne    LSR_04
	or     dx,dx
	jns    LSR_03
	neg    dx
	neg    ax
	sbb    dx,0000
	or     di,000Ch
LSR_03:
	or     cx,cx
	jns    LSR_04
	neg    cx
	neg    bx
	sbb    cx,0000
	xor    di,0004
LSR_04:
	mov    bp,cx
	mov    cx,0020h
	push   di
	xor    di,di
	xor    si,si
LSR_05:
	shl    ax,1
	rcl    dx,1
	rcl    si,1
	rcl    di,1
	cmp    di,bp
	jb     LSR_07
	ja     LSR_06
	cmp    si,bx
	jb     LSR_07
LSR_06:
	sub    si,bx
	sbb    di,bp
	inc    ax
LSR_07:
	loop   LSR_05
	pop    bx
	test   bx,0002
	je     LSR_08
	mov    ax,si
	mov    dx,di
	shr    bx,1
LSR_08:
	test   bx,0004h
	je     LSR_09
	neg    dx
	neg    ax
	sbb    dx,0000
LSR_09:
	pop    di
	pop    si
	pop    bp
	retf   0008
LSR_10:
	div    bx
	test   di,0002
	je     LSR_11
	xchg   dx,ax
LSR_11:
	xor    dx,dx
	jmp    LSR_09
SR_lshl:	; N_LXLSH@
SR_ulshl:
	; r = a << b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

	mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXLSH@
	cmp    cl,10h
	jnb    LSR_12
	mov    bx,ax
	shl    ax,cl
	shl    dx,cl
	neg    cl
	add    cl,10h
	shr    bx,cl
	or     dx,bx
	pop    cx
	pop    bp
	retf
LSR_12:
	sub    cl,10h
	xchg   dx,ax
	xor    ax,ax
	shl    dx,cl
	pop    cx
	pop    bp
	retf
SR_lshr:	; N_LXRSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXRSH@
	cmp    cl,10h
	jnb    LSR_13
	mov    bx,dx
	shr    ax,cl
	sar    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_13:
	sub    cl,10h
	xchg   dx,ax
	cwd
	sar    ax,cl
	pop    cx
	pop    bp
	retf
SR_ulshr:	; N_LXURSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXURSH@
	cmp    cl,10h
	jnb    LSR_14
	mov    bx,dx
	shr    ax,cl
	shr    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_14:
	sub    cl,10h
	xchg   dx,ax
	xor    dx,dx
	shr    ax,cl
	pop    cx
	pop    bp
	retf
SR_lmul:	; N_LXMUL@
SR_ulmul:
	; r = a * b
	push   bp
	push   si
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx
	push   bx

        mov    bx, [bp+6]	; pop loword(a)
	mov    cx, [bp+8]	; pop hiword(a)
	mov    ax, [bp+10]	; pop loword(b)
	mov    dx, [bp+12]	; pop hiword(b)
	
	xchg   si,ax
	xchg   dx,ax
	test   ax,ax
	je     LSR_15
	mul    bx
LSR_15:
	jcxz   LSR_16
	xchg   cx,ax
	mul    si
	add    ax,cx
LSR_16:
	xchg   si,ax
	mul    bx
	add    dx,si
	pop    bx
	pop    cx
	pop    si
	pop    bp
	ret

; Generated by c86 (BYU-NASM) 5.1 (beta) from clib.c
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
new_line:
	db	13,10,36
	ALIGN	2
signalEOI:
	jmp	L_clib_1
L_clib_2:
	mov	al, 0x20
	out	0x20, al
	mov	sp, bp
	pop	bp
	ret
L_clib_1:
	push	bp
	mov	bp, sp
	jmp	L_clib_2
	ALIGN	2
exit:
	jmp	L_clib_4
L_clib_5:
	mov	ah, 4Ch
	mov	al, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_4:
	push	bp
	mov	bp, sp
	jmp	L_clib_5
	ALIGN	2
print:
	jmp	L_clib_7
L_clib_8:
	mov	ah, 40h
	mov	bx, 1
	mov	cx, [bp+6]
	mov	dx, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_7:
	push	bp
	mov	bp, sp
	jmp	L_clib_8
	ALIGN	2
printChar:
	jmp	L_clib_10
L_clib_11:
	mov	ah, 2
	mov	dl, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_10:
	push	bp
	mov	bp, sp
	jmp	L_clib_11
	ALIGN	2
printNewLine:
	jmp	L_clib_13
L_clib_14:
	mov	ah, 9
	mov	dx, new_line
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_13:
	push	bp
	mov	bp, sp
	jmp	L_clib_14
	ALIGN	2
printString:
	jmp	L_clib_16
L_clib_17:
	xor	si,si
	mov	bx, [bp+4]
	jmp	printString2
	printString1:
	inc	si
	printString2:
	cmp	byte [bx+si],0
	jne	printString1
	mov	dx, bx
	mov	cx, si
	mov	ah, 40h
	mov	bx, 1
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_16:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_clib_17
	ALIGN	2
printInt:
	jmp	L_clib_19
L_clib_20:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	cmp	word [bp+4], 0
	jge	L_clib_21
	mov	byte [bp-10], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	neg	ax
	mov	word [bp+4], ax
L_clib_21:
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_22
	mov	word [bp-4], 1
	jmp	L_clib_23
L_clib_22:
	jmp	L_clib_25
L_clib_24:
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
L_clib_25:
	mov	ax, word [bp+4]
	cwd
	idiv	word [bp-4]
	test	ax, ax
	je	L_clib_24
L_clib_26:
L_clib_23:
	jmp	L_clib_28
L_clib_27:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	ax, dx
	mov	word [bp+4], ax
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
	mov	ax, word [bp-4]
	mov	word [bp-4], ax
L_clib_28:
	cmp	word [bp-4], 0
	jg	L_clib_27
L_clib_29:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_19:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_20
	ALIGN	2
printLong:
	jmp	L_clib_31
L_clib_32:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	cmp	word [bp+6], 0
	jg	L_clib_33
	jl	L_clib_34
	cmp	word [bp+4], 0
	jae	L_clib_33
L_clib_34:
	mov	byte [bp-17], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	neg	ax
	adc	dx, 0
	neg	dx
	mov	word [bp+4], ax
	mov	word [bp+6], dx
L_clib_33:
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_35
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_36
L_clib_35:
	jmp	L_clib_38
L_clib_37:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_38:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_ldiv
	or	dx, ax
	je	L_clib_37
L_clib_39:
L_clib_36:
	jmp	L_clib_41
L_clib_40:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_lmod
	mov	word [bp+4], ax
	mov	word [bp+6], dx
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_41:
	cmp	word [bp-4], 0
	jg	L_clib_40
	jne	L_clib_43
	cmp	word [bp-6], 0
	ja	L_clib_40
L_clib_43:
L_clib_42:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_31:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_32
	ALIGN	2
printUInt:
	jmp	L_clib_45
L_clib_46:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_47
	mov	word [bp-4], 1
	jmp	L_clib_48
L_clib_47:
	jmp	L_clib_50
L_clib_49:
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_50:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	test	ax, ax
	je	L_clib_49
L_clib_51:
L_clib_48:
	jmp	L_clib_53
L_clib_52:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	word [bp+4], dx
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_53:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_clib_52
L_clib_54:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_45:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_46
	ALIGN	2
printULong:
	jmp	L_clib_56
L_clib_57:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_58
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_59
L_clib_58:
	jmp	L_clib_61
L_clib_60:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_61:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	or	dx, ax
	je	L_clib_60
L_clib_62:
L_clib_59:
	jmp	L_clib_64
L_clib_63:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	lea	ax, [bp+4]
	push	ax
	call	SR_asilmod
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_64:
	mov	ax, word [bp-6]
	mov	dx, word [bp-4]
	or	dx, ax
	jne	L_clib_63
L_clib_65:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_56:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_57
	ALIGN	2
printByte:
	jmp	L_clib_67
L_clib_68:
	mov	al, byte [bp+4]
	cbw
	mov	cx, 4
	sar	ax, cl
	and	ax, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_69
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_70
L_clib_69:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_70:
	mov	byte [bp-3], al
	mov	al, byte [bp+4]
	and	al, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_71
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_72
L_clib_71:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_72:
	mov	byte [bp-2], al
	mov	ax, 2
	push	ax
	lea	ax, [bp-3]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_67:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_clib_68
	ALIGN	2
printWord:
	jmp	L_clib_74
L_clib_75:
	mov	word [bp-2], 3
	jmp	L_clib_77
L_clib_76:
	mov	ax, word [bp+4]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_80
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_81
L_clib_80:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_81:
	mov	si, word [bp-2]
	lea	dx, [bp-7]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp+4]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp+4], ax
L_clib_79:
	dec	word [bp-2]
L_clib_77:
	cmp	word [bp-2], 0
	jge	L_clib_76
L_clib_78:
	mov	ax, 4
	push	ax
	lea	ax, [bp-7]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_74:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_clib_75
	ALIGN	2
printDWord:
	jmp	L_clib_83
L_clib_84:
	lea	ax, [bp+4]
	mov	si, ax
	mov	ax, word [si]
	mov	word [bp-6], ax
	lea	ax, [bp+4]
	mov	si, ax
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-8], ax
	mov	word [bp-2], 3
	jmp	L_clib_86
L_clib_85:
	mov	ax, word [bp-6]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_89
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_90
L_clib_89:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_90:
	mov	dx, word [bp-2]
	add	dx, 4
	mov	si, dx
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-6]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_91
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_92
L_clib_91:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_92:
	mov	si, word [bp-2]
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-8]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-8], ax
L_clib_88:
	dec	word [bp-2]
L_clib_86:
	cmp	word [bp-2], 0
	jge	L_clib_85
L_clib_87:
	mov	ax, 8
	push	ax
	lea	ax, [bp-16]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_83:
	push	bp
	mov	bp, sp
	sub	sp, 16
	jmp	L_clib_84



;.globl resetInterrupt

;ISR 
  
Reset:

sti							;set the interrupt flag. Enable interrupts
call resetInterrupt			;Call the interrupt handler
cli							;clear the interrupt flag. Disable interrupts
call signalEOI				;signal EOI to the PIC
iret						;return


Tick:
    						;1. Save the context 
call save

call YKEnterISR			
    						
call YKExitMutex			;2.set the interrupt flag. Enable interrupts
    						
call YKTickHandler			;3. Run interrupt handler

call tickInterrupt			;3. Run interupt handler 
    						
call YKEnterMutex			;4. clear the interrupt flag. Disable interrupts
	   						 
call signalEOI				;5. Send the EOI command to the PIC,

call YKExitISR				
    						
call restore				;6. Restore context
    						 
iret


Keyboard:
    						;1. Save the context 
call save
    						;2. Enable interrupts
sti							;set the interrupt flag. Enable interrupts
    						;3. Run the interrupt handler
call keyboardInterrupt
    						;4. Disable interrupts.
cli							;clear the interrupt flag. Disable interrupts
	   						;5. Send the EOI command to the PIC, 
call signalEOI
    						;6. Restore the context
call restore
    						;7. Execute the iret instruction. 
iret

gameOver:
	call	save
	call	YKEnterISR

	sti				; enable interrupts
	call	setGameOver
	cli 			; disable interrupts

	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
	out	0x20, al	; Write EOI to PIC (port 0x20)
	call	YKExitISR
	call	restore
	iret

newPiece:
	call	save
	call	YKEnterISR

	sti				; enable interrupts
	call	newPieceInterrupt
	cli 			; disable interrupts

	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
	out	0x20, al	; Write EOI to PIC (port 0x20)
	call	YKExitISR
	call	restore
	iret

received:
	call	save
	call	YKEnterISR

	sti				; enable interrupts
	call	recievedInterrupt
	cli 			; disable interrupts

	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
	out	0x20, al	; Write EOI to PIC (port 0x20)
	call	YKExitISR
	call	restore
	iret

touchdown:
	push	ax
	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
	out	0x20, al
	pop	ax
	iret

lineClear:
	push	ax
	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
	out	0x20, al
	pop	ax
	iret

YKEnterMutex:
	cli			;Disable interrupts
	ret

YKExitMutex:
	sti			;Enable interrupts
	ret

save:
				;Save the context of the current task. 9 total
	push	ax
	push	bx
	push	cx
	push	dx
	push	es
	push	ds
	push 	si
	push	di
	push 	bp
				;Return address must be placed on top of the stack
				;Move 9 words up the stack
	mov		bp, sp 			;Move stack pointer
	push	word[bp+18]		;Go to the top of the stack
	mov		[bp+18], cx		;Keep track of cx

	mov cx, [ISRDepth]
	cmp cx, 0				;Compare the ISRDepth with 0. This will perform (ISRDepth-0)
	jg return				;if (ISRDepth-0) is greater than 0, we need to return.
							;If the ISRDepth is 0, it will skip the return

	mov bx, [YKRunningTask]	;Grab the currently running task
	mov bp, sp				
	add	bp, 2
	mov [bx], bp

return:
	ret

YKDispatcher:
	
	push bp 	
	mov bp, sp	
	cmp	byte[bp+4], 1		; compare the argument with 1 
	pop bp
	je	dispatcherRestore 	;if the argument is 1, restore old saved context
	push cs					
	pushf					;Push flag register onto stack
	call save				;Save the new context
	mov	bp, sp				;Move stack pointer to bp
	mov	bx, [bp+20]			;Store the task
	mov	ax, [bp+24]			;Store the interrupt flag
	mov	[bp+20], ax			;Set the task	
	or bx, 0x0200			;or flag with 0x0200
	mov	[bp+24], bx			;Move flag to flag position

dispatcherRestore:			;If not saved, restore the old context
	mov bx, [YKRdyList]		;store the new task
	mov sp, [bx]			;Store saved bp
	mov	[YKRunningTask], bx	;Grab the currently running task. to restore content
	call restore			;Restore the content of the running task
	iret					;iret to restore context not restored already

restore:					;Restore context
	
	mov	bp, sp
	mov cx, [bp+20]
	pop	word[bp+20]
	pop		bp
	pop		di
	pop		si
	pop		ds
	pop		es
	pop		dx
	pop		cx
	pop		bx
	pop		ax
	ret

; Generated by c86 (BYU-NASM) 5.1 (beta) from myinth.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
L_myinth_1:
	DB	"Reset Inerrupt",0xD,0xA,0
	ALIGN	2
resetInterrupt:
	; >>>>> Line:	9
	; >>>>> void resetInterrupt(void) { 
	jmp	L_myinth_2
L_myinth_3:
	; >>>>> Line:	10
	; >>>>> printString("Reset Inerrupt\r\n"); 
	mov	ax, L_myinth_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	11
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_myinth_2:
	push	bp
	mov	bp, sp
	jmp	L_myinth_3
	ALIGN	2
tickInterrupt:
	; >>>>> Line:	14
	; >>>>> void tickInterrupt(void) { 
	jmp	L_myinth_5
L_myinth_6:
	; >>>>> Line:	16
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_myinth_5:
	push	bp
	mov	bp, sp
	jmp	L_myinth_6
	ALIGN	2
keyboardInterrupt:
	; >>>>> Line:	19
	; >>>>> void keyboardInterrupt(void) { 
	jmp	L_myinth_8
L_myinth_9:
	; >>>>> Line:	21
	; >>>>> c = KeyBuffer; 
	mov	al, byte [KeyBuffer]
	mov	byte [bp-1], al
	mov	sp, bp
	pop	bp
	ret
L_myinth_8:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_myinth_9
	align	2
SlidePiece:	; void SlidePiece(int ID, int direction)
	push	bp
	mov	bp, sp
	push	ax
	push	dx
 	mov	ah, 0		; Slide piece operation
  	mov	al, [bp+6]	; Move direction (loword only)
	mov	dx, [bp+4]	; Move id
	int	1Bh		; Call Simptris services
	pop	dx
	pop	ax
	pop	bp
	ret
RotatePiece:	; void RotatePiece(int ID, int direction)
	push	bp
	mov	bp, sp
	push	ax
	push	dx
 	mov	ah, 1		; Rotate piece operation
 	mov	al, [bp+6]	; Move direction (loword only)
	mov	dx, [bp+4]	; Move id
	int	1Bh		; Call Simptris services
	pop	dx
	pop	ax
	pop	bp
	ret
SeedSimptris:	; void SeedSimptris(long seed)
	push	bp
	mov	bp, sp
	push	ax
	push	cx
	push    dx
 	mov	ah, 2		; Seed operation
	mov	dx, [bp+4]	; Move loword of seed
	mov	cx, [bp+6]	; Move hiword of seed
	int	1Bh		; Call Simptris services
	pop	dx
	pop	cx
	pop	ax
	pop	bp
	ret
StartSimptris:	; void StartSimptris(void)
	push	ax
 	mov	ah, 3		; Start Simptris operation
	int	1Bh		; Call Simptris services
	pop	ax
	ret


; Generated by c86 (BYU-NASM) 5.1 (beta) from lab8app.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
zone1Flat:
	DW	1
zone2Flat:
	DW	1
zone1Count:
	DW	0
zone2Count:
	DW	0
	ALIGN	2
recievedInterrupt:
	; >>>>> Line:	72
	; >>>>> { 
	jmp	L_lab8app_3
L_lab8app_4:
	; >>>>> Line:	73
	; >>>>> YKSemPost(semPtr); 
	push	word [semPtr]
	call	YKSemPost
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_lab8app_3:
	push	bp
	mov	bp, sp
	jmp	L_lab8app_4
L_lab8app_6:
	DB	"not enough pieces",0xD,0xA,0
	ALIGN	2
newPieceInterrupt:
	; >>>>> Line:	77
	; >>>>> { 
	jmp	L_lab8app_7
L_lab8app_8:
	; >>>>> Line:	78
	; >>>>> if (availablePieces <= 0) 
	cmp	word [L_lab8app_1], 0
	jg	L_lab8app_9
	; >>>>> Line:	80
	; >>>>> printString("not enough pieces\r\n"); 
	mov	ax, L_lab8app_6
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	81
	; >>>>>  
	mov	al, 255
	push	ax
	call	exit
	add	sp, 2
L_lab8app_9:
	; >>>>> Line:	83
	; >>>>> availablePieces--; 
	dec	word [L_lab8app_1]
	; >>>>> Line:	84
	; >>>>> pieces[availablePieces].ID = NewPieceID; 
	mov	ax, word [L_lab8app_1]
	mov	cx, 3
	shl	ax, cl
	mov	si, ax
	add	si, pieces
	mov	ax, word [NewPieceID]
	mov	word [si], ax
	; >>>>> Line:	85
	; >>>>> pieces[availablePieces].type = NewPieceType; 
	mov	ax, word [L_lab8app_1]
	mov	cx, 3
	shl	ax, cl
	add	ax, pieces
	mov	si, ax
	add	si, 2
	mov	ax, word [NewPieceType]
	mov	word [si], ax
	; >>>>> Line:	86
	; >>>>> pieces[availablePieces].orient = NewPieceOrientation; 
	mov	ax, word [L_lab8app_1]
	mov	cx, 3
	shl	ax, cl
	add	ax, pieces
	mov	si, ax
	add	si, 4
	mov	ax, word [NewPieceOrientation]
	mov	word [si], ax
	; >>>>> Line:	87
	; >>>>> pieces[availablePieces].column = NewPieceColumn; 
	mov	ax, word [L_lab8app_1]
	mov	cx, 3
	shl	ax, cl
	add	ax, pieces
	mov	si, ax
	add	si, 6
	mov	ax, word [NewPieceColumn]
	mov	word [si], ax
	; >>>>> Line:	88
	; >>>>> YKQPost(pieceQPtr, (void*) &(pieces[availablePieces])); 
	mov	ax, word [L_lab8app_1]
	mov	cx, 3
	shl	ax, cl
	add	ax, pieces
	push	ax
	push	word [pieceQPtr]
	call	YKQPost
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_lab8app_7:
	push	bp
	mov	bp, sp
	jmp	L_lab8app_8
L_lab8app_11:
	DB	"GAME OVER!",0
	ALIGN	2
setGameOver:
	; >>>>> Line:	92
	; >>>>> { 
	jmp	L_lab8app_12
L_lab8app_13:
	; >>>>> Line:	93
	; >>>>> printString("GAME OVER!"); 
	mov	ax, L_lab8app_11
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	94
	; >>>>> exit(0xff); 
	mov	al, 255
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_lab8app_12:
	push	bp
	mov	bp, sp
	jmp	L_lab8app_13
L_lab8app_15:
	DB	"no moves",0xD,0xA,0
	ALIGN	2
move:
	; >>>>> Line:	101
	; >>>>> { 
	jmp	L_lab8app_16
L_lab8app_17:
	; >>>>> Line:	102
	; >>>>> if (availableMoves <= 0) 
	cmp	word [L_lab8app_2], 0
	jg	L_lab8app_18
	; >>>>> Line:	104
	; >>>>> printString("no moves\r\n"); 
	mov	ax, L_lab8app_15
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	105
	; >>>>> exit(0 
	mov	al, 255
	push	ax
	call	exit
	add	sp, 2
L_lab8app_18:
	; >>>>> Line:	107
	; >>>>> availableMoves--; 
	dec	word [L_lab8app_2]
	; >>>>> Line:	108
	; >>>>> moves[availableMoves].id = id; 
	mov	ax, word [L_lab8app_2]
	shl	ax, 1
	shl	ax, 1
	add	ax, moves
	mov	si, ax
	add	si, 2
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	109
	; >>>>> moves[availableMoves].move = move; 
	mov	ax, word [L_lab8app_2]
	shl	ax, 1
	shl	ax, 1
	mov	si, ax
	add	si, moves
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	111
	; >>>>> YKQPost(moveQPtr, (void*) &(moves[availableMoves])); 
	mov	ax, word [L_lab8app_2]
	shl	ax, 1
	shl	ax, 1
	add	ax, moves
	push	ax
	push	word [moveQPtr]
	call	YKQPost
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_lab8app_16:
	push	bp
	mov	bp, sp
	jmp	L_lab8app_17
	ALIGN	2
cornerPieceZone1:
	; >>>>> Line:	116
	; >>>>> { 
	jmp	L_lab8app_20
L_lab8app_21:
	; >>>>> Line:	122
	; >>>>> if (!zone1Flat) 
	mov	si, word [bp+4]
	mov	ax, word [si]
	mov	word [bp-2], ax
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-4], ax
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-6], ax
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-8], ax
	; >>>>> Line:	122
	; >>>>> if (!zone1Flat) 
	mov	ax, word [zone1Flat]
	test	ax, ax
	jne	L_lab8app_22
	; >>>>> Line:	125
	; >>>>> if (orientation == 1) 
	cmp	word [bp-6], 1
	jne	L_lab8app_23
	; >>>>> Line:	127
	; >>>>> move(id, 2); 
	mov	ax, 2
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	jmp	L_lab8app_24
L_lab8app_23:
	; >>>>> Line:	129
	; >>>>> else if (orientation == 3) 
	cmp	word [bp-6], 3
	jne	L_lab8app_25
	; >>>>> Line:	131
	; >>>>> if (column == 0) 
	mov	ax, word [bp-8]
	test	ax, ax
	jne	L_lab8app_26
	; >>>>> Line:	133
	; >>>>> move(id, 1); 
	mov	ax, 1
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	134
	; >>>>> = 0) 
	inc	word [bp-8]
L_lab8app_26:
	; >>>>> Line:	136
	; >>>>> move(id, 3); 
	mov	ax, 3
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	jmp	L_lab8app_27
L_lab8app_25:
	; >>>>> Line:	138
	; >>>>> else if (orientation == 0) 
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_lab8app_28
	; >>>>> Line:	140
	; >>>>> if (column == 0) 
	mov	ax, word [bp-8]
	test	ax, ax
	jne	L_lab8app_29
	; >>>>> Line:	142
	; >>>>> move(id, 1); 
	mov	ax, 1
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	143
	; >>>>> column++; 
	inc	word [bp-8]
L_lab8app_29:
	; >>>>> Line:	145
	; >>>>> move(id, 3); 
	mov	ax, 3
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	146
	; >>>>> move(id, 3); 
	mov	ax, 3
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
L_lab8app_28:
L_lab8app_27:
L_lab8app_24:
	; >>>>> Line:	148
	; >>>>> tempColumn = column; 
	mov	ax, word [bp-8]
	mov	word [bp-10], ax
	; >>>>> Line:	149
	; >>>>> while (tempColumn != 2) 
	jmp	L_lab8app_31
L_lab8app_30:
	; >>>>> Line:	151
	; >>>>> if (tempColumn > 2) 
	cmp	word [bp-10], 2
	jbe	L_lab8app_33
	; >>>>> Line:	153
	; >>>>> move(id, 0); 
	xor	ax, ax
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	154
	; >>>>> tempColumn--; 
	dec	word [bp-10]
	jmp	L_lab8app_34
L_lab8app_33:
	; >>>>> Line:	158
	; >>>>> move(id, 1); 
	mov	ax, 1
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	159
	; >>>>> tempColumn++; 
	inc	word [bp-10]
L_lab8app_34:
L_lab8app_31:
	cmp	word [bp-10], 2
	jne	L_lab8app_30
L_lab8app_32:
	; >>>>> Line:	162
	; >>>>> zone1Flat = 1; 
	mov	word [zone1Flat], 1
	; >>>>> Line:	163
	; >>>>> zone1Count += 2; 
	add	word [zone1Count], 2
	jmp	L_lab8app_35
L_lab8app_22:
	; >>>>> Line:	165
	; >>>>> else if (!zone2Flat) 
	mov	ax, word [zone2Flat]
	test	ax, ax
	jne	L_lab8app_36
	; >>>>> Line:	168
	; >>>>> if (orientation == 1) 
	cmp	word [bp-6], 1
	jne	L_lab8app_37
	; >>>>> Line:	170
	; >>>>> move(id, 2); 
	mov	ax, 2
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	jmp	L_lab8app_38
L_lab8app_37:
	; >>>>> Line:	172
	; >>>>> else if (orientation == 3) 
	cmp	word [bp-6], 3
	jne	L_lab8app_39
	; >>>>> Line:	174
	; >>>>> if (column == 0) 
	mov	ax, word [bp-8]
	test	ax, ax
	jne	L_lab8app_40
	; >>>>> Line:	176
	; >>>>>  
	mov	ax, 1
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	177
	; >>>>> column++; 
	inc	word [bp-8]
L_lab8app_40:
	; >>>>> Line:	179
	; >>>>> move(id, 3); 
	mov	ax, 3
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	jmp	L_lab8app_41
L_lab8app_39:
	; >>>>> Line:	181
	; >>>>> else if (orientation == 0) 
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_lab8app_42
	; >>>>> Line:	183
	; >>>>> if (column == 0) 
	mov	ax, word [bp-8]
	test	ax, ax
	jne	L_lab8app_43
	; >>>>> Line:	185
	; >>>>> move(id, 1); 
	mov	ax, 1
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	186
	; >>>>> column++; 
	inc	word [bp-8]
L_lab8app_43:
	; >>>>> Line:	188
	; >>>>> move(id, 3); 
	mov	ax, 3
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	189
	; >>>>> move(id, 3); 
	mov	ax, 3
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
L_lab8app_42:
L_lab8app_41:
L_lab8app_38:
	; >>>>> Line:	192
	; >>>>> tempColumn = column; 
	mov	ax, word [bp-8]
	mov	word [bp-10], ax
	; >>>>> Line:	193
	; >>>>> while (tempColumn != 5) 
	jmp	L_lab8app_45
L_lab8app_44:
	; >>>>> Line:	195
	; >>>>> move(id, 1); 
	mov	ax, 1
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	196
	; >>>>> tempColumn++; 
	inc	word [bp-10]
L_lab8app_45:
	cmp	word [bp-10], 5
	jne	L_lab8app_44
L_lab8app_46:
	; >>>>> Line:	198
	; >>>>> zone2Flat = 1; 
	mov	word [zone2Flat], 1
	; >>>>> Line:	199
	; >>>>> zone2Count += 2; 
	add	word [zone2Count], 2
	jmp	L_lab8app_47
L_lab8app_36:
	; >>>>> Line:	203
	; >>>>> if (orientation == 1) 
	cmp	word [bp-6], 1
	jne	L_lab8app_48
	; >>>>> Line:	205
	; >>>>> if (column == 5) 
	cmp	word [bp-8], 5
	jne	L_lab8app_49
	; >>>>> Line:	207
	; >>>>> move(id, 0); 
	xor	ax, ax
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	208
	; >>>>> column--; 
	dec	word [bp-8]
L_lab8app_49:
	; >>>>> Line:	210
	; >>>>> move(id, 3); 
	mov	ax, 3
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	jmp	L_lab8app_50
L_lab8app_48:
	; >>>>> Line:	212
	; >>>>> else if (orientation == 2) 
	cmp	word [bp-6], 2
	jne	L_lab8app_51
	; >>>>> Line:	214
	; >>>>> if (column == 5) 
	cmp	word [bp-8], 5
	jne	L_lab8app_52
	; >>>>> Line:	216
	; >>>>> move(id, 0); 
	xor	ax, ax
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	217
	; >>>>> if (col 
	dec	word [bp-8]
L_lab8app_52:
	; >>>>> Line:	219
	; >>>>> move(id, 3); 
	mov	ax, 3
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	220
	; >>>>> move(id, 3); 
	mov	ax, 3
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	jmp	L_lab8app_53
L_lab8app_51:
	; >>>>> Line:	222
	; >>>>> else if (orientation == 3) 
	cmp	word [bp-6], 3
	jne	L_lab8app_54
	; >>>>> Line:	224
	; >>>>> move(id, 2); 
	mov	ax, 2
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
L_lab8app_54:
L_lab8app_53:
L_lab8app_50:
	; >>>>> Line:	226
	; >>>>> tempColumn = column; 
	mov	ax, word [bp-8]
	mov	word [bp-10], ax
	; >>>>> Line:	227
	; >>>>> while (tempColumn != 0){ 
	jmp	L_lab8app_56
L_lab8app_55:
	; >>>>> Line:	228
	; >>>>> move(id, 0); 
	xor	ax, ax
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	229
	; >>>>> tempColumn--; 
	dec	word [bp-10]
L_lab8app_56:
	mov	ax, word [bp-10]
	test	ax, ax
	jne	L_lab8app_55
L_lab8app_57:
	; >>>>> Line:	231
	; >>>>> zone1Flat = 0; 
	mov	word [zone1Flat], 0
L_lab8app_47:
L_lab8app_35:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_20:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_lab8app_21
	ALIGN	2
cornerPieceZone2:
	; >>>>> Line:	236
	; >>>>> { 
	jmp	L_lab8app_59
L_lab8app_60:
	; >>>>> Line:	242
	; >>>>> if (!zone2Flat) 
	mov	si, word [bp+4]
	mov	ax, word [si]
	mov	word [bp-2], ax
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-4], ax
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-6], ax
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-8], ax
	; >>>>> Line:	242
	; >>>>> if (!zone2Flat) 
	mov	ax, word [zone2Flat]
	test	ax, ax
	jne	L_lab8app_61
	; >>>>> Line:	244
	; >>>>> if (orientation == 1) 
	cmp	word [bp-6], 1
	jne	L_lab8app_62
	; >>>>> Line:	246
	; >>>>> move(id, 2); 
	mov	ax, 2
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	jmp	L_lab8app_63
L_lab8app_62:
	; >>>>> Line:	248
	; >>>>> else if (orientation == 3) 
	cmp	word [bp-6], 3
	jne	L_lab8app_64
	; >>>>> Line:	250
	; >>>>> if (col 
	mov	ax, word [bp-8]
	test	ax, ax
	jne	L_lab8app_65
	; >>>>> Line:	252
	; >>>>> move(id, 1); 
	mov	ax, 1
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	253
	; >>>>> column++; 
	inc	word [bp-8]
L_lab8app_65:
	; >>>>> Line:	255
	; >>>>> move(id, 3); 
	mov	ax, 3
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	jmp	L_lab8app_66
L_lab8app_64:
	; >>>>> Line:	257
	; >>>>> else if (orientation == 0) 
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_lab8app_67
	; >>>>> Line:	259
	; >>>>> if (column == 0) 
	mov	ax, word [bp-8]
	test	ax, ax
	jne	L_lab8app_68
	; >>>>> Line:	261
	; >>>>> move(id, 1); 
	mov	ax, 1
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	262
	; >>>>> column++; 
	inc	word [bp-8]
L_lab8app_68:
	; >>>>> Line:	264
	; >>>>> move(id, 3); 
	mov	ax, 3
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	265
	; >>>>> move(id, 3); 
	mov	ax, 3
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
L_lab8app_67:
L_lab8app_66:
L_lab8app_63:
	; >>>>> Line:	267
	; >>>>> tempColumn = column; 
	mov	ax, word [bp-8]
	mov	word [bp-10], ax
	; >>>>> Line:	268
	; >>>>> while (tempColumn != 5) 
	jmp	L_lab8app_70
L_lab8app_69:
	; >>>>> Line:	270
	; >>>>> move(id, 1); 
	mov	ax, 1
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	271
	; >>>>> tempColumn++; 
	inc	word [bp-10]
L_lab8app_70:
	cmp	word [bp-10], 5
	jne	L_lab8app_69
L_lab8app_71:
	; >>>>> Line:	273
	; >>>>> zone2Flat = 1; 
	mov	word [zone2Flat], 1
	; >>>>> Line:	274
	; >>>>> zone2Count += 2; 
	add	word [zone2Count], 2
	jmp	L_lab8app_72
L_lab8app_61:
	; >>>>> Line:	276
	; >>>>> else if (!zone1Flat) 
	mov	ax, word [zone1Flat]
	test	ax, ax
	jne	L_lab8app_73
	; >>>>> Line:	278
	; >>>>> if (orientation == 1) 
	cmp	word [bp-6], 1
	jne	L_lab8app_74
	; >>>>> Line:	280
	; >>>>> move(id, 2); 
	mov	ax, 2
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	jmp	L_lab8app_75
L_lab8app_74:
	; >>>>> Line:	282
	; >>>>> else if (orientation == 3) 
	cmp	word [bp-6], 3
	jne	L_lab8app_76
	; >>>>> Line:	284
	; >>>>> if (column == 0) 
	mov	ax, word [bp-8]
	test	ax, ax
	jne	L_lab8app_77
	; >>>>> Line:	286
	; >>>>> move(id, 1); 
	mov	ax, 1
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	287
	; >>>>> column++; 
	inc	word [bp-8]
L_lab8app_77:
	; >>>>> Line:	289
	; >>>>> move(id, 3); 
	mov	ax, 3
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	jmp	L_lab8app_78
L_lab8app_76:
	; >>>>> Line:	291
	; >>>>> else if (orientation == 0) 
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_lab8app_79
	; >>>>> Line:	293
	; >>>>> if (column == 0) 
	mov	ax, word [bp-8]
	test	ax, ax
	jne	L_lab8app_80
	; >>>>> Line:	295
	; >>>>> move(id, 1); 
	mov	ax, 1
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	296
	; >>>>> column++; 
	inc	word [bp-8]
L_lab8app_80:
	; >>>>> Line:	298
	; >>>>> move(id, 3); 
	mov	ax, 3
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	299
	; >>>>> move(id, 3); 
	mov	ax, 3
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
L_lab8app_79:
L_lab8app_78:
L_lab8app_75:
	; >>>>> Line:	301
	; >>>>> tempColumn = column; 
	mov	ax, word [bp-8]
	mov	word [bp-10], ax
	; >>>>> Line:	302
	; >>>>> while (tempColumn != 2) 
	jmp	L_lab8app_82
L_lab8app_81:
	; >>>>> Line:	304
	; >>>>> if (tempColumn > 2) 
	cmp	word [bp-10], 2
	jbe	L_lab8app_84
	; >>>>> Line:	306
	; >>>>> move(id, 0); 
	xor	ax, ax
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	307
	; >>>>> tempColumn--; 
	dec	word [bp-10]
	jmp	L_lab8app_85
L_lab8app_84:
	; >>>>> Line:	311
	; >>>>> move(id, 1); 
	mov	ax, 1
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	312
	; >>>>> tempColumn++; 
	inc	word [bp-10]
L_lab8app_85:
L_lab8app_82:
	cmp	word [bp-10], 2
	jne	L_lab8app_81
L_lab8app_83:
	; >>>>> Line:	315
	; >>>>> zone1Flat = 1; 
	mov	word [zone1Flat], 1
	; >>>>> Line:	316
	; >>>>> zone1Count += 2; 
	add	word [zone1Count], 2
	jmp	L_lab8app_86
L_lab8app_73:
	; >>>>> Line:	320
	; >>>>> if (orientation == 1) 
	cmp	word [bp-6], 1
	jne	L_lab8app_87
	; >>>>> Line:	322
	; >>>>> if (column == 5) 
	cmp	word [bp-8], 5
	jne	L_lab8app_88
	; >>>>> Line:	324
	; >>>>> move(id, 0); 
	xor	ax, ax
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	325
	; >>>>> column--; 
	dec	word [bp-8]
L_lab8app_88:
	; >>>>> Line:	327
	; >>>>> move(id, 3); 
	mov	ax, 3
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	jmp	L_lab8app_89
L_lab8app_87:
	; >>>>> Line:	329
	; >>>>> else if (orientation == 2) 
	cmp	word [bp-6], 2
	jne	L_lab8app_90
	; >>>>> Line:	331
	; >>>>> if (co 
	cmp	word [bp-8], 5
	jne	L_lab8app_91
	; >>>>> Line:	333
	; >>>>> move(id, 0); 
	xor	ax, ax
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	334
	; >>>>> column--; 
	dec	word [bp-8]
L_lab8app_91:
	; >>>>> Line:	336
	; >>>>> move(id, 3); 
	mov	ax, 3
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	337
	; >>>>> move(id, 3); 
	mov	ax, 3
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	jmp	L_lab8app_92
L_lab8app_90:
	; >>>>> Line:	339
	; >>>>> else if (orientation == 3) 
	cmp	word [bp-6], 3
	jne	L_lab8app_93
	; >>>>> Line:	341
	; >>>>> move(id, 2); 
	mov	ax, 2
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
L_lab8app_93:
L_lab8app_92:
L_lab8app_89:
	; >>>>> Line:	344
	; >>>>> tempColumn = column; 
	mov	ax, word [bp-8]
	mov	word [bp-10], ax
	; >>>>> Line:	345
	; >>>>> while (tempColumn != 3) 
	jmp	L_lab8app_95
L_lab8app_94:
	; >>>>> Line:	347
	; >>>>> if (tempColumn > 3) 
	cmp	word [bp-10], 3
	jbe	L_lab8app_97
	; >>>>> Line:	349
	; >>>>> move(id, 0); 
	xor	ax, ax
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	350
	; >>>>> tempColumn--; 
	dec	word [bp-10]
	jmp	L_lab8app_98
L_lab8app_97:
	; >>>>> Line:	354
	; >>>>> move(id, 1); 
	mov	ax, 1
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	355
	; >>>>> tempColumn++; 
	inc	word [bp-10]
L_lab8app_98:
L_lab8app_95:
	cmp	word [bp-10], 3
	jne	L_lab8app_94
L_lab8app_96:
	; >>>>> Line:	358
	; >>>>> zone2Flat = 0; 
	mov	word [zone2Flat], 0
L_lab8app_86:
L_lab8app_72:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_59:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_lab8app_60
	ALIGN	2
cornerPiece:
	; >>>>> Line:	363
	; >>>>> { 
	jmp	L_lab8app_100
L_lab8app_101:
	; >>>>> Line:	364
	; >>>>> if (zone1Count < zone2Count) 
	mov	ax, word [zone2Count]
	cmp	ax, word [zone1Count]
	jle	L_lab8app_102
	; >>>>> Line:	365
	; >>>>> cornerPieceZone1(input); 
	push	word [bp+4]
	call	cornerPieceZone1
	add	sp, 2
	jmp	L_lab8app_103
L_lab8app_102:
	; >>>>> Line:	367
	; >>>>> cornerPieceZone2(input); 
	push	word [bp+4]
	call	cornerPieceZone2
	add	sp, 2
L_lab8app_103:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_100:
	push	bp
	mov	bp, sp
	jmp	L_lab8app_101
	ALIGN	2
straightPieceZone1:
	; >>>>> Line:	371
	; >>>>> void straightPieceZone1(PIECE* input){ 
	jmp	L_lab8app_105
L_lab8app_106:
	; >>>>> Line:	378
	; >>>>> if (orientation == 1) 
	mov	si, word [bp+4]
	mov	ax, word [si]
	mov	word [bp-2], ax
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-4], ax
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-6], ax
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-8], ax
	; >>>>> Line:	378
	; >>>>> if (orientation == 1) 
	cmp	word [bp-6], 1
	jne	L_lab8app_107
	; >>>>> Line:	380
	; >>>>> if (column == 0) 
	mov	ax, word [bp-8]
	test	ax, ax
	jne	L_lab8app_108
	; >>>>> Line:	382
	; >>>>> move(id, 1); 
	mov	ax, 1
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	383
	; >>>>> column++; 
	inc	word [bp-8]
L_lab8app_108:
	; >>>>> Line:	385
	; >>>>> if (column == 5) 
	cmp	word [bp-8], 5
	jne	L_lab8app_109
	; >>>>> Line:	387
	; >>>>> move(id, 0); 
	xor	ax, ax
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	388
	; >>>>> column--; 
	dec	word [bp-8]
L_lab8app_109:
	; >>>>> Line:	390
	; >>>>> move(id, 3); 
	mov	ax, 3
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
L_lab8app_107:
	; >>>>> Line:	392
	; >>>>> if (zone1Flat) 
	mov	ax, word [zone1Flat]
	test	ax, ax
	je	L_lab8app_110
	; >>>>> Line:	394
	; >>>>> tempColumn = column; 
	mov	ax, word [bp-8]
	mov	word [bp-10], ax
	; >>>>> Line:	395
	; >>>>> while (tempColumn != 1) 
	jmp	L_lab8app_112
L_lab8app_111:
	; >>>>> Line:	397
	; >>>>> move(id, 0); 
	xor	ax, ax
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	398
	; >>>>> tempColumn--; 
	dec	word [bp-10]
L_lab8app_112:
	cmp	word [bp-10], 1
	jne	L_lab8app_111
L_lab8app_113:
	; >>>>> Line:	400
	; >>>>> zone1Count++; 
	inc	word [zone1Count]
	jmp	L_lab8app_114
L_lab8app_110:
	; >>>>> Line:	404
	; >>>>> tempColumn = column; 
	mov	ax, word [bp-8]
	mov	word [bp-10], ax
	; >>>>> Line:	405
	; >>>>> while (tempColumn != 4) 
	jmp	L_lab8app_116
L_lab8app_115:
	; >>>>> Line:	407
	; >>>>> move(id, 1); 
	mov	ax, 1
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	408
	; >>>>>  
	inc	word [bp-10]
L_lab8app_116:
	cmp	word [bp-10], 4
	jne	L_lab8app_115
L_lab8app_117:
	; >>>>> Line:	410
	; >>>>> zone2Count++; 
	inc	word [zone2Count]
L_lab8app_114:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_105:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_lab8app_106
	ALIGN	2
straightPieceZone2:
	; >>>>> Line:	414
	; >>>>> void straightPieceZone2(PIECE* input){ 
	jmp	L_lab8app_119
L_lab8app_120:
	; >>>>> Line:	420
	; >>>>> if (orientation == 1) 
	mov	si, word [bp+4]
	mov	ax, word [si]
	mov	word [bp-2], ax
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-4], ax
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-6], ax
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-8], ax
	; >>>>> Line:	420
	; >>>>> if (orientation == 1) 
	cmp	word [bp-6], 1
	jne	L_lab8app_121
	; >>>>> Line:	422
	; >>>>> if (column == 0) 
	mov	ax, word [bp-8]
	test	ax, ax
	jne	L_lab8app_122
	; >>>>> Line:	424
	; >>>>> move(id, 1); 
	mov	ax, 1
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	425
	; >>>>> column++; 
	inc	word [bp-8]
L_lab8app_122:
	; >>>>> Line:	427
	; >>>>> if (column == 5) 
	cmp	word [bp-8], 5
	jne	L_lab8app_123
	; >>>>> Line:	429
	; >>>>> move(id, 0); 
	xor	ax, ax
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	430
	; >>>>> column--; 
	dec	word [bp-8]
L_lab8app_123:
	; >>>>> Line:	432
	; >>>>> move(id, 3); 
	mov	ax, 3
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
L_lab8app_121:
	; >>>>> Line:	434
	; >>>>> if (zone2Flat) 
	mov	ax, word [zone2Flat]
	test	ax, ax
	je	L_lab8app_124
	; >>>>> Line:	436
	; >>>>> tempColumn = column; 
	mov	ax, word [bp-8]
	mov	word [bp-10], ax
	; >>>>> Line:	437
	; >>>>> while (tempColumn != 4) 
	jmp	L_lab8app_126
L_lab8app_125:
	; >>>>> Line:	439
	; >>>>> move(id, 1); 
	mov	ax, 1
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	440
	; >>>>> tempColumn++; 
	inc	word [bp-10]
L_lab8app_126:
	cmp	word [bp-10], 4
	jne	L_lab8app_125
L_lab8app_127:
	; >>>>> Line:	442
	; >>>>> zone2Count++; 
	inc	word [zone2Count]
	jmp	L_lab8app_128
L_lab8app_124:
	; >>>>> Line:	446
	; >>>>> tempColumn = column; 
	mov	ax, word [bp-8]
	mov	word [bp-10], ax
	; >>>>> Line:	447
	; >>>>> while (tempColumn != 1) 
	jmp	L_lab8app_130
L_lab8app_129:
	; >>>>> Line:	449
	; >>>>> move(id, 0); 
	xor	ax, ax
	push	ax
	push	word [bp-2]
	call	move
	add	sp, 4
	; >>>>> Line:	450
	; >>>>> tempColumn--; 
	dec	word [bp-10]
L_lab8app_130:
	cmp	word [bp-10], 1
	jne	L_lab8app_129
L_lab8app_131:
	; >>>>> Line:	452
	; >>>>> zone1Count++; 
	inc	word [zone1Count]
L_lab8app_128:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_119:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_lab8app_120
	ALIGN	2
straightPeice:
	; >>>>> Line:	457
	; >>>>> { 
	jmp	L_lab8app_133
L_lab8app_134:
	; >>>>> Line:	458
	; >>>>> if (zone1Count < zone2Count) 
	mov	ax, word [zone2Count]
	cmp	ax, word [zone1Count]
	jle	L_lab8app_135
	; >>>>> Line:	459
	; >>>>> straightPieceZone1(input); 
	push	word [bp+4]
	call	straightPieceZone1
	add	sp, 2
	jmp	L_lab8app_136
L_lab8app_135:
	; >>>>> Line:	461
	; >>>>> straightPieceZone2(input); 
	push	word [bp+4]
	call	straightPieceZone2
	add	sp, 2
L_lab8app_136:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_133:
	push	bp
	mov	bp, sp
	jmp	L_lab8app_134
	ALIGN	2
PTask:
	; >>>>> Line:	469
	; >>>>> { 
	jmp	L_lab8app_138
L_lab8app_139:
	; >>>>> Line:	472
	; >>>>> while(1) 
	jmp	L_lab8app_141
L_lab8app_140:
	; >>>>> Line:	474
	; >>>>> temp = (PIECE*)YKQPend(pieceQPtr); 
	push	word [pieceQPtr]
	call	YKQPend
	add	sp, 2
	mov	word [bp-2], ax
	; >>>>> Line:	475
	; >>>>> availablePieces++; 
	inc	word [L_lab8app_1]
	; >>>>> Line:	477
	; >>>>> if (temp->type) 
	mov	si, word [bp-2]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	je	L_lab8app_143
	; >>>>> Line:	478
	; >>>>> straightPeice(temp); 
	push	word [bp-2]
	call	straightPeice
	add	sp, 2
	jmp	L_lab8app_144
L_lab8app_143:
	; >>>>> Line:	480
	; >>>>> cornerPiece(temp); 
	push	word [bp-2]
	call	cornerPiece
	add	sp, 2
L_lab8app_144:
L_lab8app_141:
	jmp	L_lab8app_140
L_lab8app_142:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_138:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_lab8app_139
	ALIGN	2
MTask:
	; >>>>> Line:	486
	; >>>>> { 
	jmp	L_lab8app_146
L_lab8app_147:
	; >>>>> Line:	488
	; >>>>> while(1) 
	jmp	L_lab8app_149
L_lab8app_148:
	; >>>>> Line:	490
	; >>>>> temp = (MOVE*)YKQPend(moveQPtr); 
	push	word [moveQPtr]
	call	YKQPend
	add	sp, 2
	mov	word [bp-2], ax
	; >>>>> Line:	491
	; >>>>> availableMoves++; 
	inc	word [L_lab8app_2]
	; >>>>> Line:	492
	; >>>>> if (temp->move == 0) 
	mov	si, word [bp-2]
	mov	ax, word [si]
	test	ax, ax
	jne	L_lab8app_151
	; >>>>> Line:	493
	; >>>>> SlidePiece(temp->id, 0); 
	xor	ax, ax
	push	ax
	add	si, 2
	push	word [si]
	call	SlidePiece
	add	sp, 4
	jmp	L_lab8app_152
L_lab8app_151:
	; >>>>> Line:	494
	; >>>>> else if (temp->move == 1) 
	mov	si, word [bp-2]
	cmp	word [si], 1
	jne	L_lab8app_153
	; >>>>> Line:	495
	; >>>>> SlidePiece(temp->id, 1); 
	mov	ax, 1
	push	ax
	add	si, 2
	push	word [si]
	call	SlidePiece
	add	sp, 4
	jmp	L_lab8app_154
L_lab8app_153:
	; >>>>> Line:	496
	; >>>>> else if (temp->move == 2) 
	mov	si, word [bp-2]
	cmp	word [si], 2
	jne	L_lab8app_155
	; >>>>> Line:	497
	; >>>>> RotatePiece(temp->id, 0); 
	xor	ax, ax
	push	ax
	add	si, 2
	push	word [si]
	call	RotatePiece
	add	sp, 4
	jmp	L_lab8app_156
L_lab8app_155:
	; >>>>> Line:	499
	; >>>>> RotatePiece(temp->id, 1); 
	mov	ax, 1
	push	ax
	mov	si, word [bp-2]
	add	si, 2
	push	word [si]
	call	RotatePiece
	add	sp, 4
L_lab8app_156:
L_lab8app_154:
L_lab8app_152:
	; >>>>> Line:	500
	; >>>>> YKSemPend(semPtr); 
	push	word [semPtr]
	call	YKSemPend
	add	sp, 2
L_lab8app_149:
	jmp	L_lab8app_148
L_lab8app_150:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_146:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_lab8app_147
L_lab8app_162:
	DB	"% >",0xD,0xA,0
L_lab8app_161:
	DB	", CPU: ",0
L_lab8app_160:
	DB	"<CS: ",0
L_lab8app_159:
	DB	"Determining CPU capacity",0xD,0xA,0
L_lab8app_158:
	DB	"Welcome to the YAK kernel",0xD,0xA,0
	ALIGN	2
STask:
	; >>>>> Line:	505
	; >>>>> { 
	jmp	L_lab8app_163
L_lab8app_164:
	; >>>>> Line:	509
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	510
	; >>>>> printString("Welcome to the YAK kernel\r\n"); 
	mov	ax, L_lab8app_158
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	511
	; >>>>> tchCount); 
	mov	ax, L_lab8app_159
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	512
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	513
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	514
	; >>>>> YKDelayTask(5); 
	mov	ax, 5
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	515
	; >>>>> max = YKIdleCount / 25; 
	mov	ax, word [YKIdleCount]
	xor	dx, dx
	mov	cx, 25
	div	cx
	mov	word [bp-4], ax
	; >>>>> Line:	516
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	519
	; >>>>> StartSimptris(); 
	call	StartSimptris
	; >>>>> Line:	521
	; >>>>> YKNewTask(PTask, (void*) &PTaskStk[4096], 20); 
	mov	al, 20
	push	ax
	mov	ax, (PTaskStk+8192)
	push	ax
	mov	ax, PTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	522
	; >>>>> YKNewTask(MTask, (void*) &MTaskStk[4096], 10); 
	mov	al, 10
	push	ax
	mov	ax, (MTaskStk+8192)
	push	ax
	mov	ax, MTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	525
	; >>>>> while(1) 
	jmp	L_lab8app_166
L_lab8app_165:
	; >>>>> Line:	527
	; >>>>> YKDelayTask(20); 
	mov	ax, 20
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	529
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	530
	; >>>>> switchCount = YKCtxSwCount; 
	mov	ax, word [YKCtxSwCount]
	mov	word [bp-6], ax
	; >>>>> Line:	531
	; >>>>> idleCount = YKIdleCount; 
	mov	ax, word [YKIdleCount]
	mov	word [bp-2], ax
	; >>>>> Line:	532
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	534
	; >>>>> printString("<CS: "); 
	mov	ax, L_lab8app_160
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	535
	; >>>>> printInt((int)switchCount); 
	push	word [bp-6]
	call	printInt
	add	sp, 2
	; >>>>> Line:	536
	; >>>>> n(); 
	mov	ax, L_lab8app_161
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	537
	; >>>>> tmp = (int) (idleCount/max); 
	mov	ax, word [bp-2]
	xor	dx, dx
	div	word [bp-4]
	mov	word [bp-8], ax
	; >>>>> Line:	538
	; >>>>> printInt(100-tmp); 
	mov	ax, 100
	sub	ax, word [bp-8]
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	539
	; >>>>> printString("% >\r\n"); 
	mov	ax, L_lab8app_162
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	541
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	542
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	543
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	544
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_lab8app_166:
	jmp	L_lab8app_165
L_lab8app_167:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_163:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_lab8app_164
	ALIGN	2
main:
	; >>>>> Line:	551
	; >>>>> { 
	jmp	L_lab8app_169
L_lab8app_170:
	; >>>>> Line:	552
	; >>>>> YKInitialize(); 
	call	YKInitialize
	; >>>>> Line:	554
	; >>>>> YKNewTask(STask, (void *) &STaskStk[4096], 30); 
	mov	al, 30
	push	ax
	mov	ax, (STaskStk+8192)
	push	ax
	mov	ax, STask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	555
	; >>>>> semPtr = YKSemCreate(0); 
	xor	ax, ax
	push	ax
	call	YKSemCreate
	add	sp, 2
	mov	word [semPtr], ax
	; >>>>> Line:	556
	; >>>>> pieceQPtr = YKQCreate(pieceQ, 10); 
	mov	ax, 10
	push	ax
	mov	ax, pieceQ
	push	ax
	call	YKQCreate
	add	sp, 4
	mov	word [pieceQPtr], ax
	; >>>>> Line:	557
	; >>>>> moveQPtr = YKQCreate(moveQ, 10); 
	mov	ax, 10
	push	ax
	mov	ax, moveQ
	push	ax
	call	YKQCreate
	add	sp, 4
	mov	word [moveQPtr], ax
	; >>>>> Line:	558
	; >>>>> availablePieces = 10; 
	mov	word [L_lab8app_1], 10
	; >>>>> Line:	559
	; >>>>> availableMoves = 10; 
	mov	word [L_lab8app_2], 10
	; >>>>> Line:	561
	; >>>>> SeedSimptris(87245); 
	mov	ax, 21709
	mov	dx, 1
	push	dx
	push	ax
	call	SeedSimptris
	add	sp, 4
	; >>>>> Line:	562
	; >>>>> YKRun(); 
	call	YKRun
	mov	sp, bp
	pop	bp
	ret
L_lab8app_169:
	push	bp
	mov	bp, sp
	jmp	L_lab8app_170
	ALIGN	2
semPtr:
	TIMES	2 db 0
pieceQ:
	TIMES	20 db 0
pieceQPtr:
	TIMES	2 db 0
moveQ:
	TIMES	20 db 0
moveQPtr:
	TIMES	2 db 0
PTaskStk:
	TIMES	8192 db 0
MTaskStk:
	TIMES	8192 db 0
STaskStk:
	TIMES	8192 db 0
pieces:
	TIMES	80 db 0
L_lab8app_1:
	TIMES	2 db 0
moves:
	TIMES	40 db 0
L_lab8app_2:
	TIMES	2 db 0
; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKCtxSwCount:
	DW	0
i:
	DW	0
hasRun:
	DW	0
currentEvent:
	DW	0
queueIndex:
	DW	0
	ALIGN	2
YKInitialize:
	; >>>>> Line:	48
	; >>>>> { 
	jmp	L_yakc_1
L_yakc_2:
	; >>>>> Line:	49
	; >>>>> YKE 
	call	YKEnterMutex
	; >>>>> Line:	50
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	51
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	52
	; >>>>> YKTickNum = 0; 
	mov	word [YKTickNum], 0
	; >>>>> Line:	53
	; >>>>> ISRDepth = 0; 
	mov	word [ISRDepth], 0
	; >>>>> Line:	54
	; >>>>> idxNextAvailSem = 0; 
	mov	word [idxNextAvailSem], 0
	; >>>>> Line:	55
	; >>>>> queueIndex = 0; 
	mov	word [queueIndex], 0
	; >>>>> Line:	56
	; >>>>> YKSave = 0; 
	mov	word [YKSave], 0
	; >>>>> Line:	57
	; >>>>> YKRestore = 0; 
	mov	word [YKRestore], 0
	; >>>>> Line:	58
	; >>>>> YKRdyList = 0; 
	mov	word [YKRdyList], 0
	; >>>>> Line:	59
	; >>>>> YKSuspList = 0; 
	mov	word [YKSuspList], 0
	; >>>>> Line:	60
	; >>>>> YKRunningTask = 0; 
	mov	word [YKRunningTask], 0
	; >>>>> Line:	61
	; >>>>> hasRun = 0; 
	mov	word [hasRun], 0
	; >>>>> Line:	63
	; >>>>> YKAvailTCBList = &(YKTCBArray[0]); 
	mov	word [YKAvailTCBList], YKTCBArray
	; >>>>> Line:	68
	; >>>>> for (i = 0; i < 10; i++){ 
	mov	word [i], 0
	jmp	L_yakc_4
L_yakc_3:
	; >>>>> Line:	69
	; >>>>> YKTCBArray[i].next = &(YKTCBArray[i+1]); 
	mov	ax, word [i]
	inc	ax
	mov	cx, 4
	shl	ax, cl
	add	ax, YKTCBArray
	mov	dx, word [i]
	mov	cx, 4
	shl	dx, cl
	add	dx, YKTCBArray
	mov	si, dx
	add	si, 8
	mov	word [si], ax
L_yakc_6:
	inc	word [i]
L_yakc_4:
	cmp	word [i], 10
	jl	L_yakc_3
L_yakc_5:
	; >>>>> Line:	73
	; >>>>> YKTCBArray[10].next = 0; 
	mov	word [(168+YKTCBArray)], 0
	; >>>>> Line:	74
	; >>>>> YKTCBArray[10].prev = 0; 
	mov	word [(170+YKTCBArray)], 0
	; >>>>> Line:	76
	; >>>>> YKNewTask(YKIdleTask,(void *) &(idleStk[2048]),100); 
	mov	al, 100
	push	ax
	mov	ax, (idleStk+4096)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	mov	sp, bp
	pop	bp
	ret
L_yakc_1:
	push	bp
	mov	bp, sp
	jmp	L_yakc_2
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	84
	; >>>>> void YKIdleTask(){ 
	jmp	L_yakc_8
L_yakc_9:
	; >>>>> Line:	85
	; >>>>> while(1){ 
	jmp	L_yakc_11
L_yakc_10:
	; >>>>> Line:	86
	; >>>>>  
	call	YKEnterMutex
	; >>>>> Line:	87
	; >>>>> YKIdleCount++; 
	inc	word [YKIdleCount]
	; >>>>> Line:	88
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_11:
	jmp	L_yakc_10
L_yakc_12:
	mov	sp, bp
	pop	bp
	ret
L_yakc_8:
	push	bp
	mov	bp, sp
	jmp	L_yakc_9
	ALIGN	2
YKScheduler:
	; >>>>> Line:	96
	; >>>>> void YKScheduler(int isSaved){ 
	jmp	L_yakc_14
L_yakc_15:
	; >>>>> Line:	97
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	98
	; >>>>> if (YKRunningTask != YKRdyList) { 
	mov	ax, word [YKRdyList]
	cmp	ax, word [YKRunningTask]
	je	L_yakc_16
	; >>>>> Line:	99
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	100
	; >>>>> YKDispatcher(isSaved); 
	push	word [bp+4]
	call	YKDispatcher
	add	sp, 2
L_yakc_16:
	; >>>>> Line:	102
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_14:
	push	bp
	mov	bp, sp
	jmp	L_yakc_15
	ALIGN	2
YKNewTask:
	; >>>>> Line:	111
	; >>>>> { 
	jmp	L_yakc_18
L_yakc_19:
	; >>>>> Line:	114
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	115
	; >>>>> newPoint = YKAvailTCBList; 
	mov	ax, word [YKAvailTCBList]
	mov	word [bp-4], ax
	; >>>>> Line:	116
	; >>>>> if(newPoint == 0){ 
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yakc_20
	; >>>>> Line:	117
	; >>>>> return; 
	jmp	L_yakc_21
L_yakc_20:
	; >>>>> Line:	120
	; >>>>> YKAvailTCBList = newPoint->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKAvailTCBList], ax
	; >>>>> Line:	124
	; >>>>> 0) YKR 
	mov	al, byte [bp+8]
	xor	ah, ah
	mov	si, word [bp-4]
	add	si, 4
	mov	word [si], ax
	; >>>>> Line:	125
	; >>>>> newPoint->delay = 0; 
	mov	si, word [bp-4]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	126
	; >>>>> newPoint->state = 1; 
	mov	si, word [bp-4]
	add	si, 2
	mov	word [si], 1
	; >>>>> Line:	127
	; >>>>> newPoint->eventMask = 0; 
	mov	si, word [bp-4]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	128
	; >>>>> newPoint->eventMode = 0; 
	mov	si, word [bp-4]
	add	si, 14
	mov	word [si], 0
	; >>>>> Line:	130
	; >>>>> if (YKRdyList == 0) { 
	mov	ax, word [YKRdyList]
	test	ax, ax
	jne	L_yakc_22
	; >>>>> Line:	132
	; >>>>> YKRdyList = newPoint; 
	mov	ax, word [bp-4]
	mov	word [YKRdyList], ax
	; >>>>> Line:	133
	; >>>>> newPoint->next = 0; 
	mov	si, word [bp-4]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	134
	; >>>>> newPoint->prev = 0; 
	mov	si, word [bp-4]
	add	si, 10
	mov	word [si], 0
	jmp	L_yakc_23
L_yakc_22:
	; >>>>> Line:	137
	; >>>>> comparisonPoint = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-6], ax
	; >>>>> Line:	143
	; >>>>> for (i = 0; i < 10; i ++) { 
	mov	word [i], 0
	jmp	L_yakc_25
L_yakc_24:
	; >>>>> Line:	144
	; >>>>> if (newPoint->priority < comparisonPoint->priority) { 
	mov	si, word [bp-4]
	add	si, 4
	mov	di, word [bp-6]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_yakc_28
	; >>>>> Line:	145
	; >>>>> break; 
	jmp	L_yakc_26
	jmp	L_yakc_29
L_yakc_28:
	; >>>>> Line:	148
	; >>>>> comparisonPoint = comparisonPoint->next; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakc_29:
L_yakc_27:
	inc	word [i]
L_yakc_25:
	cmp	word [i], 10
	jl	L_yakc_24
L_yakc_26:
	; >>>>> Line:	153
	; >>>>> if (comparisonPoint->prev == 0) YKR 
	mov	si, word [bp-6]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_30
	; >>>>> Line:	153
	; >>>>> oid *)stackPoint; 
	mov	ax, word [bp-4]
	mov	word [YKRdyList], ax
	jmp	L_yakc_31
L_yakc_30:
	; >>>>> Line:	156
	; >>>>> else comparisonPoint->prev->next = newPoint; 
	mov	si, word [bp-6]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
L_yakc_31:
	; >>>>> Line:	158
	; >>>>> newPoint->prev = comparisonPoint->prev; 
	mov	si, word [bp-6]
	add	si, 10
	mov	di, word [bp-4]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	159
	; >>>>> newPoint->next = comparisonPoint; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	160
	; >>>>> comparisonPoint->prev = newPoint; 
	mov	si, word [bp-6]
	add	si, 10
	mov	ax, word [bp-4]
	mov	word [si], ax
L_yakc_23:
	; >>>>> Line:	163
	; >>>>> stackPoint = (unsigned *)taskStack; 
	mov	ax, word [bp+6]
	mov	word [bp-2], ax
	; >>>>> Line:	168
	; >>>>> for (i = 0; i < 13; i++) { 
	mov	word [i], 0
	jmp	L_yakc_33
L_yakc_32:
	; >>>>> Line:	169
	; >>>>> if (i == 1){ 
	cmp	word [i], 1
	jne	L_yakc_36
	; >>>>> Line:	170
	; >>>>> stackPoint[0] = 0x0200; 
	mov	si, word [bp-2]
	mov	word [si], 512
	jmp	L_yakc_37
L_yakc_36:
	; >>>>> Line:	172
	; >>>>> else if (i == 3){ 
	cmp	word [i], 3
	jne	L_yakc_38
	; >>>>> Line:	173
	; >>>>> stackPoint[0] = (unsigned)task; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	jmp	L_yakc_39
L_yakc_38:
	; >>>>> Line:	176
	; >>>>> stackPoint[0] = 0; 
	mov	si, word [bp-2]
	mov	word [si], 0
L_yakc_39:
L_yakc_37:
	; >>>>> Line:	178
	; >>>>> stackPoint--; 
	sub	word [bp-2], 2
L_yakc_35:
	inc	word [i]
L_yakc_33:
	cmp	word [i], 13
	jl	L_yakc_32
L_yakc_34:
	; >>>>> Line:	181
	; >>>>> newPoint->stackptr = (void *)stackPoint; 
	mov	si, word [bp-4]
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	182
	; >>>>> if(hasRun == 1) { 
	cmp	word [hasRun], 1
	jne	L_yakc_40
	; >>>>> Line:	183
	; >>>>>  
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_40:
	; >>>>> Line:	185
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_21:
	mov	sp, bp
	pop	bp
	ret
L_yakc_18:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_19
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	193
	; >>>>> { 
	jmp	L_yakc_42
L_yakc_43:
	; >>>>> Line:	195
	; >>>>> if (count == 0) return; 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakc_44
	; >>>>> Line:	195
	; >>>>> if (count == 0) return; 
	jmp	L_yakc_45
L_yakc_44:
	; >>>>> Line:	196
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	197
	; >>>>> delayPoint = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	198
	; >>>>> YKRdyList = delayPoint->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	199
	; >>>>> if (YKRdyList != 0) { 
	mov	ax, word [YKRdyList]
	test	ax, ax
	je	L_yakc_46
	; >>>>> Line:	200
	; >>>>> YKRdyList->prev = 0; 
	mov	si, word [YKRdyList]
	add	si, 10
	mov	word [si], 0
L_yakc_46:
	; >>>>> Line:	203
	; >>>>> delayPoint->state = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	204
	; >>>>> delayPoint->delay = count; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	206
	; >>>>> delayPoint->next = YKSuspList; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [YKSuspList]
	mov	word [si], ax
	; >>>>> Line:	207
	; >>>>> YKSuspList = delayPoint; 
	mov	ax, word [bp-2]
	mov	word [YKSuspList], ax
	; >>>>> Line:	208
	; >>>>> delayPoint->prev = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	209
	; >>>>> if (delayPoint->next != 0) { 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_47
	; >>>>> Line:	210
	; >>>>> delayPoint->next->prev = delayPoint; 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_47:
	; >>>>> Line:	212
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	213
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_45:
	mov	sp, bp
	pop	bp
	ret
L_yakc_42:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_43
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	220
	; >>>>> priority){ 
	jmp	L_yakc_49
L_yakc_50:
	; >>>>> Line:	222
	; >>>>> YKTickNum++; 
	inc	word [YKTickNum]
	; >>>>> Line:	224
	; >>>>> temp = YKSuspList; 
	mov	ax, word [YKSuspList]
	mov	word [bp-2], ax
	; >>>>> Line:	225
	; >>>>> while (temp != 0) { 
	jmp	L_yakc_52
L_yakc_51:
	; >>>>> Line:	226
	; >>>>> temp->delay--; 
	mov	si, word [bp-2]
	add	si, 6
	dec	word [si]
	; >>>>> Line:	227
	; >>>>> if (temp->delay == 0) { 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_54
	; >>>>> Line:	228
	; >>>>> temp->state = 1; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 1
	; >>>>> Line:	229
	; >>>>> taskHold = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	230
	; >>>>> if (temp->prev != 0) { 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_55
	; >>>>> Line:	231
	; >>>>> temp->prev->next = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp-2]
	add	di, 10
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	jmp	L_yakc_56
L_yakc_55:
	; >>>>> Line:	234
	; >>>>> YKSuspList = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKSuspList], ax
L_yakc_56:
	; >>>>> Line:	236
	; >>>>> if (temp->next != 0) { 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_57
	; >>>>> Line:	237
	; >>>>> temp->next->prev = temp->prev; 
	mov	si, word [bp-2]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 8
	mov	di, word [di]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_57:
	; >>>>> Line:	239
	; >>>>> comparisonPoint = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-6], ax
	; >>>>> Line:	247
	; >>>>> for (i = 0; i < 10; i ++) { 
	mov	word [i], 0
	jmp	L_yakc_59
L_yakc_58:
	; >>>>> Line:	248
	; >>>>> if (temp->priority < comparisonPoint->priority){ 
	mov	si, word [bp-2]
	add	si, 4
	mov	di, word [bp-6]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_yakc_62
	; >>>>> Line:	249
	; >>>>> oid) { 
	jmp	L_yakc_60
	jmp	L_yakc_63
L_yakc_62:
	; >>>>> Line:	253
	; >>>>> comparisonPoint = comparisonPoint->next; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakc_63:
L_yakc_61:
	inc	word [i]
L_yakc_59:
	cmp	word [i], 10
	jl	L_yakc_58
L_yakc_60:
	; >>>>> Line:	256
	; >>>>> if (comparisonPoint->prev == 0){ 
	mov	si, word [bp-6]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_64
	; >>>>> Line:	260
	; >>>>> YKRdyList = temp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_65
L_yakc_64:
	; >>>>> Line:	264
	; >>>>> comparisonPoint->prev->next = temp; 
	mov	si, word [bp-6]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_65:
	; >>>>> Line:	268
	; >>>>> temp->prev = comparisonPoint->prev; 
	mov	si, word [bp-6]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	269
	; >>>>> temp->next = comparisonPoint; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	270
	; >>>>> comparisonPoint->prev = temp; 
	mov	si, word [bp-6]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	271
	; >>>>> temp = taskHold; 
	mov	ax, word [bp-4]
	mov	word [bp-2], ax
	jmp	L_yakc_66
L_yakc_54:
	; >>>>> Line:	274
	; >>>>> temp = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_66:
L_yakc_52:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_51
L_yakc_53:
	mov	sp, bp
	pop	bp
	ret
L_yakc_49:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_50
	ALIGN	2
YKRun:
	; >>>>> Line:	279
	; >>>>> void YKRun(void){ 
	jmp	L_yakc_68
L_yakc_69:
	; >>>>> Line:	280
	; >>>>> hasRun = 1; 
	mov	word [hasRun], 1
	; >>>>> Line:	281
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_68:
	push	bp
	mov	bp, sp
	jmp	L_yakc_69
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	285
	; >>>>> void YKEnterISR(void) { 
	jmp	L_yakc_71
L_yakc_72:
	; >>>>> Line:	286
	; >>>>> ISRDepth++; 
	inc	word [ISRDepth]
	mov	sp, bp
	pop	bp
	ret
L_yakc_71:
	push	bp
	mov	bp, sp
	jmp	L_yakc_72
	ALIGN	2
YKExitISR:
	; >>>>> Line:	290
	; >>>>> void YKExitISR(void) { 
	jmp	L_yakc_74
L_yakc_75:
	; >>>>> Line:	291
	; >>>>> ISRDepth--; 
	dec	word [ISRDepth]
	; >>>>> Line:	292
	; >>>>> if ((ISRDepth == 0)) { 
	mov	ax, word [ISRDepth]
	test	ax, ax
	jne	L_yakc_76
	; >>>>> Line:	293
	; >>>>> if (hasRun) { 
	mov	ax, word [hasRun]
	test	ax, ax
	je	L_yakc_77
	; >>>>> Line:	294
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_77:
L_yakc_76:
	mov	sp, bp
	pop	bp
	ret
L_yakc_74:
	push	bp
	mov	bp, sp
	jmp	L_yakc_75
	ALIGN	2
YKSemCreate:
	; >>>>> Line:	310
	; >>>>> YKSEM* YKSemCreate(int initialValue) { 
	jmp	L_yakc_79
L_yakc_80:
	; >>>>> Line:	311
	; >>>>> if (initialValue >= 0) { 
	cmp	word [bp+4], 0
	jl	L_yakc_81
	; >>>>> Line:	313
	; >>>>> idxNextAvailSem++; 
	mov	ax, word [idxNextAvailSem]
	shl	ax, 1
	shl	ax, 1
	add	ax, YKSemaphoreArray
	mov	word [bp-2], ax
	; >>>>> Line:	313
	; >>>>> idxNextAvailSem++; 
	inc	word [idxNextAvailSem]
	; >>>>> Line:	314
	; >>>>> currSem->value = initialValue; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	315
	; >>>>> currSem->waitList = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	316
	; >>>>> return currSem; 
	mov	ax, word [bp-2]
L_yakc_81:
L_yakc_82:
	mov	sp, bp
	pop	bp
	ret
L_yakc_79:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_80
	ALIGN	2
YKSemPend:
	; >>>>> Line:	324
	; >>>>> void YKSemPend(YKSEM* currSem) { 
	jmp	L_yakc_84
L_yakc_85:
	; >>>>> Line:	326
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	327
	; >>>>> if( ( (currSem->value) <= 0) && (hasRun == 1) ) { 
	mov	si, word [bp+4]
	cmp	word [si], 0
	jg	L_yakc_86
	cmp	word [hasRun], 1
	jne	L_yakc_86
	; >>>>> Line:	329
	; >>>>> value = value - 1; 
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	329
	; >>>>> value = value - 1; 
	mov	ax, word [bp-6]
	dec	ax
	mov	word [bp-6], ax
	; >>>>> Line:	330
	; >>>>> nt->prev  
	mov	si, word [bp+4]
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	331
	; >>>>> temp = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	332
	; >>>>> YKRdyList = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	333
	; >>>>> if (YKRdyList != 0) { 
	mov	ax, word [YKRdyList]
	test	ax, ax
	je	L_yakc_87
	; >>>>> Line:	334
	; >>>>> YKRdyList->prev = 0; 
	mov	si, word [YKRdyList]
	add	si, 10
	mov	word [si], 0
L_yakc_87:
	; >>>>> Line:	336
	; >>>>> temp->state = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	337
	; >>>>> comparisonPoint = currSem->waitList; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	338
	; >>>>> if (comparisonPoint == 0) 
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yakc_88
	; >>>>> Line:	340
	; >>>>> currSem->waitList = temp; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	341
	; >>>>> currSem->waitList->next = 0; 
	mov	si, word [bp+4]
	add	si, 2
	mov	si, word [si]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	342
	; >>>>> currSem->waitList->prev = 0; 
	mov	si, word [bp+4]
	add	si, 2
	mov	si, word [si]
	add	si, 10
	mov	word [si], 0
	jmp	L_yakc_89
L_yakc_88:
	; >>>>> Line:	345
	; >>>>> for (i = 0; i < 10; i ++) { 
	mov	word [i], 0
	jmp	L_yakc_91
L_yakc_90:
	; >>>>> Line:	346
	; >>>>> if (temp->priority < comparisonPoint->priority) { 
	mov	si, word [bp-2]
	add	si, 4
	mov	di, word [bp-4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_yakc_94
	; >>>>> Line:	347
	; >>>>> break; 
	jmp	L_yakc_92
	jmp	L_yakc_95
L_yakc_94:
	; >>>>> Line:	350
	; >>>>> comparisonPoint = comparisonPoint->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_95:
L_yakc_93:
	inc	word [i]
L_yakc_91:
	cmp	word [i], 10
	jl	L_yakc_90
L_yakc_92:
	; >>>>> Line:	353
	; >>>>> if (comparisonPoint->prev  
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_96
	; >>>>> Line:	354
	; >>>>> currSem->waitList = temp; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp-2]
	mov	word [si], ax
	jmp	L_yakc_97
L_yakc_96:
	; >>>>> Line:	357
	; >>>>> comparisonPoint->prev->next = temp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_97:
	; >>>>> Line:	359
	; >>>>> temp->prev = comparisonPoint->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	360
	; >>>>> temp->next = comparisonPoint; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	361
	; >>>>> comparisonPoint->prev = temp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_89:
	; >>>>> Line:	363
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	jmp	L_yakc_98
L_yakc_86:
	; >>>>> Line:	367
	; >>>>> value = value - 1; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	mov	word [bp-8], ax
	; >>>>> Line:	367
	; >>>>> value = value - 1; 
	mov	ax, word [bp-8]
	dec	ax
	mov	word [bp-8], ax
	; >>>>> Line:	368
	; >>>>> currSem->value = value; 
	mov	si, word [bp+4]
	mov	ax, word [bp-8]
	mov	word [si], ax
L_yakc_98:
	; >>>>> Line:	370
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_84:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_yakc_85
	ALIGN	2
YKSemPost:
	; >>>>> Line:	377
	; >>>>> void YKSemPost(YKSEM* currSem) { 
	jmp	L_yakc_100
L_yakc_101:
	; >>>>> Line:	379
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	380
	; >>>>> (currSem->value)++; 
	mov	si, word [bp+4]
	inc	word [si]
	; >>>>> Line:	382
	; >>>>> if (currSem->waitList != 0) { 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_102
	; >>>>> Line:	383
	; >>>>> temp = currSem->waitList; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	384
	; >>>>> { 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 2
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	385
	; >>>>> if (currSem->waitList != 0) { 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_103
	; >>>>> Line:	386
	; >>>>> currSem->waitList->prev = 0; 
	mov	si, word [bp+4]
	add	si, 2
	mov	si, word [si]
	add	si, 10
	mov	word [si], 0
L_yakc_103:
	; >>>>> Line:	388
	; >>>>> temp->state = 1; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 1
	; >>>>> Line:	389
	; >>>>> comparisonPoint = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	390
	; >>>>> if (comparisonPoint == 0) 
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yakc_104
	; >>>>> Line:	392
	; >>>>> YKRdyList = temp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	; >>>>> Line:	393
	; >>>>> YKRdyList->next = 0; 
	mov	si, word [YKRdyList]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	394
	; >>>>> YKRdyList->prev = 0; 
	mov	si, word [YKRdyList]
	add	si, 10
	mov	word [si], 0
	jmp	L_yakc_105
L_yakc_104:
	; >>>>> Line:	397
	; >>>>> for (i = 0; i < 10; i ++) { 
	mov	word [i], 0
	jmp	L_yakc_107
L_yakc_106:
	; >>>>> Line:	398
	; >>>>> if (temp->priority < comparisonPoint->priority){ 
	mov	si, word [bp-2]
	add	si, 4
	mov	di, word [bp-4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_yakc_110
	; >>>>> Line:	399
	; >>>>> break; 
	jmp	L_yakc_108
	jmp	L_yakc_111
L_yakc_110:
	; >>>>> Line:	402
	; >>>>> comparisonPoint = comparisonPoint->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_111:
L_yakc_109:
	inc	word [i]
L_yakc_107:
	cmp	word [i], 10
	jl	L_yakc_106
L_yakc_108:
	; >>>>> Line:	405
	; >>>>> if (comparisonPoint->prev == 0){ 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_112
	; >>>>> Line:	406
	; >>>>> YKRdyList = temp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_113
L_yakc_112:
	; >>>>> Line:	409
	; >>>>> curr 
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_113:
	; >>>>> Line:	411
	; >>>>> temp->prev = comparisonPoint->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	412
	; >>>>> temp->next = comparisonPoint; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	413
	; >>>>> comparisonPoint->prev = temp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_105:
L_yakc_102:
	; >>>>> Line:	416
	; >>>>> if (ISRDepth == 0) { YKScheduler(0); } 
	mov	ax, word [ISRDepth]
	test	ax, ax
	jne	L_yakc_114
	; >>>>> Line:	416
	; >>>>> if (ISRDepth == 0) { YKScheduler(0); } 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_114:
	; >>>>> Line:	417
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_100:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_101
	ALIGN	2
YKQCreate:
	; >>>>> Line:	431
	; >>>>> YKQ *YKQCreate(void **start, unsigned size) { 
	jmp	L_yakc_116
L_yakc_117:
	; >>>>> Line:	432
	; >>>>> if (size > 0 ) { 
	mov	ax, word [bp+6]
	test	ax, ax
	je	L_yakc_118
	; >>>>> Line:	434
	; >>>>> queueIndex++; 
	mov	ax, word [queueIndex]
	mov	cx, 12
	imul	cx
	add	ax, YKQArray
	mov	word [bp-2], ax
	; >>>>> Line:	434
	; >>>>> queueIndex++; 
	inc	word [queueIndex]
	; >>>>> Line:	435
	; >>>>> currQueue->head = 0; 
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], 0
	; >>>>> Line:	436
	; >>>>> currQueue->tail = 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	437
	; >>>>> currQueue->items = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	438
	; >>>>> currQueue->base = start; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	439
	; >>>>> currQueue->size = size; 
	mov	si, word [bp-2]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	440
	; >>>>> currQueue->waitList = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	441
	; >>>>> return curr 
	mov	ax, word [bp-2]
L_yakc_118:
L_yakc_119:
	mov	sp, bp
	pop	bp
	ret
L_yakc_116:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_117
	ALIGN	2
YKQPend:
	; >>>>> Line:	449
	; >>>>> void *YKQPend(YKQ *queue) { 
	jmp	L_yakc_121
L_yakc_122:
	; >>>>> Line:	452
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	453
	; >>>>> if ((queue->items == 0) && (hasRun == 1)) { 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_123
	cmp	word [hasRun], 1
	jne	L_yakc_123
	; >>>>> Line:	454
	; >>>>> temp = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	455
	; >>>>> YKRdyList = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	456
	; >>>>> if (YKRdyList != 0) 
	mov	ax, word [YKRdyList]
	test	ax, ax
	je	L_yakc_124
	; >>>>> Line:	457
	; >>>>> YKRdyList->prev = 0; 
	mov	si, word [YKRdyList]
	add	si, 10
	mov	word [si], 0
L_yakc_124:
	; >>>>> Line:	458
	; >>>>> temp->state = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	459
	; >>>>> comparisonPoint = queue->waitList; 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	460
	; >>>>> if (comparisonPoint == 0) 
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yakc_125
	; >>>>> Line:	462
	; >>>>> queue->waitList = temp; 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	463
	; >>>>> queue->waitList->next = 0; 
	mov	si, word [bp+4]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	464
	; >>>>> queue->waitList->prev = 0; 
	mov	si, word [bp+4]
	add	si, 10
	mov	si, word [si]
	add	si, 10
	mov	word [si], 0
	jmp	L_yakc_126
L_yakc_125:
	; >>>>> Line:	468
	; >>>>> for (i = 0; i < 10; i ++) { 
	mov	word [i], 0
	jmp	L_yakc_128
L_yakc_127:
	; >>>>> Line:	469
	; >>>>> if (temp->priority < comparisonPoint->pri 
	mov	si, word [bp-2]
	add	si, 4
	mov	di, word [bp-4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_yakc_131
	; >>>>> Line:	470
	; >>>>> break; 
	jmp	L_yakc_129
	jmp	L_yakc_132
L_yakc_131:
	; >>>>> Line:	472
	; >>>>> comparisonPoint = comparisonPoint->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_132:
L_yakc_130:
	inc	word [i]
L_yakc_128:
	cmp	word [i], 10
	jl	L_yakc_127
L_yakc_129:
	; >>>>> Line:	474
	; >>>>> if (comparisonPoint->prev == 0) 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_133
	; >>>>> Line:	475
	; >>>>> queue->waitList = temp; 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	jmp	L_yakc_134
L_yakc_133:
	; >>>>> Line:	477
	; >>>>> comparisonPoint->prev->next = temp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_134:
	; >>>>> Line:	478
	; >>>>> temp->prev = comparisonPoint->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	479
	; >>>>> temp->next = comparisonPoint; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	480
	; >>>>> comparisonPoint->prev = temp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_126:
	; >>>>> Line:	482
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	483
	; >>>>> (queue->items)--; 
	mov	si, word [bp+4]
	add	si, 2
	dec	word [si]
	; >>>>> Line:	484
	; >>>>> message = queue->base[queue->tail]; 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp+4]
	add	di, 8
	add	si, word [di]
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	485
	; >>>>> if (queue->tail == ((queue->size)-1)) 
	mov	si, word [bp+4]
	add	si, 6
	mov	di, word [bp+4]
	mov	ax, word [di]
	dec	ax
	cmp	ax, word [si]
	jne	L_yakc_135
	; >>>>> Line:	487
	; >>>>> queue->tail = 0; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 0
	jmp	L_yakc_136
L_yakc_135:
	; >>>>> Line:	489
	; >>>>> else if (queue->items == 0) 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_137
	; >>>>> Line:	491
	; >>>>> } 
	jmp	L_yakc_138
L_yakc_137:
	; >>>>> Line:	494
	; >>>>> (queue->tail)++; 
	mov	si, word [bp+4]
	add	si, 6
	inc	word [si]
L_yakc_138:
L_yakc_136:
	; >>>>> Line:	496
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	497
	; >>>>> return message; 
	mov	ax, word [bp-6]
	jmp	L_yakc_139
	jmp	L_yakc_140
L_yakc_123:
	; >>>>> Line:	500
	; >>>>> (queue->items)--; 
	mov	si, word [bp+4]
	add	si, 2
	dec	word [si]
	; >>>>> Line:	501
	; >>>>> message = queue->base[queue->tail]; 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp+4]
	add	di, 8
	add	si, word [di]
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	502
	; >>>>> if (queue->tail == ((queue->size)-1)) 
	mov	si, word [bp+4]
	add	si, 6
	mov	di, word [bp+4]
	mov	ax, word [di]
	dec	ax
	cmp	ax, word [si]
	jne	L_yakc_141
	; >>>>> Line:	504
	; >>>>> queue->tail = 0; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 0
	jmp	L_yakc_142
L_yakc_141:
	; >>>>> Line:	506
	; >>>>> else if (queue->items == 0) 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_143
	; >>>>> Line:	508
	; >>>>> } 
	jmp	L_yakc_144
L_yakc_143:
	; >>>>> Line:	511
	; >>>>> (queue->tail)++; 
	mov	si, word [bp+4]
	add	si, 6
	inc	word [si]
L_yakc_144:
L_yakc_142:
	; >>>>> Line:	513
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	514
	; >>>>> return message; 
	mov	ax, word [bp-6]
L_yakc_140:
L_yakc_139:
	mov	sp, bp
	pop	bp
	ret
L_yakc_121:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_122
	ALIGN	2
YKQPost:
	; >>>>> Line:	522
	; >>>>> int YKQPost(YKQ *queue, void *msg) { 
	jmp	L_yakc_146
L_yakc_147:
	; >>>>> Line:	526
	; >>>>> YKEnterMutex(); 
	mov	word [bp-8], 1000
	; >>>>> Line:	526
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	527
	; >>>>> if (queue->items == queue->size) 
	mov	si, word [bp+4]
	add	si, 2
	mov	di, word [bp+4]
	mov	ax, word [di]
	cmp	ax, word [si]
	jne	L_yakc_148
	; >>>>> Line:	528
	; >>>>> return 0; 
	xor	ax, ax
	jmp	L_yakc_149
L_yakc_148:
	; >>>>> Line:	529
	; >>>>> if (queue->waitList != 0) { 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_150
	; >>>>> Line:	530
	; >>>>> delay = queue->waitList 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	531
	; >>>>> while (delay != 0) 
	jmp	L_yakc_152
L_yakc_151:
	; >>>>> Line:	533
	; >>>>> if (delay->priority < maxPriority) 
	mov	si, word [bp-6]
	add	si, 4
	mov	ax, word [bp-8]
	cmp	ax, word [si]
	jle	L_yakc_154
	; >>>>> Line:	535
	; >>>>> maxPriority = delay->priority; 
	mov	si, word [bp-6]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-8], ax
L_yakc_154:
	; >>>>> Line:	537
	; >>>>> delay = delay->next; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakc_152:
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_yakc_151
L_yakc_153:
	; >>>>> Line:	539
	; >>>>> delay = queue->waitList; 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	540
	; >>>>> while (delay != 0) 
	jmp	L_yakc_156
L_yakc_155:
	; >>>>> Line:	542
	; >>>>> if (delay->priority == maxPriority) 
	mov	si, word [bp-6]
	add	si, 4
	mov	ax, word [bp-8]
	cmp	ax, word [si]
	jne	L_yakc_158
	; >>>>> Line:	544
	; >>>>> temp = delay; 
	mov	ax, word [bp-6]
	mov	word [bp-2], ax
	; >>>>> Line:	545
	; >>>>> break; 
	jmp	L_yakc_157
L_yakc_158:
	; >>>>> Line:	547
	; >>>>> delay = delay->next; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakc_156:
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_yakc_155
L_yakc_157:
	; >>>>> Line:	549
	; >>>>> if (temp->prev == 0) 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_159
	; >>>>> Line:	551
	; >>>>> queue->waitList = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	552
	; >>>>> if (queue->waitList != 0) 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_160
	; >>>>> Line:	554
	; >>>>> queue->waitList->prev = 0; 
	mov	si, word [bp+4]
	add	si, 10
	mov	si, word [si]
	add	si, 10
	mov	word [si], 0
L_yakc_160:
	jmp	L_yakc_161
L_yakc_159:
	; >>>>> Line:	559
	; >>>>> if (temp->next == 0) 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_162
	; >>>>> Line:	561
	; >>>>> temp->prev->next = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	word [si], 0
	jmp	L_yakc_163
L_yakc_162:
	; >>>>> Line:	565
	; >>>>> temp->prev->next = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp-2]
	add	di, 10
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	566
	; >>>>> temp->next->prev = temp->prev; 
	mov	si, word [bp-2]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 8
	mov	di, word [di]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_163:
L_yakc_161:
	; >>>>> Line:	570
	; >>>>> temp->state = 1; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 1
	; >>>>> Line:	571
	; >>>>> comparisonPoint = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	572
	; >>>>> if (comparisonPoint == 0) { 
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yakc_164
	; >>>>> Line:	573
	; >>>>> YKRdyList = temp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	; >>>>> Line:	574
	; >>>>> YKRdyList->next = 0; 
	mov	si, word [YKRdyList]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	575
	; >>>>> YKRdyList->prev = 0; 
	mov	si, word [YKRdyList]
	add	si, 10
	mov	word [si], 0
	jmp	L_yakc_165
L_yakc_164:
	; >>>>> Line:	578
	; >>>>> for (i = 0; i < 10; i ++) { 
	mov	word [i], 0
	jmp	L_yakc_167
L_yakc_166:
	; >>>>> Line:	579
	; >>>>> if (temp->priority < comparisonPoint->priority){ 
	mov	si, word [bp-2]
	add	si, 4
	mov	di, word [bp-4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_yakc_170
	; >>>>> Line:	580
	; >>>>> break; 
	jmp	L_yakc_168
	jmp	L_yakc_171
L_yakc_170:
	; >>>>> Line:	583
	; >>>>> comparisonPoint = comparisonPoint->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_171:
L_yakc_169:
	inc	word [i]
L_yakc_167:
	cmp	word [i], 10
	jl	L_yakc_166
L_yakc_168:
	; >>>>> Line:	586
	; >>>>> if (comparisonPoint->prev == 0){ 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_172
	; >>>>> Line:	587
	; >>>>> YKRdyList = temp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_173
L_yakc_172:
	; >>>>> Line:	590
	; >>>>> comparisonPoint-> 
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_173:
	; >>>>> Line:	593
	; >>>>> temp->prev = comparisonPoint->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	594
	; >>>>> temp->next = comparisonPoint; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	595
	; >>>>> comparisonPoint->prev = temp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_165:
L_yakc_150:
	; >>>>> Line:	598
	; >>>>> if (queue->head == ((queue->size)-1)) 
	mov	si, word [bp+4]
	add	si, 4
	mov	di, word [bp+4]
	mov	ax, word [di]
	dec	ax
	cmp	ax, word [si]
	jne	L_yakc_174
	; >>>>> Line:	600
	; >>>>> queue->head = 0; 
	mov	si, word [bp+4]
	add	si, 4
	mov	word [si], 0
	jmp	L_yakc_175
L_yakc_174:
	; >>>>> Line:	602
	; >>>>> else if (queue->items == 0) {} 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_176
	; >>>>> Line:	602
	; >>>>> else if (queue->items == 0) {} 
	jmp	L_yakc_177
L_yakc_176:
	; >>>>> Line:	605
	; >>>>> (queue->head)++; 
	mov	si, word [bp+4]
	add	si, 4
	inc	word [si]
L_yakc_177:
L_yakc_175:
	; >>>>> Line:	607
	; >>>>> queue->base[queue->head] = msg; 
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp+4]
	add	di, 8
	add	si, word [di]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	608
	; >>>>> (queue->items)++; 
	mov	si, word [bp+4]
	add	si, 2
	inc	word [si]
	; >>>>> Line:	609
	; >>>>> if (ISRDepth == 0) { YKScheduler(0); } 
	mov	ax, word [ISRDepth]
	test	ax, ax
	jne	L_yakc_178
	; >>>>> Line:	609
	; >>>>> if (ISRDepth == 0) { YKScheduler(0); } 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_178:
	; >>>>> Line:	610
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	611
	; >>>>> return 1; 
	mov	ax, 1
L_yakc_149:
	mov	sp, bp
	pop	bp
	ret
L_yakc_146:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_yakc_147
	ALIGN	2
YKEventCreate:
	; >>>>> Line:	632
	; >>>>> YKEVENT *YKEventCreate(unsigned initialValue) { 
	jmp	L_yakc_180
L_yakc_181:
	; >>>>> Line:	634
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	635
	; >>>>> currEvent = &YKEventAr 
	mov	ax, word [currentEvent]
	shl	ax, 1
	shl	ax, 1
	add	ax, YKEventArray
	mov	word [bp-2], ax
	; >>>>> Line:	636
	; >>>>> currEvent->eventGroup = initialValue; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	637
	; >>>>> currEvent->waitList = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	638
	; >>>>> currentEvent++; 
	inc	word [currentEvent]
	; >>>>> Line:	639
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	640
	; >>>>> return currEvent; 
	mov	ax, word [bp-2]
L_yakc_182:
	mov	sp, bp
	pop	bp
	ret
L_yakc_180:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_181
	ALIGN	2
YKEventPend:
	; >>>>> Line:	656
	; >>>>> unsigned YKEventPend(YKEVENT *event, unsigned eventMask, int waitMode) { 
	jmp	L_yakc_184
L_yakc_185:
	; >>>>> Line:	659
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	660
	; >>>>> if (eventMask == 0) 
	mov	ax, word [bp+6]
	test	ax, ax
	jne	L_yakc_186
	; >>>>> Line:	662
	; >>>>> newEventGroup = event->eventGroup; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	mov	word [bp-8], ax
	; >>>>> Line:	663
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	664
	; >>>>> return newEventGroup; 
	mov	ax, word [bp-8]
	jmp	L_yakc_187
L_yakc_186:
	; >>>>> Line:	666
	; >>>>> if ((waitMode == 0) && (((event->eventGroup) & (eventMask)) != 0)) 
	mov	ax, word [bp+8]
	test	ax, ax
	jne	L_yakc_188
	mov	si, word [bp+4]
	mov	ax, word [si]
	and	ax, word [bp+6]
	je	L_yakc_188
	; >>>>> Line:	668
	; >>>>> newEventGroup = event->eventGroup; 
	mov	ax, word [si]
	mov	word [bp-8], ax
	; >>>>> Line:	669
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	670
	; >>>>> return newEventGroup; 
	mov	ax, word [bp-8]
	jmp	L_yakc_187
L_yakc_188:
	; >>>>> Line:	672
	; >>>>> if ((waitMode == 1) && (((event->eventGroup) & (eventMask)) == eventMask)) 
	cmp	word [bp+8], 1
	jne	L_yakc_189
	mov	si, word [bp+4]
	mov	ax, word [si]
	and	ax, word [bp+6]
	mov	dx, word [bp+6]
	cmp	dx, ax
	jne	L_yakc_189
	; >>>>> Line:	674
	; >>>>> newEventGroup = event->eventGroup; 
	mov	ax, word [si]
	mov	word [bp-8], ax
	; >>>>> Line:	675
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	676
	; >>>>> return newEventGroup; 
	mov	ax, word [bp-8]
	jmp	L_yakc_187
L_yakc_189:
	; >>>>> Line:	678
	; >>>>> temp = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	679
	; >>>>> YKRdyList = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	680
	; >>>>> if (YKRdyList != 0) 
	mov	ax, word [YKRdyList]
	test	ax, ax
	je	L_yakc_190
	; >>>>> Line:	682
	; >>>>> YKRdyList->prev = 0; 
	mov	si, word [YKRdyList]
	add	si, 10
	mov	word [si], 0
L_yakc_190:
	; >>>>> Line:	684
	; >>>>> temp->state = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	686
	; >>>>> temp->eventMask = eventMask; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	687
	; >>>>> temp->eventMode = waitMode; 
	mov	si, word [bp-2]
	add	si, 14
	mov	ax, word [bp+8]
	mov	word [si], ax
	; >>>>> Line:	690
	; >>>>> temp->next = event->waitList; 
	mov	si, word [bp+4]
	add	si, 2
	mov	di, word [bp-2]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	691
	; >>>>> event->waitList = temp; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	692
	; >>>>> temp->prev = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	693
	; >>>>> if (temp->next != 0) { 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_191
	; >>>>> Line:	694
	; >>>>> temp->next->prev = temp; 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_191:
	; >>>>> Line:	696
	; >>>>> ent->event 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	697
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	698
	; >>>>> return event->eventGroup; 
	mov	si, word [bp+4]
	mov	ax, word [si]
L_yakc_187:
	mov	sp, bp
	pop	bp
	ret
L_yakc_184:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_yakc_185
	ALIGN	2
YKEventSet:
	; >>>>> Line:	711
	; >>>>> void YKEventSet(YKEVENT *event, unsigned eventMask) { 
	jmp	L_yakc_193
L_yakc_194:
	; >>>>> Line:	715
	; >>>>> YKEnterMutex(); 
	mov	word [bp-10], 0
	; >>>>> Line:	715
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	717
	; >>>>> newEventGroup = (event->eventGroup | eventMask); 
	mov	si, word [bp+4]
	mov	ax, word [si]
	or	ax, word [bp+6]
	mov	word [bp-8], ax
	; >>>>> Line:	718
	; >>>>> event->eventGroup = newEventGroup; 
	mov	si, word [bp+4]
	mov	ax, word [bp-8]
	mov	word [si], ax
	; >>>>> Line:	719
	; >>>>> temp = event->waitList; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	721
	; >>>>> while (temp != 0) { 
	jmp	L_yakc_196
L_yakc_195:
	; >>>>> Line:	723
	; >>>>> if (((temp->eventMode == 0) && (((event->eventGroup) & (temp->eventMask)) != 0)) || ((temp->eventMode == 1) && (((temp->eventMask) & (event->event 
	mov	si, word [bp-2]
	add	si, 14
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_200
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	mov	si, word [bp+4]
	and	ax, word [si]
	jne	L_yakc_199
L_yakc_200:
	mov	si, word [bp-2]
	add	si, 14
	cmp	word [si], 1
	jne	L_yakc_198
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	mov	si, word [bp+4]
	and	ax, word [si]
	mov	si, word [bp-2]
	add	si, 12
	mov	dx, word [si]
	cmp	dx, ax
	jne	L_yakc_198
L_yakc_199:
	; >>>>> Line:	724
	; >>>>> temp->state = 1; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 1
	; >>>>> Line:	725
	; >>>>> taskHold = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	726
	; >>>>> if (temp->prev != 0) { 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_201
	; >>>>> Line:	727
	; >>>>> temp->prev->next = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp-2]
	add	di, 10
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	jmp	L_yakc_202
L_yakc_201:
	; >>>>> Line:	730
	; >>>>> event->waitList = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 2
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_202:
	; >>>>> Line:	732
	; >>>>> if (temp->next != 0) { 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_203
	; >>>>> Line:	733
	; >>>>> temp->next->prev = temp->prev; 
	mov	si, word [bp-2]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 8
	mov	di, word [di]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_203:
	; >>>>> Line:	735
	; >>>>> comparisonPoint = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-6], ax
	; >>>>> Line:	744
	; >>>>> while (comparisonPoint->priority < temp->priority) 
	jmp	L_yakc_205
L_yakc_204:
	; >>>>> Line:	746
	; >>>>> comparisonPoint = comparisonPoint->next; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakc_205:
	mov	si, word [bp-6]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_204
L_yakc_206:
	; >>>>> Line:	748
	; >>>>> if (comparisonPoint->prev == 0){ 
	mov	si, word [bp-6]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_207
	; >>>>> Line:	752
	; >>>>> YKRdyList = temp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_208
L_yakc_207:
	; >>>>> Line:	756
	; >>>>>  
	mov	si, word [bp-6]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_208:
	; >>>>> Line:	760
	; >>>>> temp->prev = comparisonPoint->prev; 
	mov	si, word [bp-6]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	761
	; >>>>> temp->next = comparisonPoint; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	762
	; >>>>> comparisonPoint->prev = temp; 
	mov	si, word [bp-6]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	763
	; >>>>> temp = taskHold; 
	mov	ax, word [bp-4]
	mov	word [bp-2], ax
	; >>>>> Line:	764
	; >>>>> taskReady = 1; 
	mov	word [bp-10], 1
	jmp	L_yakc_209
L_yakc_198:
	; >>>>> Line:	767
	; >>>>> temp = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_209:
L_yakc_196:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_195
L_yakc_197:
	; >>>>> Line:	770
	; >>>>> if ((taskReady == 1) && (ISRDepth == 0)) 
	cmp	word [bp-10], 1
	jne	L_yakc_210
	mov	ax, word [ISRDepth]
	test	ax, ax
	jne	L_yakc_210
	; >>>>> Line:	772
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_210:
	; >>>>> Line:	774
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_193:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_yakc_194
	ALIGN	2
YKEventReset:
	; >>>>> Line:	784
	; >>>>> void YKEventReset(YKEVENT *event, unsigned eventMask) { 
	jmp	L_yakc_212
L_yakc_213:
	; >>>>> Line:	786
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	788
	; >>>>> newEventGroup = ((event->eventGroup) & ~(eventMask)); 
	mov	ax, word [bp+6]
	not	ax
	mov	si, word [bp+4]
	and	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	789
	; >>>>> event->eventGroup = newE 
	mov	si, word [bp+4]
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	790
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_212:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_213
L_yakc_220:
	DB	"value: 0x",0
L_yakc_219:
	DB	"Tasks in the Delay List:",0
L_yakc_218:
	DB	" / Delay Count: 0x",0
L_yakc_217:
	DB	" / Stack Pointer: 0x",0
L_yakc_216:
	DB	"Priority: 0x",0
L_yakc_215:
	DB	"Tasks in the Ready List:",0
	ALIGN	2
printLists:
	; >>>>> Line:	797
	; >>>>> void printLists(void){ 
	jmp	L_yakc_221
L_yakc_222:
	; >>>>> Line:	799
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	800
	; >>>>> printString("Tasks in the Ready List:"); 
	mov	ax, L_yakc_215
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	801
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	802
	; >>>>> tempPoint = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	803
	; >>>>> while(tempPoint != 0){ 
	jmp	L_yakc_224
L_yakc_223:
	; >>>>> Line:	804
	; >>>>> printString("Priority: 0x"); 
	mov	ax, L_yakc_216
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	805
	; >>>>> printByte(tempPoint->priority); 
	mov	si, word [bp-2]
	add	si, 4
	push	word [si]
	call	printByte
	add	sp, 2
	; >>>>> Line:	806
	; >>>>> printString(" / Stack Pointer: 0x"); 
	mov	ax, L_yakc_217
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	807
	; >>>>> printWord((int)tempPoint->stackptr); 
	mov	si, word [bp-2]
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	808
	; >>>>> printString(" / Delay Count: 0x"); 
	mov	ax, L_yakc_218
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	809
	; >>>>> printByte(tempPoint->delay); 
	mov	si, word [bp-2]
	add	si, 6
	push	word [si]
	call	printByte
	add	sp, 2
	; >>>>> Line:	810
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	811
	; >>>>> tempPoint = tempPoint->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_224:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_223
L_yakc_225:
	; >>>>> Line:	813
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	814
	; >>>>> printString("Tasks i 
	mov	ax, L_yakc_219
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	815
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	816
	; >>>>> tempPoint = YKSuspList; 
	mov	ax, word [YKSuspList]
	mov	word [bp-2], ax
	; >>>>> Line:	817
	; >>>>> while(tempPoint != 0){ 
	jmp	L_yakc_227
L_yakc_226:
	; >>>>> Line:	818
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	819
	; >>>>> printString("Priority: 0x"); 
	mov	ax, L_yakc_216
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	820
	; >>>>> printByte(tempPoint->priority); 
	mov	si, word [bp-2]
	add	si, 4
	push	word [si]
	call	printByte
	add	sp, 2
	; >>>>> Line:	821
	; >>>>> printString(" / Stack Pointer: 0x"); 
	mov	ax, L_yakc_217
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	822
	; >>>>> printWord((int)tempPoint->stackptr); 
	mov	si, word [bp-2]
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	823
	; >>>>> printString(" / Delay Count: 0x"); 
	mov	ax, L_yakc_218
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	824
	; >>>>> printByte(tempPoint->delay); 
	mov	si, word [bp-2]
	add	si, 6
	push	word [si]
	call	printByte
	add	sp, 2
	; >>>>> Line:	825
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	826
	; >>>>> tempPoint = tempPoint->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_227:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_226
L_yakc_228:
	; >>>>> Line:	828
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	829
	; >>>>> printString("Tasks in the Delay List:"); 
	mov	ax, L_yakc_219
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	830
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	831
	; >>>>> temp = &(YKSemaphoreArray[0]); 
	mov	word [temp], YKSemaphoreArray
	; >>>>> Line:	832
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	833
	; >>>>> printString("value 
	mov	ax, L_yakc_220
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	834
	; >>>>> printInt(temp->value); 
	mov	si, word [temp]
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	835
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	836
	; >>>>> tempPoint = temp->waitList; 
	mov	si, word [temp]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	837
	; >>>>> while(tempPoint != 0){ 
	jmp	L_yakc_230
L_yakc_229:
	; >>>>> Line:	838
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	839
	; >>>>> printString("Priority: 0x"); 
	mov	ax, L_yakc_216
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	840
	; >>>>> printByte(tempPoint->priority); 
	mov	si, word [bp-2]
	add	si, 4
	push	word [si]
	call	printByte
	add	sp, 2
	; >>>>> Line:	841
	; >>>>> printString(" / Stack Pointer: 0x"); 
	mov	ax, L_yakc_217
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	842
	; >>>>> printWord((int)tempPoint->stackptr); 
	mov	si, word [bp-2]
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	843
	; >>>>> printString(" / Delay Count: 0x"); 
	mov	ax, L_yakc_218
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	844
	; >>>>> printByte(tempPoint->delay); 
	mov	si, word [bp-2]
	add	si, 6
	push	word [si]
	call	printByte
	add	sp, 2
	; >>>>> Line:	845
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	846
	; >>>>> tempPoint = tempPoint->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_230:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_229
L_yakc_231:
	mov	sp, bp
	pop	bp
	ret
L_yakc_221:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_222
	ALIGN	2
YKIdleCount:
	TIMES	2 db 0
YKTickNum:
	TIMES	2 db 0
ISRDepth:
	TIMES	2 db 0
YKSave:
	TIMES	2 db 0
YKRestore:
	TIMES	2 db 0
idleStk:
	TIMES	4096 db 0
idxNextAvailSem:
	TIMES	2 db 0
YKRdyList:
	TIMES	2 db 0
temp:
	TIMES	2 db 0
YKAvailTCBList:
	TIMES	2 db 0
YKSuspList:
	TIMES	2 db 0
YKRunningTask:
	TIMES	2 db 0
YKTCBArray:
	TIMES	176 db 0
YKSemaphoreArray:
	TIMES	24 db 0
YKQArray:
	TIMES	24 db 0
YKEventArray:
	TIMES	8 db 0
