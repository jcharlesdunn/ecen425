; Generated by c86 (BYU-NASM) 5.1 (beta) from lab7app.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
PieceTask:
	; >>>>> Line:	29
	; >>>>> { 
	jmp	L_lab7app_1
L_lab7app_2:
	; >>>>> Line:	31
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_lab7app_1:
	push	bp
	mov	bp, sp
	jmp	L_lab7app_2
L_lab7app_8:
	DB	"% >>>>>",0xD,0xA,0
L_lab7app_7:
	DB	", CPU usage: ",0
L_lab7app_6:
	DB	"<<<<< Context switches: ",0
L_lab7app_5:
	DB	"Determining CPU capacity",0xD,0xA,0
L_lab7app_4:
	DB	"Welcome to the YAK kernel",0xD,0xA,0
	ALIGN	2
STask:
	; >>>>> Line:	42
	; >>>>> { 
	jmp	L_lab7app_9
L_lab7app_10:
	; >>>>> Line:	46
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	47
	; >>>>> printString("Welcome to the YAK kernel\r\n"); 
	mov	ax, L_lab7app_4
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	48
	; >>>>> printString("Determining CPU capacity\r\n"); 
	mov	ax, L_lab7app_5
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	49
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	50
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	51
	; >>>>> YKDelayTask(5); 
	mov	ax, 5
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	52
	; >>>>> max = YKIdleCount / 25; 
	mov	ax, word [YKIdleCount]
	xor	dx, dx
	mov	cx, 25
	div	cx
	mov	word [bp-2], ax
	; >>>>> Line:	53
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	56
	; >>>>> YKNewTask(PieceTask, (void *) &PieceTaskStk[512], 0); 
	xor	al, al
	push	ax
	mov	ax, (PieceTaskStk+1024)
	push	ax
	mov	ax, PieceTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	58
	; >>>>> while (1) 
	jmp	L_lab7app_12
L_lab7app_11:
	; >>>>> Line:	60
	; >>>>> YKDelayTask(20); 
	mov	ax, 20
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	62
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	63
	; >>>>> switchCount = YKCtxSwCount; 
	mov	ax, word [YKCtxSwCount]
	mov	word [bp-4], ax
	; >>>>> Line:	64
	; >>>>> idleCount = YKIdleCount; 
	mov	ax, word [YKIdleCount]
	mov	word [bp-6], ax
	; >>>>> Line:	65
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	67
	; >>>>> printString("<<<<< Conte 
	mov	ax, L_lab7app_6
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	68
	; >>>>> printInt((int)switchCount); 
	push	word [bp-4]
	call	printInt
	add	sp, 2
	; >>>>> Line:	69
	; >>>>> printString(", CPU usage: "); 
	mov	ax, L_lab7app_7
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	70
	; >>>>> tmp = (int) (idleCount/max); 
	mov	ax, word [bp-6]
	xor	dx, dx
	div	word [bp-2]
	mov	word [bp-8], ax
	; >>>>> Line:	71
	; >>>>> printInt(100-tmp); 
	mov	ax, 100
	sub	ax, word [bp-8]
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	72
	; >>>>> printString("% >>>>>\r\n"); 
	mov	ax, L_lab7app_8
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	74
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	75
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	76
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	77
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_lab7app_12:
	jmp	L_lab7app_11
L_lab7app_13:
	mov	sp, bp
	pop	bp
	ret
L_lab7app_9:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_lab7app_10
	ALIGN	2
main:
	; >>>>> Line:	84
	; >>>>> { 
	jmp	L_lab7app_15
L_lab7app_16:
	; >>>>> Line:	85
	; >>>>> YKInitialize(); 
	call	YKInitialize
	; >>>>> Line:	86
	; >>>>> PQPtr = YKQCreate(PieceQ, 10); 
	mov	ax, 10
	push	ax
	mov	ax, PieceQ
	push	ax
	call	YKQCreate
	add	sp, 4
	mov	word [PQPtr], ax
	; >>>>> Line:	87
	; >>>>> YKNewTask(STask, (void *) &STaskStk[512], 1); 
	mov	al, 1
	push	ax
	mov	ax, (STaskStk+1024)
	push	ax
	mov	ax, STask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	88
	; >>>>> SeedSimptris((long)1); 
	mov	ax, 1
	xor	dx, dx
	push	dx
	push	ax
	call	SeedSimptris
	add	sp, 4
	; >>>>> Line:	89
	; >>>>> StartSimptris(); 
	call	StartSimptris
	; >>>>> Line:	90
	; >>>>> YKRun(); 
	call	YKRun
	mov	sp, bp
	pop	bp
	ret
L_lab7app_15:
	push	bp
	mov	bp, sp
	jmp	L_lab7app_16
	ALIGN	2
PieceTaskStk:
	TIMES	1024 db 0
MoveTaskStk:
	TIMES	1024 db 0
STaskStk:
	TIMES	1024 db 0
PieceQ:
	TIMES	20 db 0
PQPtr:
	TIMES	2 db 0
