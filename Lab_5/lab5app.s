; Generated by c86 (BYU-NASM) 5.1 (beta) from lab5app.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
L_lab5app_3:
	DB	"works",0
L_lab5app_2:
	DB	"it",0
L_lab5app_1:
	DB	"Hey",0
	ALIGN	2
TaskWord:
	; >>>>> Line:	25
	; >>>>> { 
	jmp	L_lab5app_4
L_lab5app_5:
	; >>>>> Line:	26
	; >>>>> while (1) 
	jmp	L_lab5app_7
L_lab5app_6:
	; >>>>> Line:	28
	; >>>>> YKSemPend(WSemPtr); 
	push	word [WSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	29
	; >>>>> printString("Hey"); 
	mov	ax, L_lab5app_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	30
	; >>>>> YKSemPost(PSemPtr); 
	push	word [PSemPtr]
	call	YKSemPost
	add	sp, 2
	; >>>>> Line:	32
	; >>>>> YKSemPend(WSemPtr); 
	push	word [WSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	33
	; >>>>> printString("it"); 
	mov	ax, L_lab5app_2
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	34
	; >>>>> YKSemPost(SSemPtr); 
	push	word [SSemPtr]
	call	YKSemPost
	add	sp, 2
	; >>>>> Line:	36
	; >>>>> YKSemPend(WSemPtr); 
	push	word [WSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	37
	; >>>>> printString("works"); 
	mov	ax, L_lab5app_3
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	38
	; >>>>> YKSemPost(PSemPtr); 
	push	word [PSemPtr]
	call	YKSemPost
	add	sp, 2
L_lab5app_7:
	jmp	L_lab5app_6
L_lab5app_8:
	mov	sp, bp
	pop	bp
	ret
L_lab5app_4:
	push	bp
	mov	bp, sp
	jmp	L_lab5app_5
	ALIGN	2
TaskSpace:
	; >>>>> Line:	43
	; >>>>> { 
	jmp	L_lab5app_10
L_lab5app_11:
	; >>>>> Line:	44
	; >>>>> while (1) 
	jmp	L_lab5app_13
L_lab5app_12:
	; >>>>> Line:	46
	; >>>>> YKSemPend(SSemPtr); 
	push	word [SSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	47
	; >>>>> printChar(' '); 
	mov	al, 32
	push	ax
	call	printChar
	add	sp, 2
	; >>>>> Line:	48
	; >>>>> YKSemPost(WSemPtr); 
	push	word [WSemPtr]
	call	YKSemPost
	add	sp, 2
L_lab5app_13:
	jmp	L_lab5app_12
L_lab5app_14:
	mov	sp, bp
	pop	bp
	ret
L_lab5app_10:
	push	bp
	mov	bp, sp
	jmp	L_lab5app_11
L_lab5app_16:
	DB	"!",'"',0xD,0xA,0
	ALIGN	2
TaskPunc:
	; >>>>> Line:	53
	; >>>>> { 
	jmp	L_lab5app_17
L_lab5app_18:
	; >>>>> Line:	54
	; >>>>> while (1) 
	jmp	L_lab5app_20
L_lab5app_19:
	; >>>>> Line:	56
	; >>>>> YKSemPend(PSe 
	push	word [PSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	57
	; >>>>> printChar('"'); 
	mov	al, 34
	push	ax
	call	printChar
	add	sp, 2
	; >>>>> Line:	58
	; >>>>> YKSemPost(WSemPtr); 
	push	word [WSemPtr]
	call	YKSemPost
	add	sp, 2
	; >>>>> Line:	60
	; >>>>> YKSemPend(PSemPtr); 
	push	word [PSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	61
	; >>>>> printChar(','); 
	mov	al, 44
	push	ax
	call	printChar
	add	sp, 2
	; >>>>> Line:	62
	; >>>>> YKSemPost(SSemPtr); 
	push	word [SSemPtr]
	call	YKSemPost
	add	sp, 2
	; >>>>> Line:	64
	; >>>>> YKSemPend(PSemPtr); 
	push	word [PSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	65
	; >>>>> printString("!\"\r\n"); 
	mov	ax, L_lab5app_16
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	66
	; >>>>> YKSemPost(PSemPtr); 
	push	word [PSemPtr]
	call	YKSemPost
	add	sp, 2
	; >>>>> Line:	68
	; >>>>> YKDelayTask(6); 
	mov	ax, 6
	push	ax
	call	YKDelayTask
	add	sp, 2
L_lab5app_20:
	jmp	L_lab5app_19
L_lab5app_21:
	mov	sp, bp
	pop	bp
	ret
L_lab5app_17:
	push	bp
	mov	bp, sp
	jmp	L_lab5app_18
	ALIGN	2
TaskPrime:
	; >>>>> Line:	73
	; >>>>> { 
	jmp	L_lab5app_23
L_lab5app_24:
	; >>>>> Line:	78
	; >>>>> while (1) 
	mov	word [bp-2], 1001
	; >>>>> Line:	78
	; >>>>> while (1) 
	jmp	L_lab5app_26
L_lab5app_25:
	; >>>>> Line:	80
	; >>>>> YKSemPend(NSemPtr); 
	push	word [NSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	83
	; >>>>> lncnt = 0; 
	mov	word [bp-8], 0
	; >>>>> Line:	84
	; >>>>> endval = curval + 500; 
	mov	ax, word [bp-2]
	add	ax, 500
	mov	word [bp-10], ax
	; >>>>> Line:	85
	; >>>>> for ( ; curval < endval; curval += 2) 
	jmp	L_lab5app_29
L_lab5app_28:
	; >>>>> Line:	87
	; >>>>>  
	mov	word [bp-6], 0
	; >>>>> Line:	88
	; >>>>> for (j = 3; (j*j) < curval; j += 2) 
	mov	word [bp-4], 3
	jmp	L_lab5app_33
L_lab5app_32:
	; >>>>> Line:	90
	; >>>>> if (curval % j == 0) 
	mov	ax, word [bp-2]
	cwd
	idiv	word [bp-4]
	mov	ax, dx
	test	ax, ax
	jne	L_lab5app_36
	; >>>>> Line:	92
	; >>>>> flag = 1; 
	mov	word [bp-6], 1
	; >>>>> Line:	93
	; >>>>> break; 
	jmp	L_lab5app_34
L_lab5app_36:
L_lab5app_35:
	add	word [bp-4], 2
L_lab5app_33:
	mov	ax, word [bp-4]
	imul	word [bp-4]
	mov	dx, word [bp-2]
	cmp	dx, ax
	jg	L_lab5app_32
L_lab5app_34:
	; >>>>> Line:	96
	; >>>>> if (!flag) 
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_lab5app_37
	; >>>>> Line:	98
	; >>>>> printChar(' '); 
	mov	al, 32
	push	ax
	call	printChar
	add	sp, 2
	; >>>>> Line:	99
	; >>>>> printInt(curval); 
	push	word [bp-2]
	call	printInt
	add	sp, 2
	; >>>>> Line:	100
	; >>>>> lncnt++; 
	inc	word [bp-8]
	; >>>>> Line:	101
	; >>>>> if (lncnt > 9) 
	cmp	word [bp-8], 9
	jle	L_lab5app_38
	; >>>>> Line:	103
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	104
	; >>>>> lncnt = 0; 
	mov	word [bp-8], 0
L_lab5app_38:
L_lab5app_37:
L_lab5app_31:
	add	word [bp-2], 2
L_lab5app_29:
	mov	ax, word [bp-10]
	cmp	ax, word [bp-2]
	jg	L_lab5app_28
L_lab5app_30:
	; >>>>> Line:	108
	; >>>>> ntInt( 
	call	printNewLine
L_lab5app_26:
	jmp	L_lab5app_25
L_lab5app_27:
	mov	sp, bp
	pop	bp
	ret
L_lab5app_23:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_lab5app_24
L_lab5app_45:
	DB	"% >>>>>",0xD,0xA,0
L_lab5app_44:
	DB	", CPU usage: ",0
L_lab5app_43:
	DB	"<<<<< Context switches: ",0
L_lab5app_42:
	DB	"P SEM VALUE -> ",0
L_lab5app_41:
	DB	"Determining CPU capacity",0xD,0xA,0
L_lab5app_40:
	DB	"Welcome to the YAK kernel",0xD,0xA,0
	ALIGN	2
TaskStat:
	; >>>>> Line:	113
	; >>>>> { 
	jmp	L_lab5app_46
L_lab5app_47:
	; >>>>> Line:	117
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	118
	; >>>>> printString("Welcome to the YAK kernel\r\n"); 
	mov	ax, L_lab5app_40
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	119
	; >>>>> printString("Determining CPU capacity\r\n"); 
	mov	ax, L_lab5app_41
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	120
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	121
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	122
	; >>>>> YKDelayTask(5); 
	mov	ax, 5
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	123
	; >>>>> max = YKIdleCount / 25; 
	mov	ax, word [YKIdleCount]
	xor	dx, dx
	mov	cx, 25
	div	cx
	mov	word [bp-2], ax
	; >>>>> Line:	124
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	126
	; >>>>> printString("P SEM VALUE -> "); 
	mov	ax, L_lab5app_42
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	127
	; >>>>> printInt(PSemPtr->value); 
	mov	si, word [PSemPtr]
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	128
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	129
	; >>>>> YKNewTask(TaskPrime, (void *) &TaskPRMStk[512], 32); 
	mov	al, 32
	push	ax
	mov	ax, (TaskPRMStk+1024)
	push	ax
	mov	ax, TaskPrime
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	130
	; >>>>> printString("P SEM VALUE -> "); 
	mov	ax, L_lab5app_42
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	131
	; >>>>> printInt( 
	mov	si, word [PSemPtr]
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	132
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	133
	; >>>>> YKNewTask(TaskWord, (void *) &TaskWStk[512], 10); 
	mov	al, 10
	push	ax
	mov	ax, (TaskWStk+1024)
	push	ax
	mov	ax, TaskWord
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	134
	; >>>>> YKNewTask(TaskSpace, (void *) &TaskSStk[512], 11); 
	mov	al, 11
	push	ax
	mov	ax, (TaskSStk+1024)
	push	ax
	mov	ax, TaskSpace
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	135
	; >>>>> YKNewTask(TaskPunc, (void *) &TaskPStk[512], 12); 
	mov	al, 12
	push	ax
	mov	ax, (TaskPStk+1024)
	push	ax
	mov	ax, TaskPunc
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	137
	; >>>>> while (1) 
	jmp	L_lab5app_49
L_lab5app_48:
	; >>>>> Line:	139
	; >>>>> YKDelayTask(20); 
	mov	ax, 20
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	141
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	142
	; >>>>> switchCount = YKCtxSwCount; 
	mov	ax, word [YKCtxSwCount]
	mov	word [bp-4], ax
	; >>>>> Line:	143
	; >>>>> idleCount = YKIdleCount; 
	mov	ax, word [YKIdleCount]
	mov	word [bp-6], ax
	; >>>>> Line:	144
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	146
	; >>>>> printString ("<<<<< Context switches: "); 
	mov	ax, L_lab5app_43
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	147
	; >>>>> printInt((int)switchCount); 
	push	word [bp-4]
	call	printInt
	add	sp, 2
	; >>>>> Line:	148
	; >>>>> printString(", CPU usage: "); 
	mov	ax, L_lab5app_44
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	149
	; >>>>> tmp = (int) (idleCo 
	mov	ax, word [bp-6]
	xor	dx, dx
	div	word [bp-2]
	mov	word [bp-8], ax
	; >>>>> Line:	150
	; >>>>> printInt(100-tmp); 
	mov	ax, 100
	sub	ax, word [bp-8]
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	151
	; >>>>> printString("% >>>>>\r\n"); 
	mov	ax, L_lab5app_45
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	153
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	154
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	155
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	156
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_lab5app_49:
	jmp	L_lab5app_48
L_lab5app_50:
	mov	sp, bp
	pop	bp
	ret
L_lab5app_46:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_lab5app_47
	ALIGN	2
main:
	; >>>>> Line:	161
	; >>>>> { 
	jmp	L_lab5app_52
L_lab5app_53:
	; >>>>> Line:	162
	; >>>>> YKInitialize(); 
	call	YKInitialize
	; >>>>> Line:	165
	; >>>>> PSemPtr = YKSemCreate(1); 
	mov	ax, 1
	push	ax
	call	YKSemCreate
	add	sp, 2
	mov	word [PSemPtr], ax
	; >>>>> Line:	166
	; >>>>> SSemPtr = YKSemCreate(0); 
	xor	ax, ax
	push	ax
	call	YKSemCreate
	add	sp, 2
	mov	word [SSemPtr], ax
	; >>>>> Line:	167
	; >>>>> WSemPtr = YKSemCreate(0); 
	xor	ax, ax
	push	ax
	call	YKSemCreate
	add	sp, 2
	mov	word [WSemPtr], ax
	; >>>>> Line:	168
	; >>>>> NSemPtr = YKSemCreate(0); 
	xor	ax, ax
	push	ax
	call	YKSemCreate
	add	sp, 2
	mov	word [NSemPtr], ax
	; >>>>> Line:	169
	; >>>>> YKNewTask(TaskStat, (void *) &TaskStatStk[512], 30); 
	mov	al, 30
	push	ax
	mov	ax, (TaskStatStk+1024)
	push	ax
	mov	ax, TaskStat
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	171
	; >>>>> YKRun(); 
	call	YKRun
	mov	sp, bp
	pop	bp
	ret
L_lab5app_52:
	push	bp
	mov	bp, sp
	jmp	L_lab5app_53
	ALIGN	2
PSemPtr:
	TIMES	2 db 0
SSemPtr:
	TIMES	2 db 0
WSemPtr:
	TIMES	2 db 0
NSemPtr:
	TIMES	2 db 0
TaskWStk:
	TIMES	1024 db 0
TaskSStk:
	TIMES	1024 db 0
TaskPStk:
	TIMES	1024 db 0
TaskStatStk:
	TIMES	1024 db 0
TaskPRMStk:
	TIMES	1024 db 0
