; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKCtxSwCount:
	DW	0
i:
	DW	0
hasRun:
	DW	0
currentEvent:
	DW	0
queueIndex:
	DW	0
	ALIGN	2
YKInitialize:
	; >>>>> Line:	48
	; >>>>> { 
	jmp	L_yakc_1
L_yakc_2:
	; >>>>> Line:	49
	; >>>>> YKE 
	call	YKEnterMutex
	; >>>>> Line:	50
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	51
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	52
	; >>>>> YKTickNum = 0; 
	mov	word [YKTickNum], 0
	; >>>>> Line:	53
	; >>>>> ISRDepth = 0; 
	mov	word [ISRDepth], 0
	; >>>>> Line:	54
	; >>>>> idxNextAvailSem = 0; 
	mov	word [idxNextAvailSem], 0
	; >>>>> Line:	55
	; >>>>> queueIndex = 0; 
	mov	word [queueIndex], 0
	; >>>>> Line:	56
	; >>>>> YKSave = 0; 
	mov	word [YKSave], 0
	; >>>>> Line:	57
	; >>>>> YKRestore = 0; 
	mov	word [YKRestore], 0
	; >>>>> Line:	58
	; >>>>> YKRdyList = 0; 
	mov	word [YKRdyList], 0
	; >>>>> Line:	59
	; >>>>> YKSuspList = 0; 
	mov	word [YKSuspList], 0
	; >>>>> Line:	60
	; >>>>> YKRunningTask = 0; 
	mov	word [YKRunningTask], 0
	; >>>>> Line:	61
	; >>>>> hasRun = 0; 
	mov	word [hasRun], 0
	; >>>>> Line:	63
	; >>>>> YKAvailTCBList = &(YKTCBArray[0]); 
	mov	word [YKAvailTCBList], YKTCBArray
	; >>>>> Line:	68
	; >>>>> for (i = 0; i < 10; i++){ 
	mov	word [i], 0
	jmp	L_yakc_4
L_yakc_3:
	; >>>>> Line:	69
	; >>>>> YKTCBArray[i].next = &(YKTCBArray[i+1]); 
	mov	ax, word [i]
	inc	ax
	mov	cx, 4
	shl	ax, cl
	add	ax, YKTCBArray
	mov	dx, word [i]
	mov	cx, 4
	shl	dx, cl
	add	dx, YKTCBArray
	mov	si, dx
	add	si, 8
	mov	word [si], ax
L_yakc_6:
	inc	word [i]
L_yakc_4:
	cmp	word [i], 10
	jl	L_yakc_3
L_yakc_5:
	; >>>>> Line:	73
	; >>>>> YKTCBArray[10].next = 0; 
	mov	word [(168+YKTCBArray)], 0
	; >>>>> Line:	74
	; >>>>> YKTCBArray[10].prev = 0; 
	mov	word [(170+YKTCBArray)], 0
	; >>>>> Line:	76
	; >>>>> YKNewTask(YKIdleTask,(void *) &(idleStk[2048]),100); 
	mov	al, 100
	push	ax
	mov	ax, (idleStk+4096)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	mov	sp, bp
	pop	bp
	ret
L_yakc_1:
	push	bp
	mov	bp, sp
	jmp	L_yakc_2
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	84
	; >>>>> void YKIdleTask(){ 
	jmp	L_yakc_8
L_yakc_9:
	; >>>>> Line:	85
	; >>>>> while(1){ 
	jmp	L_yakc_11
L_yakc_10:
	; >>>>> Line:	86
	; >>>>>  
	call	YKEnterMutex
	; >>>>> Line:	87
	; >>>>> YKIdleCount++; 
	inc	word [YKIdleCount]
	; >>>>> Line:	88
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_11:
	jmp	L_yakc_10
L_yakc_12:
	mov	sp, bp
	pop	bp
	ret
L_yakc_8:
	push	bp
	mov	bp, sp
	jmp	L_yakc_9
	ALIGN	2
YKScheduler:
	; >>>>> Line:	96
	; >>>>> void YKScheduler(int isSaved){ 
	jmp	L_yakc_14
L_yakc_15:
	; >>>>> Line:	97
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	98
	; >>>>> if (YKRunningTask != YKRdyList) { 
	mov	ax, word [YKRdyList]
	cmp	ax, word [YKRunningTask]
	je	L_yakc_16
	; >>>>> Line:	99
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	100
	; >>>>> YKDispatcher(isSaved); 
	push	word [bp+4]
	call	YKDispatcher
	add	sp, 2
L_yakc_16:
	; >>>>> Line:	102
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_14:
	push	bp
	mov	bp, sp
	jmp	L_yakc_15
	ALIGN	2
YKNewTask:
	; >>>>> Line:	111
	; >>>>> { 
	jmp	L_yakc_18
L_yakc_19:
	; >>>>> Line:	114
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	115
	; >>>>> newPoint = YKAvailTCBList; 
	mov	ax, word [YKAvailTCBList]
	mov	word [bp-4], ax
	; >>>>> Line:	116
	; >>>>> if(newPoint == 0){ 
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yakc_20
	; >>>>> Line:	117
	; >>>>> return; 
	jmp	L_yakc_21
L_yakc_20:
	; >>>>> Line:	120
	; >>>>> YKAvailTCBList = newPoint->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKAvailTCBList], ax
	; >>>>> Line:	124
	; >>>>> 0) YKR 
	mov	al, byte [bp+8]
	xor	ah, ah
	mov	si, word [bp-4]
	add	si, 4
	mov	word [si], ax
	; >>>>> Line:	125
	; >>>>> newPoint->delay = 0; 
	mov	si, word [bp-4]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	126
	; >>>>> newPoint->state = 1; 
	mov	si, word [bp-4]
	add	si, 2
	mov	word [si], 1
	; >>>>> Line:	127
	; >>>>> newPoint->eventMask = 0; 
	mov	si, word [bp-4]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	128
	; >>>>> newPoint->eventMode = 0; 
	mov	si, word [bp-4]
	add	si, 14
	mov	word [si], 0
	; >>>>> Line:	130
	; >>>>> if (YKRdyList == 0) { 
	mov	ax, word [YKRdyList]
	test	ax, ax
	jne	L_yakc_22
	; >>>>> Line:	132
	; >>>>> YKRdyList = newPoint; 
	mov	ax, word [bp-4]
	mov	word [YKRdyList], ax
	; >>>>> Line:	133
	; >>>>> newPoint->next = 0; 
	mov	si, word [bp-4]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	134
	; >>>>> newPoint->prev = 0; 
	mov	si, word [bp-4]
	add	si, 10
	mov	word [si], 0
	jmp	L_yakc_23
L_yakc_22:
	; >>>>> Line:	137
	; >>>>> comparisonPoint = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-6], ax
	; >>>>> Line:	143
	; >>>>> for (i = 0; i < 10; i ++) { 
	mov	word [i], 0
	jmp	L_yakc_25
L_yakc_24:
	; >>>>> Line:	144
	; >>>>> if (newPoint->priority < comparisonPoint->priority) { 
	mov	si, word [bp-4]
	add	si, 4
	mov	di, word [bp-6]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_yakc_28
	; >>>>> Line:	145
	; >>>>> break; 
	jmp	L_yakc_26
	jmp	L_yakc_29
L_yakc_28:
	; >>>>> Line:	148
	; >>>>> comparisonPoint = comparisonPoint->next; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakc_29:
L_yakc_27:
	inc	word [i]
L_yakc_25:
	cmp	word [i], 10
	jl	L_yakc_24
L_yakc_26:
	; >>>>> Line:	153
	; >>>>> if (comparisonPoint->prev == 0) YKR 
	mov	si, word [bp-6]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_30
	; >>>>> Line:	153
	; >>>>> oid *)stackPoint; 
	mov	ax, word [bp-4]
	mov	word [YKRdyList], ax
	jmp	L_yakc_31
L_yakc_30:
	; >>>>> Line:	156
	; >>>>> else comparisonPoint->prev->next = newPoint; 
	mov	si, word [bp-6]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
L_yakc_31:
	; >>>>> Line:	158
	; >>>>> newPoint->prev = comparisonPoint->prev; 
	mov	si, word [bp-6]
	add	si, 10
	mov	di, word [bp-4]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	159
	; >>>>> newPoint->next = comparisonPoint; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	160
	; >>>>> comparisonPoint->prev = newPoint; 
	mov	si, word [bp-6]
	add	si, 10
	mov	ax, word [bp-4]
	mov	word [si], ax
L_yakc_23:
	; >>>>> Line:	163
	; >>>>> stackPoint = (unsigned *)taskStack; 
	mov	ax, word [bp+6]
	mov	word [bp-2], ax
	; >>>>> Line:	168
	; >>>>> for (i = 0; i < 13; i++) { 
	mov	word [i], 0
	jmp	L_yakc_33
L_yakc_32:
	; >>>>> Line:	169
	; >>>>> if (i == 1){ 
	cmp	word [i], 1
	jne	L_yakc_36
	; >>>>> Line:	170
	; >>>>> stackPoint[0] = 0x0200; 
	mov	si, word [bp-2]
	mov	word [si], 512
	jmp	L_yakc_37
L_yakc_36:
	; >>>>> Line:	172
	; >>>>> else if (i == 3){ 
	cmp	word [i], 3
	jne	L_yakc_38
	; >>>>> Line:	173
	; >>>>> stackPoint[0] = (unsigned)task; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	jmp	L_yakc_39
L_yakc_38:
	; >>>>> Line:	176
	; >>>>> stackPoint[0] = 0; 
	mov	si, word [bp-2]
	mov	word [si], 0
L_yakc_39:
L_yakc_37:
	; >>>>> Line:	178
	; >>>>> stackPoint--; 
	sub	word [bp-2], 2
L_yakc_35:
	inc	word [i]
L_yakc_33:
	cmp	word [i], 13
	jl	L_yakc_32
L_yakc_34:
	; >>>>> Line:	181
	; >>>>> newPoint->stackptr = (void *)stackPoint; 
	mov	si, word [bp-4]
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	182
	; >>>>> if(hasRun == 1) { 
	cmp	word [hasRun], 1
	jne	L_yakc_40
	; >>>>> Line:	183
	; >>>>>  
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_40:
	; >>>>> Line:	185
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_21:
	mov	sp, bp
	pop	bp
	ret
L_yakc_18:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_19
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	193
	; >>>>> { 
	jmp	L_yakc_42
L_yakc_43:
	; >>>>> Line:	195
	; >>>>> if (count == 0) return; 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakc_44
	; >>>>> Line:	195
	; >>>>> if (count == 0) return; 
	jmp	L_yakc_45
L_yakc_44:
	; >>>>> Line:	196
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	197
	; >>>>> delayPoint = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	198
	; >>>>> YKRdyList = delayPoint->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	199
	; >>>>> if (YKRdyList != 0) { 
	mov	ax, word [YKRdyList]
	test	ax, ax
	je	L_yakc_46
	; >>>>> Line:	200
	; >>>>> YKRdyList->prev = 0; 
	mov	si, word [YKRdyList]
	add	si, 10
	mov	word [si], 0
L_yakc_46:
	; >>>>> Line:	203
	; >>>>> delayPoint->state = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	204
	; >>>>> delayPoint->delay = count; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	206
	; >>>>> delayPoint->next = YKSuspList; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [YKSuspList]
	mov	word [si], ax
	; >>>>> Line:	207
	; >>>>> YKSuspList = delayPoint; 
	mov	ax, word [bp-2]
	mov	word [YKSuspList], ax
	; >>>>> Line:	208
	; >>>>> delayPoint->prev = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	209
	; >>>>> if (delayPoint->next != 0) { 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_47
	; >>>>> Line:	210
	; >>>>> delayPoint->next->prev = delayPoint; 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_47:
	; >>>>> Line:	212
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	213
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_45:
	mov	sp, bp
	pop	bp
	ret
L_yakc_42:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_43
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	220
	; >>>>> priority){ 
	jmp	L_yakc_49
L_yakc_50:
	; >>>>> Line:	222
	; >>>>> YKTickNum++; 
	inc	word [YKTickNum]
	; >>>>> Line:	224
	; >>>>> temp = YKSuspList; 
	mov	ax, word [YKSuspList]
	mov	word [bp-2], ax
	; >>>>> Line:	225
	; >>>>> while (temp != 0) { 
	jmp	L_yakc_52
L_yakc_51:
	; >>>>> Line:	226
	; >>>>> temp->delay--; 
	mov	si, word [bp-2]
	add	si, 6
	dec	word [si]
	; >>>>> Line:	227
	; >>>>> if (temp->delay == 0) { 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_54
	; >>>>> Line:	228
	; >>>>> temp->state = 1; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 1
	; >>>>> Line:	229
	; >>>>> taskHold = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	230
	; >>>>> if (temp->prev != 0) { 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_55
	; >>>>> Line:	231
	; >>>>> temp->prev->next = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp-2]
	add	di, 10
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	jmp	L_yakc_56
L_yakc_55:
	; >>>>> Line:	234
	; >>>>> YKSuspList = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKSuspList], ax
L_yakc_56:
	; >>>>> Line:	236
	; >>>>> if (temp->next != 0) { 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_57
	; >>>>> Line:	237
	; >>>>> temp->next->prev = temp->prev; 
	mov	si, word [bp-2]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 8
	mov	di, word [di]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_57:
	; >>>>> Line:	239
	; >>>>> comparisonPoint = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-6], ax
	; >>>>> Line:	247
	; >>>>> for (i = 0; i < 10; i ++) { 
	mov	word [i], 0
	jmp	L_yakc_59
L_yakc_58:
	; >>>>> Line:	248
	; >>>>> if (temp->priority < comparisonPoint->priority){ 
	mov	si, word [bp-2]
	add	si, 4
	mov	di, word [bp-6]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_yakc_62
	; >>>>> Line:	249
	; >>>>> oid) { 
	jmp	L_yakc_60
	jmp	L_yakc_63
L_yakc_62:
	; >>>>> Line:	253
	; >>>>> comparisonPoint = comparisonPoint->next; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakc_63:
L_yakc_61:
	inc	word [i]
L_yakc_59:
	cmp	word [i], 10
	jl	L_yakc_58
L_yakc_60:
	; >>>>> Line:	256
	; >>>>> if (comparisonPoint->prev == 0){ 
	mov	si, word [bp-6]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_64
	; >>>>> Line:	260
	; >>>>> YKRdyList = temp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_65
L_yakc_64:
	; >>>>> Line:	264
	; >>>>> comparisonPoint->prev->next = temp; 
	mov	si, word [bp-6]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_65:
	; >>>>> Line:	268
	; >>>>> temp->prev = comparisonPoint->prev; 
	mov	si, word [bp-6]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	269
	; >>>>> temp->next = comparisonPoint; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	270
	; >>>>> comparisonPoint->prev = temp; 
	mov	si, word [bp-6]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	271
	; >>>>> temp = taskHold; 
	mov	ax, word [bp-4]
	mov	word [bp-2], ax
	jmp	L_yakc_66
L_yakc_54:
	; >>>>> Line:	274
	; >>>>> temp = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_66:
L_yakc_52:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_51
L_yakc_53:
	mov	sp, bp
	pop	bp
	ret
L_yakc_49:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_50
	ALIGN	2
YKRun:
	; >>>>> Line:	279
	; >>>>> void YKRun(void){ 
	jmp	L_yakc_68
L_yakc_69:
	; >>>>> Line:	280
	; >>>>> hasRun = 1; 
	mov	word [hasRun], 1
	; >>>>> Line:	281
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_68:
	push	bp
	mov	bp, sp
	jmp	L_yakc_69
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	285
	; >>>>> void YKEnterISR(void) { 
	jmp	L_yakc_71
L_yakc_72:
	; >>>>> Line:	286
	; >>>>> ISRDepth++; 
	inc	word [ISRDepth]
	mov	sp, bp
	pop	bp
	ret
L_yakc_71:
	push	bp
	mov	bp, sp
	jmp	L_yakc_72
	ALIGN	2
YKExitISR:
	; >>>>> Line:	290
	; >>>>> void YKExitISR(void) { 
	jmp	L_yakc_74
L_yakc_75:
	; >>>>> Line:	291
	; >>>>> ISRDepth--; 
	dec	word [ISRDepth]
	; >>>>> Line:	292
	; >>>>> if ((ISRDepth == 0)) { 
	mov	ax, word [ISRDepth]
	test	ax, ax
	jne	L_yakc_76
	; >>>>> Line:	293
	; >>>>> if (hasRun) { 
	mov	ax, word [hasRun]
	test	ax, ax
	je	L_yakc_77
	; >>>>> Line:	294
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_77:
L_yakc_76:
	mov	sp, bp
	pop	bp
	ret
L_yakc_74:
	push	bp
	mov	bp, sp
	jmp	L_yakc_75
	ALIGN	2
YKSemCreate:
	; >>>>> Line:	310
	; >>>>> YKSEM* YKSemCreate(int initialValue) { 
	jmp	L_yakc_79
L_yakc_80:
	; >>>>> Line:	311
	; >>>>> if (initialValue >= 0) { 
	cmp	word [bp+4], 0
	jl	L_yakc_81
	; >>>>> Line:	313
	; >>>>> idxNextAvailSem++; 
	mov	ax, word [idxNextAvailSem]
	shl	ax, 1
	shl	ax, 1
	add	ax, YKSemaphoreArray
	mov	word [bp-2], ax
	; >>>>> Line:	313
	; >>>>> idxNextAvailSem++; 
	inc	word [idxNextAvailSem]
	; >>>>> Line:	314
	; >>>>> currSem->value = initialValue; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	315
	; >>>>> currSem->waitList = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	316
	; >>>>> return currSem; 
	mov	ax, word [bp-2]
L_yakc_81:
L_yakc_82:
	mov	sp, bp
	pop	bp
	ret
L_yakc_79:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_80
	ALIGN	2
YKSemPend:
	; >>>>> Line:	324
	; >>>>> void YKSemPend(YKSEM* currSem) { 
	jmp	L_yakc_84
L_yakc_85:
	; >>>>> Line:	326
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	327
	; >>>>> if( ( (currSem->value) <= 0) && (hasRun == 1) ) { 
	mov	si, word [bp+4]
	cmp	word [si], 0
	jg	L_yakc_86
	cmp	word [hasRun], 1
	jne	L_yakc_86
	; >>>>> Line:	329
	; >>>>> value = value - 1; 
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	329
	; >>>>> value = value - 1; 
	mov	ax, word [bp-6]
	dec	ax
	mov	word [bp-6], ax
	; >>>>> Line:	330
	; >>>>> nt->prev  
	mov	si, word [bp+4]
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	331
	; >>>>> temp = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	332
	; >>>>> YKRdyList = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	333
	; >>>>> if (YKRdyList != 0) { 
	mov	ax, word [YKRdyList]
	test	ax, ax
	je	L_yakc_87
	; >>>>> Line:	334
	; >>>>> YKRdyList->prev = 0; 
	mov	si, word [YKRdyList]
	add	si, 10
	mov	word [si], 0
L_yakc_87:
	; >>>>> Line:	336
	; >>>>> temp->state = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	337
	; >>>>> comparisonPoint = currSem->waitList; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	338
	; >>>>> if (comparisonPoint == 0) 
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yakc_88
	; >>>>> Line:	340
	; >>>>> currSem->waitList = temp; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	341
	; >>>>> currSem->waitList->next = 0; 
	mov	si, word [bp+4]
	add	si, 2
	mov	si, word [si]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	342
	; >>>>> currSem->waitList->prev = 0; 
	mov	si, word [bp+4]
	add	si, 2
	mov	si, word [si]
	add	si, 10
	mov	word [si], 0
	jmp	L_yakc_89
L_yakc_88:
	; >>>>> Line:	345
	; >>>>> for (i = 0; i < 10; i ++) { 
	mov	word [i], 0
	jmp	L_yakc_91
L_yakc_90:
	; >>>>> Line:	346
	; >>>>> if (temp->priority < comparisonPoint->priority) { 
	mov	si, word [bp-2]
	add	si, 4
	mov	di, word [bp-4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_yakc_94
	; >>>>> Line:	347
	; >>>>> break; 
	jmp	L_yakc_92
	jmp	L_yakc_95
L_yakc_94:
	; >>>>> Line:	350
	; >>>>> comparisonPoint = comparisonPoint->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_95:
L_yakc_93:
	inc	word [i]
L_yakc_91:
	cmp	word [i], 10
	jl	L_yakc_90
L_yakc_92:
	; >>>>> Line:	353
	; >>>>> if (comparisonPoint->prev  
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_96
	; >>>>> Line:	354
	; >>>>> currSem->waitList = temp; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp-2]
	mov	word [si], ax
	jmp	L_yakc_97
L_yakc_96:
	; >>>>> Line:	357
	; >>>>> comparisonPoint->prev->next = temp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_97:
	; >>>>> Line:	359
	; >>>>> temp->prev = comparisonPoint->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	360
	; >>>>> temp->next = comparisonPoint; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	361
	; >>>>> comparisonPoint->prev = temp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_89:
	; >>>>> Line:	363
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	jmp	L_yakc_98
L_yakc_86:
	; >>>>> Line:	367
	; >>>>> value = value - 1; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	mov	word [bp-8], ax
	; >>>>> Line:	367
	; >>>>> value = value - 1; 
	mov	ax, word [bp-8]
	dec	ax
	mov	word [bp-8], ax
	; >>>>> Line:	368
	; >>>>> currSem->value = value; 
	mov	si, word [bp+4]
	mov	ax, word [bp-8]
	mov	word [si], ax
L_yakc_98:
	; >>>>> Line:	370
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_84:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_yakc_85
	ALIGN	2
YKSemPost:
	; >>>>> Line:	377
	; >>>>> void YKSemPost(YKSEM* currSem) { 
	jmp	L_yakc_100
L_yakc_101:
	; >>>>> Line:	379
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	380
	; >>>>> (currSem->value)++; 
	mov	si, word [bp+4]
	inc	word [si]
	; >>>>> Line:	382
	; >>>>> if (currSem->waitList != 0) { 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_102
	; >>>>> Line:	383
	; >>>>> temp = currSem->waitList; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	384
	; >>>>> { 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 2
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	385
	; >>>>> if (currSem->waitList != 0) { 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_103
	; >>>>> Line:	386
	; >>>>> currSem->waitList->prev = 0; 
	mov	si, word [bp+4]
	add	si, 2
	mov	si, word [si]
	add	si, 10
	mov	word [si], 0
L_yakc_103:
	; >>>>> Line:	388
	; >>>>> temp->state = 1; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 1
	; >>>>> Line:	389
	; >>>>> comparisonPoint = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	390
	; >>>>> if (comparisonPoint == 0) 
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yakc_104
	; >>>>> Line:	392
	; >>>>> YKRdyList = temp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	; >>>>> Line:	393
	; >>>>> YKRdyList->next = 0; 
	mov	si, word [YKRdyList]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	394
	; >>>>> YKRdyList->prev = 0; 
	mov	si, word [YKRdyList]
	add	si, 10
	mov	word [si], 0
	jmp	L_yakc_105
L_yakc_104:
	; >>>>> Line:	397
	; >>>>> for (i = 0; i < 10; i ++) { 
	mov	word [i], 0
	jmp	L_yakc_107
L_yakc_106:
	; >>>>> Line:	398
	; >>>>> if (temp->priority < comparisonPoint->priority){ 
	mov	si, word [bp-2]
	add	si, 4
	mov	di, word [bp-4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_yakc_110
	; >>>>> Line:	399
	; >>>>> break; 
	jmp	L_yakc_108
	jmp	L_yakc_111
L_yakc_110:
	; >>>>> Line:	402
	; >>>>> comparisonPoint = comparisonPoint->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_111:
L_yakc_109:
	inc	word [i]
L_yakc_107:
	cmp	word [i], 10
	jl	L_yakc_106
L_yakc_108:
	; >>>>> Line:	405
	; >>>>> if (comparisonPoint->prev == 0){ 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_112
	; >>>>> Line:	406
	; >>>>> YKRdyList = temp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_113
L_yakc_112:
	; >>>>> Line:	409
	; >>>>> curr 
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_113:
	; >>>>> Line:	411
	; >>>>> temp->prev = comparisonPoint->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	412
	; >>>>> temp->next = comparisonPoint; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	413
	; >>>>> comparisonPoint->prev = temp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_105:
L_yakc_102:
	; >>>>> Line:	416
	; >>>>> if (ISRDepth == 0) { YKScheduler(0); } 
	mov	ax, word [ISRDepth]
	test	ax, ax
	jne	L_yakc_114
	; >>>>> Line:	416
	; >>>>> if (ISRDepth == 0) { YKScheduler(0); } 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_114:
	; >>>>> Line:	417
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_100:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_101
	ALIGN	2
YKQCreate:
	; >>>>> Line:	431
	; >>>>> YKQ *YKQCreate(void **start, unsigned size) { 
	jmp	L_yakc_116
L_yakc_117:
	; >>>>> Line:	432
	; >>>>> if (size > 0 ) { 
	mov	ax, word [bp+6]
	test	ax, ax
	je	L_yakc_118
	; >>>>> Line:	434
	; >>>>> queueIndex++; 
	mov	ax, word [queueIndex]
	mov	cx, 12
	imul	cx
	add	ax, YKQArray
	mov	word [bp-2], ax
	; >>>>> Line:	434
	; >>>>> queueIndex++; 
	inc	word [queueIndex]
	; >>>>> Line:	435
	; >>>>> currQueue->head = 0; 
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], 0
	; >>>>> Line:	436
	; >>>>> currQueue->tail = 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	437
	; >>>>> currQueue->items = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	438
	; >>>>> currQueue->base = start; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	439
	; >>>>> currQueue->size = size; 
	mov	si, word [bp-2]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	440
	; >>>>> currQueue->waitList = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	441
	; >>>>> return curr 
	mov	ax, word [bp-2]
L_yakc_118:
L_yakc_119:
	mov	sp, bp
	pop	bp
	ret
L_yakc_116:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_117
	ALIGN	2
YKQPend:
	; >>>>> Line:	449
	; >>>>> void *YKQPend(YKQ *queue) { 
	jmp	L_yakc_121
L_yakc_122:
	; >>>>> Line:	452
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	453
	; >>>>> if ((queue->items == 0) && (hasRun == 1)) { 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_123
	cmp	word [hasRun], 1
	jne	L_yakc_123
	; >>>>> Line:	454
	; >>>>> temp = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	455
	; >>>>> YKRdyList = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	456
	; >>>>> if (YKRdyList != 0) 
	mov	ax, word [YKRdyList]
	test	ax, ax
	je	L_yakc_124
	; >>>>> Line:	457
	; >>>>> YKRdyList->prev = 0; 
	mov	si, word [YKRdyList]
	add	si, 10
	mov	word [si], 0
L_yakc_124:
	; >>>>> Line:	458
	; >>>>> temp->state = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	459
	; >>>>> comparisonPoint = queue->waitList; 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	460
	; >>>>> if (comparisonPoint == 0) 
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yakc_125
	; >>>>> Line:	462
	; >>>>> queue->waitList = temp; 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	463
	; >>>>> queue->waitList->next = 0; 
	mov	si, word [bp+4]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	464
	; >>>>> queue->waitList->prev = 0; 
	mov	si, word [bp+4]
	add	si, 10
	mov	si, word [si]
	add	si, 10
	mov	word [si], 0
	jmp	L_yakc_126
L_yakc_125:
	; >>>>> Line:	468
	; >>>>> for (i = 0; i < 10; i ++) { 
	mov	word [i], 0
	jmp	L_yakc_128
L_yakc_127:
	; >>>>> Line:	469
	; >>>>> if (temp->priority < comparisonPoint->pri 
	mov	si, word [bp-2]
	add	si, 4
	mov	di, word [bp-4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_yakc_131
	; >>>>> Line:	470
	; >>>>> break; 
	jmp	L_yakc_129
	jmp	L_yakc_132
L_yakc_131:
	; >>>>> Line:	472
	; >>>>> comparisonPoint = comparisonPoint->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_132:
L_yakc_130:
	inc	word [i]
L_yakc_128:
	cmp	word [i], 10
	jl	L_yakc_127
L_yakc_129:
	; >>>>> Line:	474
	; >>>>> if (comparisonPoint->prev == 0) 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_133
	; >>>>> Line:	475
	; >>>>> queue->waitList = temp; 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	jmp	L_yakc_134
L_yakc_133:
	; >>>>> Line:	477
	; >>>>> comparisonPoint->prev->next = temp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_134:
	; >>>>> Line:	478
	; >>>>> temp->prev = comparisonPoint->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	479
	; >>>>> temp->next = comparisonPoint; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	480
	; >>>>> comparisonPoint->prev = temp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_126:
	; >>>>> Line:	482
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	483
	; >>>>> (queue->items)--; 
	mov	si, word [bp+4]
	add	si, 2
	dec	word [si]
	; >>>>> Line:	484
	; >>>>> message = queue->base[queue->tail]; 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp+4]
	add	di, 8
	add	si, word [di]
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	485
	; >>>>> if (queue->tail == ((queue->size)-1)) 
	mov	si, word [bp+4]
	add	si, 6
	mov	di, word [bp+4]
	mov	ax, word [di]
	dec	ax
	cmp	ax, word [si]
	jne	L_yakc_135
	; >>>>> Line:	487
	; >>>>> queue->tail = 0; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 0
	jmp	L_yakc_136
L_yakc_135:
	; >>>>> Line:	489
	; >>>>> else if (queue->items == 0) 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_137
	; >>>>> Line:	491
	; >>>>> } 
	jmp	L_yakc_138
L_yakc_137:
	; >>>>> Line:	494
	; >>>>> (queue->tail)++; 
	mov	si, word [bp+4]
	add	si, 6
	inc	word [si]
L_yakc_138:
L_yakc_136:
	; >>>>> Line:	496
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	497
	; >>>>> return message; 
	mov	ax, word [bp-6]
	jmp	L_yakc_139
	jmp	L_yakc_140
L_yakc_123:
	; >>>>> Line:	500
	; >>>>> (queue->items)--; 
	mov	si, word [bp+4]
	add	si, 2
	dec	word [si]
	; >>>>> Line:	501
	; >>>>> message = queue->base[queue->tail]; 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp+4]
	add	di, 8
	add	si, word [di]
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	502
	; >>>>> if (queue->tail == ((queue->size)-1)) 
	mov	si, word [bp+4]
	add	si, 6
	mov	di, word [bp+4]
	mov	ax, word [di]
	dec	ax
	cmp	ax, word [si]
	jne	L_yakc_141
	; >>>>> Line:	504
	; >>>>> queue->tail = 0; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 0
	jmp	L_yakc_142
L_yakc_141:
	; >>>>> Line:	506
	; >>>>> else if (queue->items == 0) 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_143
	; >>>>> Line:	508
	; >>>>> } 
	jmp	L_yakc_144
L_yakc_143:
	; >>>>> Line:	511
	; >>>>> (queue->tail)++; 
	mov	si, word [bp+4]
	add	si, 6
	inc	word [si]
L_yakc_144:
L_yakc_142:
	; >>>>> Line:	513
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	514
	; >>>>> return message; 
	mov	ax, word [bp-6]
L_yakc_140:
L_yakc_139:
	mov	sp, bp
	pop	bp
	ret
L_yakc_121:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_122
	ALIGN	2
YKQPost:
	; >>>>> Line:	522
	; >>>>> int YKQPost(YKQ *queue, void *msg) { 
	jmp	L_yakc_146
L_yakc_147:
	; >>>>> Line:	526
	; >>>>> YKEnterMutex(); 
	mov	word [bp-8], 1000
	; >>>>> Line:	526
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	527
	; >>>>> if (queue->items == queue->size) 
	mov	si, word [bp+4]
	add	si, 2
	mov	di, word [bp+4]
	mov	ax, word [di]
	cmp	ax, word [si]
	jne	L_yakc_148
	; >>>>> Line:	528
	; >>>>> return 0; 
	xor	ax, ax
	jmp	L_yakc_149
L_yakc_148:
	; >>>>> Line:	529
	; >>>>> if (queue->waitList != 0) { 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_150
	; >>>>> Line:	530
	; >>>>> delay = queue->waitList 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	531
	; >>>>> while (delay != 0) 
	jmp	L_yakc_152
L_yakc_151:
	; >>>>> Line:	533
	; >>>>> if (delay->priority < maxPriority) 
	mov	si, word [bp-6]
	add	si, 4
	mov	ax, word [bp-8]
	cmp	ax, word [si]
	jle	L_yakc_154
	; >>>>> Line:	535
	; >>>>> maxPriority = delay->priority; 
	mov	si, word [bp-6]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-8], ax
L_yakc_154:
	; >>>>> Line:	537
	; >>>>> delay = delay->next; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakc_152:
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_yakc_151
L_yakc_153:
	; >>>>> Line:	539
	; >>>>> delay = queue->waitList; 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	540
	; >>>>> while (delay != 0) 
	jmp	L_yakc_156
L_yakc_155:
	; >>>>> Line:	542
	; >>>>> if (delay->priority == maxPriority) 
	mov	si, word [bp-6]
	add	si, 4
	mov	ax, word [bp-8]
	cmp	ax, word [si]
	jne	L_yakc_158
	; >>>>> Line:	544
	; >>>>> temp = delay; 
	mov	ax, word [bp-6]
	mov	word [bp-2], ax
	; >>>>> Line:	545
	; >>>>> break; 
	jmp	L_yakc_157
L_yakc_158:
	; >>>>> Line:	547
	; >>>>> delay = delay->next; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakc_156:
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_yakc_155
L_yakc_157:
	; >>>>> Line:	549
	; >>>>> if (temp->prev == 0) 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_159
	; >>>>> Line:	551
	; >>>>> queue->waitList = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	552
	; >>>>> if (queue->waitList != 0) 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_160
	; >>>>> Line:	554
	; >>>>> queue->waitList->prev = 0; 
	mov	si, word [bp+4]
	add	si, 10
	mov	si, word [si]
	add	si, 10
	mov	word [si], 0
L_yakc_160:
	jmp	L_yakc_161
L_yakc_159:
	; >>>>> Line:	559
	; >>>>> if (temp->next == 0) 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_162
	; >>>>> Line:	561
	; >>>>> temp->prev->next = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	word [si], 0
	jmp	L_yakc_163
L_yakc_162:
	; >>>>> Line:	565
	; >>>>> temp->prev->next = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp-2]
	add	di, 10
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	566
	; >>>>> temp->next->prev = temp->prev; 
	mov	si, word [bp-2]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 8
	mov	di, word [di]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_163:
L_yakc_161:
	; >>>>> Line:	570
	; >>>>> temp->state = 1; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 1
	; >>>>> Line:	571
	; >>>>> comparisonPoint = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	572
	; >>>>> if (comparisonPoint == 0) { 
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yakc_164
	; >>>>> Line:	573
	; >>>>> YKRdyList = temp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	; >>>>> Line:	574
	; >>>>> YKRdyList->next = 0; 
	mov	si, word [YKRdyList]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	575
	; >>>>> YKRdyList->prev = 0; 
	mov	si, word [YKRdyList]
	add	si, 10
	mov	word [si], 0
	jmp	L_yakc_165
L_yakc_164:
	; >>>>> Line:	578
	; >>>>> for (i = 0; i < 10; i ++) { 
	mov	word [i], 0
	jmp	L_yakc_167
L_yakc_166:
	; >>>>> Line:	579
	; >>>>> if (temp->priority < comparisonPoint->priority){ 
	mov	si, word [bp-2]
	add	si, 4
	mov	di, word [bp-4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_yakc_170
	; >>>>> Line:	580
	; >>>>> break; 
	jmp	L_yakc_168
	jmp	L_yakc_171
L_yakc_170:
	; >>>>> Line:	583
	; >>>>> comparisonPoint = comparisonPoint->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_171:
L_yakc_169:
	inc	word [i]
L_yakc_167:
	cmp	word [i], 10
	jl	L_yakc_166
L_yakc_168:
	; >>>>> Line:	586
	; >>>>> if (comparisonPoint->prev == 0){ 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_172
	; >>>>> Line:	587
	; >>>>> YKRdyList = temp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_173
L_yakc_172:
	; >>>>> Line:	590
	; >>>>> comparisonPoint-> 
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_173:
	; >>>>> Line:	593
	; >>>>> temp->prev = comparisonPoint->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	594
	; >>>>> temp->next = comparisonPoint; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	595
	; >>>>> comparisonPoint->prev = temp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_165:
L_yakc_150:
	; >>>>> Line:	598
	; >>>>> if (queue->head == ((queue->size)-1)) 
	mov	si, word [bp+4]
	add	si, 4
	mov	di, word [bp+4]
	mov	ax, word [di]
	dec	ax
	cmp	ax, word [si]
	jne	L_yakc_174
	; >>>>> Line:	600
	; >>>>> queue->head = 0; 
	mov	si, word [bp+4]
	add	si, 4
	mov	word [si], 0
	jmp	L_yakc_175
L_yakc_174:
	; >>>>> Line:	602
	; >>>>> else if (queue->items == 0) {} 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_176
	; >>>>> Line:	602
	; >>>>> else if (queue->items == 0) {} 
	jmp	L_yakc_177
L_yakc_176:
	; >>>>> Line:	605
	; >>>>> (queue->head)++; 
	mov	si, word [bp+4]
	add	si, 4
	inc	word [si]
L_yakc_177:
L_yakc_175:
	; >>>>> Line:	607
	; >>>>> queue->base[queue->head] = msg; 
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp+4]
	add	di, 8
	add	si, word [di]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	608
	; >>>>> (queue->items)++; 
	mov	si, word [bp+4]
	add	si, 2
	inc	word [si]
	; >>>>> Line:	609
	; >>>>> if (ISRDepth == 0) { YKScheduler(0); } 
	mov	ax, word [ISRDepth]
	test	ax, ax
	jne	L_yakc_178
	; >>>>> Line:	609
	; >>>>> if (ISRDepth == 0) { YKScheduler(0); } 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_178:
	; >>>>> Line:	610
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	611
	; >>>>> return 1; 
	mov	ax, 1
L_yakc_149:
	mov	sp, bp
	pop	bp
	ret
L_yakc_146:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_yakc_147
	ALIGN	2
YKEventCreate:
	; >>>>> Line:	632
	; >>>>> YKEVENT *YKEventCreate(unsigned initialValue) { 
	jmp	L_yakc_180
L_yakc_181:
	; >>>>> Line:	634
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	635
	; >>>>> currEvent = &YKEventAr 
	mov	ax, word [currentEvent]
	shl	ax, 1
	shl	ax, 1
	add	ax, YKEventArray
	mov	word [bp-2], ax
	; >>>>> Line:	636
	; >>>>> currEvent->eventGroup = initialValue; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	637
	; >>>>> currEvent->waitList = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	638
	; >>>>> currentEvent++; 
	inc	word [currentEvent]
	; >>>>> Line:	639
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	640
	; >>>>> return currEvent; 
	mov	ax, word [bp-2]
L_yakc_182:
	mov	sp, bp
	pop	bp
	ret
L_yakc_180:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_181
	ALIGN	2
YKEventPend:
	; >>>>> Line:	656
	; >>>>> unsigned YKEventPend(YKEVENT *event, unsigned eventMask, int waitMode) { 
	jmp	L_yakc_184
L_yakc_185:
	; >>>>> Line:	659
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	660
	; >>>>> if (eventMask == 0) 
	mov	ax, word [bp+6]
	test	ax, ax
	jne	L_yakc_186
	; >>>>> Line:	662
	; >>>>> newEventGroup = event->eventGroup; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	mov	word [bp-8], ax
	; >>>>> Line:	663
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	664
	; >>>>> return newEventGroup; 
	mov	ax, word [bp-8]
	jmp	L_yakc_187
L_yakc_186:
	; >>>>> Line:	666
	; >>>>> if ((waitMode == 0) && (((event->eventGroup) & (eventMask)) != 0)) 
	mov	ax, word [bp+8]
	test	ax, ax
	jne	L_yakc_188
	mov	si, word [bp+4]
	mov	ax, word [si]
	and	ax, word [bp+6]
	je	L_yakc_188
	; >>>>> Line:	668
	; >>>>> newEventGroup = event->eventGroup; 
	mov	ax, word [si]
	mov	word [bp-8], ax
	; >>>>> Line:	669
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	670
	; >>>>> return newEventGroup; 
	mov	ax, word [bp-8]
	jmp	L_yakc_187
L_yakc_188:
	; >>>>> Line:	672
	; >>>>> if ((waitMode == 1) && (((event->eventGroup) & (eventMask)) == eventMask)) 
	cmp	word [bp+8], 1
	jne	L_yakc_189
	mov	si, word [bp+4]
	mov	ax, word [si]
	and	ax, word [bp+6]
	mov	dx, word [bp+6]
	cmp	dx, ax
	jne	L_yakc_189
	; >>>>> Line:	674
	; >>>>> newEventGroup = event->eventGroup; 
	mov	ax, word [si]
	mov	word [bp-8], ax
	; >>>>> Line:	675
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	676
	; >>>>> return newEventGroup; 
	mov	ax, word [bp-8]
	jmp	L_yakc_187
L_yakc_189:
	; >>>>> Line:	678
	; >>>>> temp = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	679
	; >>>>> YKRdyList = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	680
	; >>>>> if (YKRdyList != 0) 
	mov	ax, word [YKRdyList]
	test	ax, ax
	je	L_yakc_190
	; >>>>> Line:	682
	; >>>>> YKRdyList->prev = 0; 
	mov	si, word [YKRdyList]
	add	si, 10
	mov	word [si], 0
L_yakc_190:
	; >>>>> Line:	684
	; >>>>> temp->state = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	686
	; >>>>> temp->eventMask = eventMask; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	687
	; >>>>> temp->eventMode = waitMode; 
	mov	si, word [bp-2]
	add	si, 14
	mov	ax, word [bp+8]
	mov	word [si], ax
	; >>>>> Line:	690
	; >>>>> temp->next = event->waitList; 
	mov	si, word [bp+4]
	add	si, 2
	mov	di, word [bp-2]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	691
	; >>>>> event->waitList = temp; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	692
	; >>>>> temp->prev = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	693
	; >>>>> if (temp->next != 0) { 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_191
	; >>>>> Line:	694
	; >>>>> temp->next->prev = temp; 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_191:
	; >>>>> Line:	696
	; >>>>> ent->event 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	697
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	698
	; >>>>> return event->eventGroup; 
	mov	si, word [bp+4]
	mov	ax, word [si]
L_yakc_187:
	mov	sp, bp
	pop	bp
	ret
L_yakc_184:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_yakc_185
	ALIGN	2
YKEventSet:
	; >>>>> Line:	711
	; >>>>> void YKEventSet(YKEVENT *event, unsigned eventMask) { 
	jmp	L_yakc_193
L_yakc_194:
	; >>>>> Line:	715
	; >>>>> YKEnterMutex(); 
	mov	word [bp-10], 0
	; >>>>> Line:	715
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	717
	; >>>>> newEventGroup = (event->eventGroup | eventMask); 
	mov	si, word [bp+4]
	mov	ax, word [si]
	or	ax, word [bp+6]
	mov	word [bp-8], ax
	; >>>>> Line:	718
	; >>>>> event->eventGroup = newEventGroup; 
	mov	si, word [bp+4]
	mov	ax, word [bp-8]
	mov	word [si], ax
	; >>>>> Line:	719
	; >>>>> temp = event->waitList; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	721
	; >>>>> while (temp != 0) { 
	jmp	L_yakc_196
L_yakc_195:
	; >>>>> Line:	723
	; >>>>> if (((temp->eventMode == 0) && (((event->eventGroup) & (temp->eventMask)) != 0)) || ((temp->eventMode == 1) && (((temp->eventMask) & (event->event 
	mov	si, word [bp-2]
	add	si, 14
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_200
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	mov	si, word [bp+4]
	and	ax, word [si]
	jne	L_yakc_199
L_yakc_200:
	mov	si, word [bp-2]
	add	si, 14
	cmp	word [si], 1
	jne	L_yakc_198
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	mov	si, word [bp+4]
	and	ax, word [si]
	mov	si, word [bp-2]
	add	si, 12
	mov	dx, word [si]
	cmp	dx, ax
	jne	L_yakc_198
L_yakc_199:
	; >>>>> Line:	724
	; >>>>> temp->state = 1; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 1
	; >>>>> Line:	725
	; >>>>> taskHold = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	726
	; >>>>> if (temp->prev != 0) { 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_201
	; >>>>> Line:	727
	; >>>>> temp->prev->next = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp-2]
	add	di, 10
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	jmp	L_yakc_202
L_yakc_201:
	; >>>>> Line:	730
	; >>>>> event->waitList = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 2
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_202:
	; >>>>> Line:	732
	; >>>>> if (temp->next != 0) { 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_203
	; >>>>> Line:	733
	; >>>>> temp->next->prev = temp->prev; 
	mov	si, word [bp-2]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 8
	mov	di, word [di]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_203:
	; >>>>> Line:	735
	; >>>>> comparisonPoint = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-6], ax
	; >>>>> Line:	744
	; >>>>> while (comparisonPoint->priority < temp->priority) 
	jmp	L_yakc_205
L_yakc_204:
	; >>>>> Line:	746
	; >>>>> comparisonPoint = comparisonPoint->next; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakc_205:
	mov	si, word [bp-6]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_204
L_yakc_206:
	; >>>>> Line:	748
	; >>>>> if (comparisonPoint->prev == 0){ 
	mov	si, word [bp-6]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_207
	; >>>>> Line:	752
	; >>>>> YKRdyList = temp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_208
L_yakc_207:
	; >>>>> Line:	756
	; >>>>>  
	mov	si, word [bp-6]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_208:
	; >>>>> Line:	760
	; >>>>> temp->prev = comparisonPoint->prev; 
	mov	si, word [bp-6]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	761
	; >>>>> temp->next = comparisonPoint; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	762
	; >>>>> comparisonPoint->prev = temp; 
	mov	si, word [bp-6]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	763
	; >>>>> temp = taskHold; 
	mov	ax, word [bp-4]
	mov	word [bp-2], ax
	; >>>>> Line:	764
	; >>>>> taskReady = 1; 
	mov	word [bp-10], 1
	jmp	L_yakc_209
L_yakc_198:
	; >>>>> Line:	767
	; >>>>> temp = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_209:
L_yakc_196:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_195
L_yakc_197:
	; >>>>> Line:	770
	; >>>>> if ((taskReady == 1) && (ISRDepth == 0)) 
	cmp	word [bp-10], 1
	jne	L_yakc_210
	mov	ax, word [ISRDepth]
	test	ax, ax
	jne	L_yakc_210
	; >>>>> Line:	772
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_210:
	; >>>>> Line:	774
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_193:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_yakc_194
	ALIGN	2
YKEventReset:
	; >>>>> Line:	784
	; >>>>> void YKEventReset(YKEVENT *event, unsigned eventMask) { 
	jmp	L_yakc_212
L_yakc_213:
	; >>>>> Line:	786
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	788
	; >>>>> newEventGroup = ((event->eventGroup) & ~(eventMask)); 
	mov	ax, word [bp+6]
	not	ax
	mov	si, word [bp+4]
	and	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	789
	; >>>>> event->eventGroup = newE 
	mov	si, word [bp+4]
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	790
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_212:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_213
L_yakc_220:
	DB	"value: 0x",0
L_yakc_219:
	DB	"Tasks in the Delay List:",0
L_yakc_218:
	DB	" / Delay Count: 0x",0
L_yakc_217:
	DB	" / Stack Pointer: 0x",0
L_yakc_216:
	DB	"Priority: 0x",0
L_yakc_215:
	DB	"Tasks in the Ready List:",0
	ALIGN	2
printLists:
	; >>>>> Line:	797
	; >>>>> void printLists(void){ 
	jmp	L_yakc_221
L_yakc_222:
	; >>>>> Line:	799
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	800
	; >>>>> printString("Tasks in the Ready List:"); 
	mov	ax, L_yakc_215
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	801
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	802
	; >>>>> tempPoint = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	803
	; >>>>> while(tempPoint != 0){ 
	jmp	L_yakc_224
L_yakc_223:
	; >>>>> Line:	804
	; >>>>> printString("Priority: 0x"); 
	mov	ax, L_yakc_216
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	805
	; >>>>> printByte(tempPoint->priority); 
	mov	si, word [bp-2]
	add	si, 4
	push	word [si]
	call	printByte
	add	sp, 2
	; >>>>> Line:	806
	; >>>>> printString(" / Stack Pointer: 0x"); 
	mov	ax, L_yakc_217
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	807
	; >>>>> printWord((int)tempPoint->stackptr); 
	mov	si, word [bp-2]
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	808
	; >>>>> printString(" / Delay Count: 0x"); 
	mov	ax, L_yakc_218
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	809
	; >>>>> printByte(tempPoint->delay); 
	mov	si, word [bp-2]
	add	si, 6
	push	word [si]
	call	printByte
	add	sp, 2
	; >>>>> Line:	810
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	811
	; >>>>> tempPoint = tempPoint->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_224:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_223
L_yakc_225:
	; >>>>> Line:	813
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	814
	; >>>>> printString("Tasks i 
	mov	ax, L_yakc_219
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	815
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	816
	; >>>>> tempPoint = YKSuspList; 
	mov	ax, word [YKSuspList]
	mov	word [bp-2], ax
	; >>>>> Line:	817
	; >>>>> while(tempPoint != 0){ 
	jmp	L_yakc_227
L_yakc_226:
	; >>>>> Line:	818
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	819
	; >>>>> printString("Priority: 0x"); 
	mov	ax, L_yakc_216
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	820
	; >>>>> printByte(tempPoint->priority); 
	mov	si, word [bp-2]
	add	si, 4
	push	word [si]
	call	printByte
	add	sp, 2
	; >>>>> Line:	821
	; >>>>> printString(" / Stack Pointer: 0x"); 
	mov	ax, L_yakc_217
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	822
	; >>>>> printWord((int)tempPoint->stackptr); 
	mov	si, word [bp-2]
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	823
	; >>>>> printString(" / Delay Count: 0x"); 
	mov	ax, L_yakc_218
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	824
	; >>>>> printByte(tempPoint->delay); 
	mov	si, word [bp-2]
	add	si, 6
	push	word [si]
	call	printByte
	add	sp, 2
	; >>>>> Line:	825
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	826
	; >>>>> tempPoint = tempPoint->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_227:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_226
L_yakc_228:
	; >>>>> Line:	828
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	829
	; >>>>> printString("Tasks in the Delay List:"); 
	mov	ax, L_yakc_219
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	830
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	831
	; >>>>> temp = &(YKSemaphoreArray[0]); 
	mov	word [temp], YKSemaphoreArray
	; >>>>> Line:	832
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	833
	; >>>>> printString("value 
	mov	ax, L_yakc_220
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	834
	; >>>>> printInt(temp->value); 
	mov	si, word [temp]
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	835
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	836
	; >>>>> tempPoint = temp->waitList; 
	mov	si, word [temp]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	837
	; >>>>> while(tempPoint != 0){ 
	jmp	L_yakc_230
L_yakc_229:
	; >>>>> Line:	838
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	839
	; >>>>> printString("Priority: 0x"); 
	mov	ax, L_yakc_216
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	840
	; >>>>> printByte(tempPoint->priority); 
	mov	si, word [bp-2]
	add	si, 4
	push	word [si]
	call	printByte
	add	sp, 2
	; >>>>> Line:	841
	; >>>>> printString(" / Stack Pointer: 0x"); 
	mov	ax, L_yakc_217
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	842
	; >>>>> printWord((int)tempPoint->stackptr); 
	mov	si, word [bp-2]
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	843
	; >>>>> printString(" / Delay Count: 0x"); 
	mov	ax, L_yakc_218
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	844
	; >>>>> printByte(tempPoint->delay); 
	mov	si, word [bp-2]
	add	si, 6
	push	word [si]
	call	printByte
	add	sp, 2
	; >>>>> Line:	845
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	846
	; >>>>> tempPoint = tempPoint->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_230:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_229
L_yakc_231:
	mov	sp, bp
	pop	bp
	ret
L_yakc_221:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_222
	ALIGN	2
YKIdleCount:
	TIMES	2 db 0
YKTickNum:
	TIMES	2 db 0
ISRDepth:
	TIMES	2 db 0
YKSave:
	TIMES	2 db 0
YKRestore:
	TIMES	2 db 0
idleStk:
	TIMES	4096 db 0
idxNextAvailSem:
	TIMES	2 db 0
YKRdyList:
	TIMES	2 db 0
temp:
	TIMES	2 db 0
YKAvailTCBList:
	TIMES	2 db 0
YKSuspList:
	TIMES	2 db 0
YKRunningTask:
	TIMES	2 db 0
YKTCBArray:
	TIMES	176 db 0
YKSemaphoreArray:
	TIMES	24 db 0
YKQArray:
	TIMES	24 db 0
YKEventArray:
	TIMES	8 db 0
