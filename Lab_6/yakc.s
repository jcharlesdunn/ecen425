; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKCtxSwCount:
	DW	0
i:
	DW	0
hasRun:
	DW	0
	ALIGN	2
YKInitialize:
	; >>>>> Line:	40
	; >>>>> { 
	jmp	L_yakc_1
L_yakc_2:
	; >>>>> Line:	41
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	42
	; >>>>> YKIMRInit(0x00); 
	xor	ax, ax
	push	ax
	call	YKIMRInit
	add	sp, 2
	; >>>>> Line:	43
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	45
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	46
	; >>>>> YKTickNum = 0; 
	mov	word [YKTickNum], 0
	; >>>>> Line:	47
	; >>>>> ISRDepth = 0; 
	mov	word [ISRDepth], 0
	; >>>>> Line:	48
	; >>>>> YKSave = 0; 
	mov	word [YKSave], 0
	; >>>>> Line:	49
	; >>>>> YKRestore = 0; 
	mov	word [YKRestore], 0
	; >>>>> Line:	51
	; >>>>> YKRdyList = 0; 
	mov	word [YKRdyList], 0
	; >>>>> Line:	52
	; >>>>> YKSuspList = 0; 
	mov	word [YKSuspList], 0
	; >>>>> Line:	53
	; >>>>> YKRunningTask = 0; 
	mov	word [YKRunningTask], 0
	; >>>>> Line:	54
	; >>>>> hasRun = 0; 
	mov	word [hasRun], 0
	; >>>>> Line:	55
	; >>>>> YKAvaiSems = 4; 
	mov	word [YKAvaiSems], 4
	; >>>>> Line:	58
	; >>>>> idxNextAvailQ = 0; 
	mov	word [idxNextAvailQ], 0
	; >>>>> Line:	60
	; >>>>> YKAvailTCBList = &(YKTCBArray[0]); 
	mov	word [YKAvailTCBList], YKTCBArray
	; >>>>> Line:	62
	; >>>>> for (i = 0; i < 6; i++){ 
	mov	word [i], 0
	jmp	L_yakc_4
L_yakc_3:
	; >>>>> Line:	63
	; >>>>> YKTCBArray[i].next = &(YKTCBArray[i+1]); 
	mov	ax, word [i]
	inc	ax
	mov	cx, 4
	shl	ax, cl
	add	ax, YKTCBArray
	mov	dx, word [i]
	mov	cx, 4
	shl	dx, cl
	add	dx, YKTCBArray
	mov	si, dx
	add	si, 12
	mov	word [si], ax
L_yakc_6:
	inc	word [i]
L_yakc_4:
	cmp	word [i], 6
	jl	L_yakc_3
L_yakc_5:
	; >>>>> Line:	65
	; >>>>> YKTCBArray[6].next = 0; 
	mov	word [(108+YKTCBArray)], 0
	; >>>>> Line:	66
	; >>>>> YKTCBArray[6].prev = 0; 
	mov	word [(110+YKTCBArray)], 0
	; >>>>> Line:	68
	; >>>>> YKNewTask(YKIdleTask,(void *) &(idleSt 
	mov	al, 100
	push	ax
	mov	ax, (idleStk+4096)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	69
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_1:
	push	bp
	mov	bp, sp
	jmp	L_yakc_2
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	73
	; >>>>> void YKIdleTask(){ 
	jmp	L_yakc_8
L_yakc_9:
	; >>>>> Line:	74
	; >>>>> while(1){ 
	jmp	L_yakc_11
L_yakc_10:
	; >>>>> Line:	76
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	77
	; >>>>> YKIdleCount++; 
	inc	word [YKIdleCount]
	; >>>>> Line:	78
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_11:
	jmp	L_yakc_10
L_yakc_12:
	mov	sp, bp
	pop	bp
	ret
L_yakc_8:
	push	bp
	mov	bp, sp
	jmp	L_yakc_9
	ALIGN	2
YKScheduler:
	; >>>>> Line:	82
	; >>>>> void YKScheduler(int isSaved){ 
	jmp	L_yakc_14
L_yakc_15:
	; >>>>> Line:	83
	; >>>>> if (YKRunningTask != YKRdyList){ 
	mov	ax, word [YKRdyList]
	cmp	ax, word [YKRunningTask]
	je	L_yakc_16
	; >>>>> Line:	84
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	85
	; >>>>> YKDispatcher(isSaved); 
	push	word [bp+4]
	call	YKDispatcher
	add	sp, 2
L_yakc_16:
	mov	sp, bp
	pop	bp
	ret
L_yakc_14:
	push	bp
	mov	bp, sp
	jmp	L_yakc_15
	ALIGN	2
YKNewTask:
	; >>>>> Line:	93
	; >>>>> { 
	jmp	L_yakc_18
L_yakc_19:
	; >>>>> Line:	98
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	100
	; >>>>> newPoint = YKAvailTCBList; 
	mov	ax, word [YKAvailTCBList]
	mov	word [bp-4], ax
	; >>>>> Line:	101
	; >>>>> if(newPoint == 0){ 
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yakc_20
	; >>>>> Line:	102
	; >>>>> return; 
	jmp	L_yakc_21
L_yakc_20:
	; >>>>> Line:	105
	; >>>>>  
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [si]
	mov	word [YKAvailTCBList], ax
	; >>>>> Line:	108
	; >>>>> newPoint->priority = priority; 
	mov	al, byte [bp+8]
	xor	ah, ah
	mov	si, word [bp-4]
	add	si, 4
	mov	word [si], ax
	; >>>>> Line:	109
	; >>>>> newPoint->delay = 0; 
	mov	si, word [bp-4]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	110
	; >>>>> newPoint->state = 1; 
	mov	si, word [bp-4]
	add	si, 2
	mov	word [si], 1
	; >>>>> Line:	112
	; >>>>> if (YKRdyList == 0) 
	mov	ax, word [YKRdyList]
	test	ax, ax
	jne	L_yakc_22
	; >>>>> Line:	114
	; >>>>> YKRdyList = newPoint; 
	mov	ax, word [bp-4]
	mov	word [YKRdyList], ax
	; >>>>> Line:	115
	; >>>>> newPoint->next = 0; 
	mov	si, word [bp-4]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	116
	; >>>>> newPoint->prev = 0; 
	mov	si, word [bp-4]
	add	si, 14
	mov	word [si], 0
	jmp	L_yakc_23
L_yakc_22:
	; >>>>> Line:	120
	; >>>>> comparisonPoint = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-6], ax
	; >>>>> Line:	121
	; >>>>> for (i = 0; i < 6; i ++) 
	mov	word [i], 0
	jmp	L_yakc_25
L_yakc_24:
	; >>>>> Line:	123
	; >>>>> if (newPoint->priority < comparisonPoint->priority){ 
	mov	si, word [bp-4]
	add	si, 4
	mov	di, word [bp-6]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_yakc_28
	; >>>>> Line:	124
	; >>>>> break; 
	jmp	L_yakc_26
	jmp	L_yakc_29
L_yakc_28:
	; >>>>> Line:	127
	; >>>>> comparisonPoint = comparisonPoint->next; 
	mov	si, word [bp-6]
	add	si, 12
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakc_29:
L_yakc_27:
	inc	word [i]
L_yakc_25:
	cmp	word [i], 6
	jl	L_yakc_24
L_yakc_26:
	; >>>>> Line:	130
	; >>>>> if (comparisonPoint->prev == 0){ 
	mov	si, word [bp-6]
	add	si, 14
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_30
	; >>>>> Line:	131
	; >>>>> kPoint; 
	mov	ax, word [bp-4]
	mov	word [YKRdyList], ax
	jmp	L_yakc_31
L_yakc_30:
	; >>>>> Line:	134
	; >>>>> comparisonPoint->prev->next = newPoint; 
	mov	si, word [bp-6]
	add	si, 14
	mov	si, word [si]
	add	si, 12
	mov	ax, word [bp-4]
	mov	word [si], ax
L_yakc_31:
	; >>>>> Line:	137
	; >>>>> newPoint->prev = comparisonPoint->prev; 
	mov	si, word [bp-6]
	add	si, 14
	mov	di, word [bp-4]
	add	di, 14
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	138
	; >>>>> newPoint->next = comparisonPoint; 
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	139
	; >>>>> comparisonPoint->prev = newPoint; 
	mov	si, word [bp-6]
	add	si, 14
	mov	ax, word [bp-4]
	mov	word [si], ax
L_yakc_23:
	; >>>>> Line:	142
	; >>>>> stackPoint = (unsigned *)taskStack; 
	mov	ax, word [bp+6]
	mov	word [bp-2], ax
	; >>>>> Line:	145
	; >>>>> for (i = 0; i < 13; i++) 
	mov	word [i], 0
	jmp	L_yakc_33
L_yakc_32:
	; >>>>> Line:	147
	; >>>>> if (i == 1){ 
	cmp	word [i], 1
	jne	L_yakc_36
	; >>>>> Line:	148
	; >>>>> stackPoint[0] = 0x0200; 
	mov	si, word [bp-2]
	mov	word [si], 512
	jmp	L_yakc_37
L_yakc_36:
	; >>>>> Line:	150
	; >>>>> else if (i == 3){ 
	cmp	word [i], 3
	jne	L_yakc_38
	; >>>>> Line:	151
	; >>>>> stackPoint[0] = (unsigned)task; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	jmp	L_yakc_39
L_yakc_38:
	; >>>>> Line:	154
	; >>>>> stackPoint[0] = 0; 
	mov	si, word [bp-2]
	mov	word [si], 0
L_yakc_39:
L_yakc_37:
	; >>>>> Line:	156
	; >>>>> stackPoint--; 
	sub	word [bp-2], 2
L_yakc_35:
	inc	word [i]
L_yakc_33:
	cmp	word [i], 13
	jl	L_yakc_32
L_yakc_34:
	; >>>>> Line:	159
	; >>>>> newPoint->stackptr = (void *)stackPoint; 
	mov	si, word [bp-4]
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	161
	; >>>>> dul 
	cmp	word [hasRun], 1
	jne	L_yakc_40
	; >>>>> Line:	162
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_40:
	; >>>>> Line:	164
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_21:
	mov	sp, bp
	pop	bp
	ret
L_yakc_18:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_19
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	169
	; >>>>> { 
	jmp	L_yakc_42
L_yakc_43:
	; >>>>> Line:	171
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	172
	; >>>>> if (count == 0){ 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakc_44
	; >>>>> Line:	173
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	174
	; >>>>> return; 
	jmp	L_yakc_45
L_yakc_44:
	; >>>>> Line:	177
	; >>>>> delayPoint = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	178
	; >>>>> YKRdyList = delayPoint->next; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	179
	; >>>>> if (YKRdyList != 0) 
	mov	ax, word [YKRdyList]
	test	ax, ax
	je	L_yakc_46
	; >>>>> Line:	181
	; >>>>> YKRdyList->prev = 0; 
	mov	si, word [YKRdyList]
	add	si, 14
	mov	word [si], 0
L_yakc_46:
	; >>>>> Line:	183
	; >>>>> delayPoint->state = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	184
	; >>>>> delayPoint->delay = count; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	185
	; >>>>> delayPoint->next = YKSuspList; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [YKSuspList]
	mov	word [si], ax
	; >>>>> Line:	186
	; >>>>> YKSuspList = delayPoint; 
	mov	ax, word [bp-2]
	mov	word [YKSuspList], ax
	; >>>>> Line:	187
	; >>>>> delayPoint->prev = 0; 
	mov	si, word [bp-2]
	add	si, 14
	mov	word [si], 0
	; >>>>> Line:	188
	; >>>>> if (delayPoint->next != 0) 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_47
	; >>>>> Line:	190
	; >>>>> delayPoint->next->prev = delayPoint; 
	mov	si, word [bp-2]
	add	si, 12
	mov	si, word [si]
	add	si, 14
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_47:
	; >>>>> Line:	192
	; >>>>> ; i ++) 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	193
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_45:
	mov	sp, bp
	pop	bp
	ret
L_yakc_42:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_43
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	197
	; >>>>> { 
	jmp	L_yakc_49
L_yakc_50:
	; >>>>> Line:	209
	; >>>>> YKTickNum++; 
	inc	word [YKTickNum]
	; >>>>> Line:	210
	; >>>>> temp = YKSuspList; 
	mov	ax, word [YKSuspList]
	mov	word [bp-2], ax
	; >>>>> Line:	211
	; >>>>> while (temp != 0) 
	jmp	L_yakc_52
L_yakc_51:
	; >>>>> Line:	213
	; >>>>> temp->delay--; 
	mov	si, word [bp-2]
	add	si, 6
	dec	word [si]
	; >>>>> Line:	214
	; >>>>> if (temp->delay == 0) 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_54
	; >>>>> Line:	216
	; >>>>> temp->state = 1; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 1
	; >>>>> Line:	217
	; >>>>> taskHold = temp->next; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	218
	; >>>>> if (temp->prev != 0) 
	mov	si, word [bp-2]
	add	si, 14
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_55
	; >>>>> Line:	220
	; >>>>> temp->prev->next = temp->next; 
	mov	si, word [bp-2]
	add	si, 12
	mov	di, word [bp-2]
	add	di, 14
	mov	di, word [di]
	add	di, 12
	mov	ax, word [si]
	mov	word [di], ax
	jmp	L_yakc_56
L_yakc_55:
	; >>>>> Line:	223
	; >>>>> YKSuspList = temp->next; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	mov	word [YKSuspList], ax
L_yakc_56:
	; >>>>> Line:	225
	; >>>>> if (temp->next != 0) 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_57
	; >>>>> Line:	227
	; >>>>> temp->next->prev = temp->prev; 
	mov	si, word [bp-2]
	add	si, 14
	mov	di, word [bp-2]
	add	di, 12
	mov	di, word [di]
	add	di, 14
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_57:
	; >>>>> Line:	229
	; >>>>> comparisonPoint = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-6], ax
	; >>>>> Line:	231
	; >>>>> for (i = 0; i < 6; i ++) 
	mov	word [i], 0
	jmp	L_yakc_59
L_yakc_58:
	; >>>>> Line:	233
	; >>>>> if 
	mov	si, word [bp-2]
	add	si, 4
	mov	di, word [bp-6]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_yakc_62
	; >>>>> Line:	234
	; >>>>> break; 
	jmp	L_yakc_60
	jmp	L_yakc_63
L_yakc_62:
	; >>>>> Line:	237
	; >>>>> comparisonPoint = comparisonPoint->next; 
	mov	si, word [bp-6]
	add	si, 12
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakc_63:
L_yakc_61:
	inc	word [i]
L_yakc_59:
	cmp	word [i], 6
	jl	L_yakc_58
L_yakc_60:
	; >>>>> Line:	240
	; >>>>> if (comparisonPoint->prev == 0){ 
	mov	si, word [bp-6]
	add	si, 14
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_64
	; >>>>> Line:	241
	; >>>>> YKRdyList = temp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_65
L_yakc_64:
	; >>>>> Line:	244
	; >>>>> comparisonPoint->prev->next = temp; 
	mov	si, word [bp-6]
	add	si, 14
	mov	si, word [si]
	add	si, 12
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_65:
	; >>>>> Line:	247
	; >>>>> temp->prev = comparisonPoint->prev; 
	mov	si, word [bp-6]
	add	si, 14
	mov	di, word [bp-2]
	add	di, 14
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	248
	; >>>>> temp->next = comparisonPoint; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	249
	; >>>>> comparisonPoint->prev = temp; 
	mov	si, word [bp-6]
	add	si, 14
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	250
	; >>>>> temp = taskHold; 
	mov	ax, word [bp-4]
	mov	word [bp-2], ax
	jmp	L_yakc_66
L_yakc_54:
	; >>>>> Line:	253
	; >>>>> temp = temp->next; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_66:
L_yakc_52:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_51
L_yakc_53:
	mov	sp, bp
	pop	bp
	ret
L_yakc_49:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_50
	ALIGN	2
YKRun:
	; >>>>> Line:	258
	; >>>>> void YKRun(void){ 
	jmp	L_yakc_68
L_yakc_69:
	; >>>>> Line:	259
	; >>>>> hasRun = 1; 
	mov	word [hasRun], 1
	; >>>>> Line:	260
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_68:
	push	bp
	mov	bp, sp
	jmp	L_yakc_69
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	264
	; >>>>> { 
	jmp	L_yakc_71
L_yakc_72:
	; >>>>> Line:	265
	; >>>>> ISRDepth++; 
	inc	word [ISRDepth]
	mov	sp, bp
	pop	bp
	ret
L_yakc_71:
	push	bp
	mov	bp, sp
	jmp	L_yakc_72
	ALIGN	2
YKExitISR:
	; >>>>> Line:	269
	; >>>>> { 
	jmp	L_yakc_74
L_yakc_75:
	; >>>>> Line:	270
	; >>>>> ISRDepth--; 
	dec	word [ISRDepth]
	; >>>>> Line:	271
	; >>>>> if (ISRDepth == 0) 
	mov	ax, word [ISRDepth]
	test	ax, ax
	jne	L_yakc_76
	; >>>>> Line:	273
	; >>>>> if (hasRun) 
	mov	ax, word [hasRun]
	test	ax, ax
	je	L_yakc_77
	; >>>>> Line:	275
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_77:
L_yakc_76:
	mov	sp, bp
	pop	bp
	ret
L_yakc_74:
	push	bp
	mov	bp, sp
	jmp	L_yakc_75
L_yakc_79:
	DB	"Not enough sems",0
	ALIGN	2
YKSemCreate:
	; >>>>> Line:	280
	; >>>>> YKSEM* YKSemCreate(int initialValue){ 
	jmp	L_yakc_80
L_yakc_81:
	; >>>>> Line:	281
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	282
	; >>>>> if (YKAvaiSems <= 0){ 
	cmp	word [YKAvaiSems], 0
	jg	L_yakc_82
	; >>>>> Line:	283
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	284
	; >>>>> printString("Not enough sems"); 
	mov	ax, L_yakc_79
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	285
	; >>>>> exit(0xff); 
	mov	al, 255
	push	ax
	call	exit
	add	sp, 2
	jmp	L_yakc_83
L_yakc_82:
	; >>>>> Line:	288
	; >>>>> YKAvaiSems--; 
	dec	word [YKAvaiSems]
	; >>>>> Line:	289
	; >>>>> YKSems[YKAvaiSems].value = initialValue; 
	mov	ax, word [YKAvaiSems]
	shl	ax, 1
	shl	ax, 1
	mov	si, ax
	add	si, YKSems
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	290
	; >>>>> YKSems[YKAvaiSems].blockedOn = 0; 
	mov	ax, word [YKAvaiSems]
	shl	ax, 1
	shl	ax, 1
	add	ax, YKSems
	mov	si, ax
	add	si, 2
	mov	word [si], 0
L_yakc_83:
	; >>>>> Line:	292
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	295
	; >>>>> return (&(YKSems[YKAvaiSems])); 
	mov	ax, word [YKAvaiSems]
	shl	ax, 1
	shl	ax, 1
	add	ax, YKSems
L_yakc_84:
	mov	sp, bp
	pop	bp
	ret
L_yakc_80:
	push	bp
	mov	bp, sp
	jmp	L_yakc_81
	ALIGN	2
YKSemPend:
	; >>>>> Line:	299
	; >>>>> te 
	jmp	L_yakc_86
L_yakc_87:
	; >>>>> Line:	303
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	305
	; >>>>> if (semaphore->value > 0){ 
	mov	si, word [bp+4]
	cmp	word [si], 0
	jle	L_yakc_88
	; >>>>> Line:	307
	; >>>>> semaphore->value--; 
	dec	word [si]
	; >>>>> Line:	308
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	309
	; >>>>> return; 
	jmp	L_yakc_89
L_yakc_88:
	; >>>>> Line:	311
	; >>>>> semaphore->value--; 
	mov	si, word [bp+4]
	dec	word [si]
	; >>>>> Line:	313
	; >>>>> temp = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	315
	; >>>>> YKRdyList = temp->next; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	316
	; >>>>> if (YKRdyList != 0) 
	mov	ax, word [YKRdyList]
	test	ax, ax
	je	L_yakc_90
	; >>>>> Line:	317
	; >>>>> YKRdyList->prev = 0; 
	mov	si, word [YKRdyList]
	add	si, 14
	mov	word [si], 0
L_yakc_90:
	; >>>>> Line:	319
	; >>>>> temp->state = 2; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 2
	; >>>>> Line:	321
	; >>>>> if (semaphore->blockedOn == 0){ 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_91
	; >>>>> Line:	322
	; >>>>> semaphore->blockedOn = temp; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	323
	; >>>>> temp->next = 0; 
	mov	si, word [bp-2]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	324
	; >>>>> temp->prev = 0; 
	mov	si, word [bp-2]
	add	si, 14
	mov	word [si], 0
	jmp	L_yakc_92
L_yakc_91:
	; >>>>> Line:	327
	; >>>>> iter = semaphore->blockedOn; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	328
	; >>>>> } 
	mov	word [bp-4], 0
	; >>>>> Line:	329
	; >>>>> while (iter != 0 && iter->priority < temp->priority){ 
	jmp	L_yakc_94
L_yakc_93:
	; >>>>> Line:	330
	; >>>>> temp2 = iter; 
	mov	ax, word [bp-6]
	mov	word [bp-4], ax
	; >>>>> Line:	331
	; >>>>> iter = iter->next; 
	mov	si, word [bp-6]
	add	si, 12
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakc_94:
	mov	ax, word [bp-6]
	test	ax, ax
	je	L_yakc_96
	mov	si, word [bp-6]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_93
L_yakc_96:
L_yakc_95:
	; >>>>> Line:	333
	; >>>>> if (iter == 0){ 
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_yakc_97
	; >>>>> Line:	334
	; >>>>> temp2->next = temp; 
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	335
	; >>>>> temp->prev = temp; 
	mov	si, word [bp-2]
	add	si, 14
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	336
	; >>>>> temp->next = 0; 
	mov	si, word [bp-2]
	add	si, 12
	mov	word [si], 0
	jmp	L_yakc_98
L_yakc_97:
	; >>>>> Line:	339
	; >>>>> temp->next = iter; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	340
	; >>>>> temp->prev = temp2; 
	mov	si, word [bp-2]
	add	si, 14
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	341
	; >>>>> iter->prev = temp; 
	mov	si, word [bp-6]
	add	si, 14
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	342
	; >>>>> if (temp2 == 0) 
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yakc_99
	; >>>>> Line:	343
	; >>>>> semaphore->blockedOn = temp; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp-2]
	mov	word [si], ax
	jmp	L_yakc_100
L_yakc_99:
	; >>>>> Line:	345
	; >>>>> temp2->next = temp; 
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_100:
L_yakc_98:
L_yakc_92:
	; >>>>> Line:	349
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	351
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_89:
	mov	sp, bp
	pop	bp
	ret
L_yakc_86:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_yakc_87
	ALIGN	2
YKSemPost:
	; >>>>> Line:	354
	; >>>>> void YKSemPost(YKSEM *semaphore){ 
	jmp	L_yakc_102
L_yakc_103:
	; >>>>> Line:	360
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	361
	; >>>>> if (semaphore->value++ >= 0){ 
	mov	si, word [bp+4]
	mov	ax, word [si]
	inc	word [si]
	test	ax, ax
	jl	L_yakc_104
	; >>>>> Line:	362
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	363
	; >>>>> return; 
	jmp	L_yakc_105
L_yakc_104:
	; >>>>> Line:	366
	; >>>>> temp = semaphore->blockedOn; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	367
	; >>>>> semaphore->blockedOn = temp->next; 
	mov	si, word [bp-2]
	add	si, 12
	mov	di, word [bp+4]
	add	di, 2
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	368
	; >>>>> if (semaphore->blockedOn != 0) 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_106
	; >>>>> Line:	369
	; >>>>> semaphore->blockedOn->prev = 0; 
	mov	si, word [bp+4]
	add	si, 2
	mov	si, word [si]
	add	si, 14
	mov	word [si], 0
L_yakc_106:
	; >>>>> Line:	371
	; >>>>> temp->state = 1; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 1
	; >>>>> Line:	373
	; >>>>> temp2 = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	374
	; >>>>> while (temp2->priority < temp->priority){ 
	jmp	L_yakc_108
L_yakc_107:
	; >>>>> Line:	375
	; >>>>> temp2 = temp2->next; 
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_108:
	mov	si, word [bp-4]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_107
L_yakc_109:
	; >>>>> Line:	377
	; >>>>> if (temp2->prev == 0){ 
	mov	si, word [bp-4]
	add	si, 14
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_110
	; >>>>> Line:	378
	; >>>>> { 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_111
L_yakc_110:
	; >>>>> Line:	381
	; >>>>> temp2->prev->next = temp; 
	mov	si, word [bp-4]
	add	si, 14
	mov	si, word [si]
	add	si, 12
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_111:
	; >>>>> Line:	383
	; >>>>> temp->prev = temp2->prev; 
	mov	si, word [bp-4]
	add	si, 14
	mov	di, word [bp-2]
	add	di, 14
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	384
	; >>>>> temp->next = temp2; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	385
	; >>>>> temp2->prev = temp; 
	mov	si, word [bp-4]
	add	si, 14
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	387
	; >>>>> if (ISRDepth == 0) 
	mov	ax, word [ISRDepth]
	test	ax, ax
	jne	L_yakc_112
	; >>>>> Line:	390
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_112:
	; >>>>> Line:	392
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_105:
	mov	sp, bp
	pop	bp
	ret
L_yakc_102:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_103
	ALIGN	2
YKQCreate:
	; >>>>> Line:	396
	; >>>>> YKQ* YKQCreate(void ** start, unsigned int size){ 
	jmp	L_yakc_114
L_yakc_115:
	; >>>>> Line:	398
	; >>>>> currQ->length = size; 
	mov	ax, word [idxNextAvailQ]
	inc	word [idxNextAvailQ]
	mov	cx, 14
	imul	cx
	add	ax, YKQArray
	mov	word [bp-2], ax
	; >>>>> Line:	398
	; >>>>> currQ->length = size; 
	mov	si, word [bp-2]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	399
	; >>>>> currQ->head = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	400
	; >>>>> currQ->tail = 0; 
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], 0
	; >>>>> Line:	401
	; >>>>> currQ->msgQ = start; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	402
	; >>>>> currQ->full = 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	403
	; >>>>> currQ->empty = 1; 
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], 1
	; >>>>> Line:	404
	; >>>>> currQ->waitList = 0; 
	mov	si, word [bp-2]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	405
	; >>>>> return currQ; 
	mov	ax, word [bp-2]
L_yakc_116:
	mov	sp, bp
	pop	bp
	ret
L_yakc_114:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_115
	ALIGN	2
YKQPend:
	; >>>>> Line:	408
	; >>>>> void* YKQPend(YKQ* queue){ 
	jmp	L_yakc_118
L_yakc_119:
	; >>>>> Line:	413
	; >>>>> YKEnterMutex(); 
	mov	word [bp-2], 0
	; >>>>> Line:	413
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	415
	; >>>>> if(queue->empty) 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_120
	; >>>>> Line:	418
	; >>>>> temp = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	420
	; >>>>> YKRdyList = temp->next; 
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	421
	; >>>>> if (YKRdyList != 0) 
	mov	ax, word [YKRdyList]
	test	ax, ax
	je	L_yakc_121
	; >>>>> Line:	422
	; >>>>> YKRdyList->prev = 0; 
	mov	si, word [YKRdyList]
	add	si, 14
	mov	word [si], 0
L_yakc_121:
	; >>>>> Line:	424
	; >>>>> temp->state = 43; 
	mov	si, word [bp-4]
	add	si, 2
	mov	word [si], 43
	; >>>>> Line:	426
	; >>>>> if (queue->waitList == 0){ 
	mov	si, word [bp+4]
	add	si, 12
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_122
	; >>>>> Line:	427
	; >>>>> queue->waitList = temp; 
	mov	si, word [bp+4]
	add	si, 12
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	428
	; >>>>> temp->next = 0; 
	mov	si, word [bp-4]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	429
	; >>>>> temp->prev = 0; 
	mov	si, word [bp-4]
	add	si, 14
	mov	word [si], 0
	jmp	L_yakc_123
L_yakc_122:
	; >>>>> Line:	432
	; >>>>> iter = queue->waitList; 
	mov	si, word [bp+4]
	add	si, 12
	mov	ax, word [si]
	mov	word [bp-8], ax
	; >>>>> Line:	433
	; >>>>> temp2 = 0; 
	mov	word [bp-6], 0
	; >>>>> Line:	434
	; >>>>> while (iter != 0 && iter->priority < temp->priority){ 
	jmp	L_yakc_125
L_yakc_124:
	; >>>>> Line:	435
	; >>>>> temp2 = iter; 
	mov	ax, word [bp-8]
	mov	word [bp-6], ax
	; >>>>> Line:	436
	; >>>>> iter = iter->next; 
	mov	si, word [bp-8]
	add	si, 12
	mov	ax, word [si]
	mov	word [bp-8], ax
L_yakc_125:
	mov	ax, word [bp-8]
	test	ax, ax
	je	L_yakc_127
	mov	si, word [bp-8]
	add	si, 4
	mov	di, word [bp-4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_124
L_yakc_127:
L_yakc_126:
	; >>>>> Line:	438
	; >>>>> if (i 
	mov	ax, word [bp-8]
	test	ax, ax
	jne	L_yakc_128
	; >>>>> Line:	439
	; >>>>> temp2->next = temp; 
	mov	si, word [bp-6]
	add	si, 12
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	440
	; >>>>> temp->prev = temp; 
	mov	si, word [bp-4]
	add	si, 14
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	441
	; >>>>> temp->next = 0; 
	mov	si, word [bp-4]
	add	si, 12
	mov	word [si], 0
	jmp	L_yakc_129
L_yakc_128:
	; >>>>> Line:	444
	; >>>>> temp->next = iter; 
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [bp-8]
	mov	word [si], ax
	; >>>>> Line:	445
	; >>>>> temp->prev = temp2; 
	mov	si, word [bp-4]
	add	si, 14
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	446
	; >>>>> iter->prev = temp; 
	mov	si, word [bp-8]
	add	si, 14
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	447
	; >>>>> if (temp2 == 0) 
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_yakc_130
	; >>>>> Line:	448
	; >>>>> queue->waitList = temp; 
	mov	si, word [bp+4]
	add	si, 12
	mov	ax, word [bp-4]
	mov	word [si], ax
	jmp	L_yakc_131
L_yakc_130:
	; >>>>> Line:	450
	; >>>>> temp2->next = temp; 
	mov	si, word [bp-6]
	add	si, 12
	mov	ax, word [bp-4]
	mov	word [si], ax
L_yakc_131:
L_yakc_129:
L_yakc_123:
	; >>>>> Line:	454
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	457
	; >>>>> retPtr = queue->msgQ[queue->head]; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp+4]
	add	di, 10
	add	si, word [di]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	458
	; >>>>> queue->full = 0; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	461
	; >>>>> if(queue->head == (queue->length - 1)){ 
	mov	si, word [bp+4]
	add	si, 2
	mov	di, word [bp+4]
	mov	ax, word [di]
	dec	ax
	cmp	ax, word [si]
	jne	L_yakc_132
	; >>>>> Line:	462
	; >>>>> queue->head = 0; 
	mov	si, word [bp+4]
	add	si, 2
	mov	word [si], 0
	jmp	L_yakc_133
L_yakc_132:
	; >>>>> Line:	465
	; >>>>> queue->head++; 
	mov	si, word [bp+4]
	add	si, 2
	inc	word [si]
L_yakc_133:
	; >>>>> Line:	468
	; >>>>> if(qu 
	mov	si, word [bp+4]
	add	si, 2
	mov	di, word [bp+4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jne	L_yakc_134
	; >>>>> Line:	470
	; >>>>> queue->empty = 1; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 1
L_yakc_134:
	; >>>>> Line:	472
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	jmp	L_yakc_135
L_yakc_120:
	; >>>>> Line:	476
	; >>>>> retPtr = queue->msgQ[queue->head]; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp+4]
	add	di, 10
	add	si, word [di]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	477
	; >>>>> queue->full = 0; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	480
	; >>>>> if(queue->head == (queue->length - 1)){ 
	mov	si, word [bp+4]
	add	si, 2
	mov	di, word [bp+4]
	mov	ax, word [di]
	dec	ax
	cmp	ax, word [si]
	jne	L_yakc_136
	; >>>>> Line:	481
	; >>>>> queue->head = 0; 
	mov	si, word [bp+4]
	add	si, 2
	mov	word [si], 0
	jmp	L_yakc_137
L_yakc_136:
	; >>>>> Line:	484
	; >>>>> queue->head++; 
	mov	si, word [bp+4]
	add	si, 2
	inc	word [si]
L_yakc_137:
	; >>>>> Line:	487
	; >>>>> if(queue->head == queue->tail) 
	mov	si, word [bp+4]
	add	si, 2
	mov	di, word [bp+4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jne	L_yakc_138
	; >>>>> Line:	489
	; >>>>> queue->empty = 1; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 1
L_yakc_138:
L_yakc_135:
	; >>>>> Line:	494
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	496
	; >>>>> return retPtr; 
	mov	ax, word [bp-2]
L_yakc_139:
	mov	sp, bp
	pop	bp
	ret
L_yakc_118:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_yakc_119
	ALIGN	2
YKQPost:
	; >>>>> Line:	500
	; >>>>> int YKQPost(YKQ* queue, void* msg){ 
	jmp	L_yakc_141
L_yakc_142:
	; >>>>> Line:	504
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	506
	; >>>>> if(queue->full){ 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_143
	; >>>>> Line:	507
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	508
	; >>>>> return 0; 
	xor	ax, ax
	jmp	L_yakc_144
L_yakc_143:
	; >>>>> Line:	512
	; >>>>> queue->ms 
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp+4]
	add	di, 10
	add	si, word [di]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	515
	; >>>>> if(queue->tail == (queue->length - 1)){ 
	mov	si, word [bp+4]
	add	si, 4
	mov	di, word [bp+4]
	mov	ax, word [di]
	dec	ax
	cmp	ax, word [si]
	jne	L_yakc_145
	; >>>>> Line:	516
	; >>>>> queue->tail = 0; 
	mov	si, word [bp+4]
	add	si, 4
	mov	word [si], 0
	jmp	L_yakc_146
L_yakc_145:
	; >>>>> Line:	519
	; >>>>> queue->tail++; 
	mov	si, word [bp+4]
	add	si, 4
	inc	word [si]
L_yakc_146:
	; >>>>> Line:	524
	; >>>>> queue->empty = 0; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	526
	; >>>>> if(queue->tail == queue->head){ 
	mov	si, word [bp+4]
	add	si, 4
	mov	di, word [bp+4]
	add	di, 2
	mov	ax, word [di]
	cmp	ax, word [si]
	jne	L_yakc_147
	; >>>>> Line:	527
	; >>>>> queue->full = 1; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 1
L_yakc_147:
	; >>>>> Line:	532
	; >>>>> if(queue->waitList != 0){ 
	mov	si, word [bp+4]
	add	si, 12
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_148
	; >>>>> Line:	534
	; >>>>> waitTask = queue->waitList; 
	mov	si, word [bp+4]
	add	si, 12
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	535
	; >>>>> if(waitTask->next !=0) 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_149
	; >>>>> Line:	537
	; >>>>> tempPtr = waitTask->next; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	538
	; >>>>> tempPtr->prev = 0; 
	mov	si, word [bp-4]
	add	si, 14
	mov	word [si], 0
	; >>>>> Line:	539
	; >>>>> queue->waitList = tempPtr; 
	mov	si, word [bp+4]
	add	si, 12
	mov	ax, word [bp-4]
	mov	word [si], ax
	jmp	L_yakc_150
L_yakc_149:
	; >>>>> Line:	542
	; >>>>> queue->waitList = 0; 
	mov	si, word [bp+4]
	add	si, 12
	mov	word [si], 0
L_yakc_150:
	; >>>>> Line:	545
	; >>>>> waitTask->state = 1; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 1
	; >>>>> Line:	547
	; >>>>> tempPtr2 = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-6], ax
	; >>>>> Line:	548
	; >>>>> while (tempPtr2->priority < waitTask->priority){ 
	jmp	L_yakc_152
L_yakc_151:
	; >>>>> Line:	549
	; >>>>> tempPt 
	mov	si, word [bp-6]
	add	si, 12
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakc_152:
	mov	si, word [bp-6]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_151
L_yakc_153:
	; >>>>> Line:	551
	; >>>>> if (tempPtr2->prev == 0){ 
	mov	si, word [bp-6]
	add	si, 14
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_154
	; >>>>> Line:	552
	; >>>>> YKRdyList = waitTask; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_155
L_yakc_154:
	; >>>>> Line:	555
	; >>>>> tempPtr2->prev->next = waitTask; 
	mov	si, word [bp-6]
	add	si, 14
	mov	si, word [si]
	add	si, 12
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_155:
	; >>>>> Line:	557
	; >>>>> waitTask->prev = tempPtr2->prev; 
	mov	si, word [bp-6]
	add	si, 14
	mov	di, word [bp-2]
	add	di, 14
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	558
	; >>>>> waitTask->next = tempPtr2; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	559
	; >>>>> tempPtr2->prev = waitTask; 
	mov	si, word [bp-6]
	add	si, 14
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_148:
	; >>>>> Line:	566
	; >>>>> if (ISRDepth == 0) 
	mov	ax, word [ISRDepth]
	test	ax, ax
	jne	L_yakc_156
	; >>>>> Line:	567
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_156:
	; >>>>> Line:	570
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	572
	; >>>>> return 1; 
	mov	ax, 1
L_yakc_144:
	mov	sp, bp
	pop	bp
	ret
L_yakc_141:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_142
	ALIGN	2
YKIdleCount:
	TIMES	2 db 0
YKTickNum:
	TIMES	2 db 0
ISRDepth:
	TIMES	2 db 0
YKSave:
	TIMES	2 db 0
YKRestore:
	TIMES	2 db 0
YKSems:
	TIMES	16 db 0
YKAvaiSems:
	TIMES	2 db 0
YKRdyList:
	TIMES	2 db 0
YKAvailTCBList:
	TIMES	2 db 0
YKSuspList:
	TIMES	2 db 0
YKRunningTask:
	TIMES	2 db 0
YKTCBArray:
	TIMES	112 db 0
YKQArray:
	TIMES	140 db 0
idxNextAvailQ:
	TIMES	2 db 0
idleStk:
	TIMES	4096 db 0
