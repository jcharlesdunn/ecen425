; Generated by c86 (BYU-NASM) 5.1 (beta) from myinth.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
tickCount:
	DW	0
L_myinth_1:
	DB	"Reset Inerrupt",0
	ALIGN	2
resetInterrupt:
	; >>>>> Line:	27
	; >>>>> { 
	jmp	L_myinth_2
L_myinth_3:
	; >>>>> Line:	28
	; >>>>> printString("Reset Inerrupt"); 
	mov	ax, L_myinth_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	29
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_myinth_2:
	push	bp
	mov	bp, sp
	jmp	L_myinth_3
L_myinth_6:
	DB	0xA,0xD,0
L_myinth_5:
	DB	"TICK ",0
	ALIGN	2
tickInterrupt:
	; >>>>> Line:	33
	; >>>>> { 
	jmp	L_myinth_7
L_myinth_8:
	; >>>>> Line:	34
	; >>>>> tickCount++; 
	inc	word [tickCount]
	; >>>>> Line:	36
	; >>>>> printString("TICK "); 
	mov	ax, L_myinth_5
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	37
	; >>>>> printInt(tickCount); 
	push	word [tickCount]
	call	printInt
	add	sp, 2
	; >>>>> Line:	38
	; >>>>> printString("\n\r"); 
	mov	ax, L_myinth_6
	push	ax
	call	printString
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_myinth_7:
	push	bp
	mov	bp, sp
	jmp	L_myinth_8
L_myinth_11:
	DB	") IGNORED",0xA,0
L_myinth_10:
	DB	0xA,"KEYPRESS (",0
	ALIGN	2
keyboardInterrupt:
	; >>>>> Line:	43
	; >>>>> { 
	jmp	L_myinth_12
L_myinth_13:
	; >>>>> Line:	45
	; >>>>> c = KeyBuffer; 
	mov	al, byte [KeyBuffer]
	mov	byte [bp-1], al
	; >>>>> Line:	55
	; >>>>> print("\nKEYPRESS (", 11); 
	mov	ax, 11
	push	ax
	mov	ax, L_myinth_10
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	56
	; >>>>> printChar(c); 
	push	word [bp-1]
	call	printChar
	add	sp, 2
	; >>>>> Line:	57
	; >>>>> print(") IGNORED\n", 10); 
	mov	ax, 10
	push	ax
	mov	ax, L_myinth_11
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_myinth_12:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_myinth_13
L_myinth_15:
	DB	"gameOverHandle",0xA,0
	ALIGN	2
gameOverHandle:
	; >>>>> Line:	62
	; >>>>> { 
	jmp	L_myinth_16
L_myinth_17:
	; >>>>> Line:	63
	; >>>>> printString("gameOverHandle\n"); 
	mov	ax, L_myinth_15
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	64
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_myinth_16:
	push	bp
	mov	bp, sp
	jmp	L_myinth_17
L_myinth_23:
	DB	"COL: ",0
L_myinth_22:
	DB	"ORIENT: ",0
L_myinth_21:
	DB	"TYPE: ",0
L_myinth_20:
	DB	"ID: ",0
L_myinth_19:
	DB	"newPieceHandle",0xA,0
	ALIGN	2
newPieceHandle:
	; >>>>> Line:	68
	; >>>>> { 
	jmp	L_myinth_24
L_myinth_25:
	; >>>>> Line:	70
	; >>>>> printString("newPieceHandle\n"); 
	mov	ax, L_myinth_19
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	71
	; >>>>> tempID = NewPieceID; 
	mov	ax, word [NewPieceID]
	mov	word [bp-2], ax
	; >>>>> Line:	72
	; >>>>> tempType = NewPieceType; 
	mov	ax, word [NewPieceType]
	mov	word [bp-4], ax
	; >>>>> Line:	73
	; >>>>> tempOrient = NewPieceOrientation; 
	mov	ax, word [NewPieceOrientation]
	mov	word [bp-6], ax
	; >>>>> Line:	74
	; >>>>> tempCol = NewPieceColumn; 
	mov	ax, word [NewPieceColumn]
	mov	word [bp-8], ax
	; >>>>> Line:	75
	; >>>>> printString("ID: "); 
	mov	ax, L_myinth_20
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	76
	; >>>>> printUInt(tempID); 
	push	word [bp-2]
	call	printUInt
	add	sp, 2
	; >>>>> Line:	77
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	78
	; >>>>> printString("TYPE: "); 
	mov	ax, L_myinth_21
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	79
	; >>>>> printUInt(tempType); 
	push	word [bp-4]
	call	printUInt
	add	sp, 2
	; >>>>> Line:	80
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	81
	; >>>>> printString("ORIENT: "); 
	mov	ax, L_myinth_22
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	82
	; >>>>> printUInt(tempOrient); 
	push	word [bp-6]
	call	printUInt
	add	sp, 2
	; >>>>> Line:	83
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	84
	; >>>>> printString("COL: "); 
	mov	ax, L_myinth_23
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	85
	; >>>>> printUInt(tempCol); 
	push	word [bp-8]
	call	printUInt
	add	sp, 2
	; >>>>> Line:	86
	; >>>>> printNewLine(); 
	call	printNewLine
	mov	sp, bp
	pop	bp
	ret
L_myinth_24:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_myinth_25
L_myinth_27:
	DB	"recieveCommandHandle",0xA,0
	ALIGN	2
recieveCommandHandle:
	; >>>>> Line:	94
	; >>>>> { 
	jmp	L_myinth_28
L_myinth_29:
	; >>>>> Line:	95
	; >>>>> printString("recieveCommandHandle\n"); 
	mov	ax, L_myinth_27
	push	ax
	call	printString
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_myinth_28:
	push	bp
	mov	bp, sp
	jmp	L_myinth_29
L_myinth_31:
	DB	"touchdownHandle",0xA,0
	ALIGN	2
touchdownHandle:
	; >>>>> Line:	99
	; >>>>> { 
	jmp	L_myinth_32
L_myinth_33:
	; >>>>> Line:	100
	; >>>>> printString("touchdownHandle\n"); 
	mov	ax, L_myinth_31
	push	ax
	call	printString
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_myinth_32:
	push	bp
	mov	bp, sp
	jmp	L_myinth_33
L_myinth_35:
	DB	"lineClearHandle",0xA,0
	ALIGN	2
lineClearHandle:
	; >>>>> Line:	104
	; >>>>> { 
	jmp	L_myinth_36
L_myinth_37:
	; >>>>> Line:	105
	; >>>>> printString("lineClearHandle\n"); 
	mov	ax, L_myinth_35
	push	ax
	call	printString
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_myinth_36:
	push	bp
	mov	bp, sp
	jmp	L_myinth_37
