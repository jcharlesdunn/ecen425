; Generated by c86 (BYU-NASM) 5.1 (beta) from myinth.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
tickCount:
	DW	0
L_myinth_1:
	DB	"Reset Inerrupt",0
	ALIGN	2
resetInterrupt:
	; >>>>> Line:	9
	; >>>>> { 
	jmp	L_myinth_2
L_myinth_3:
	; >>>>> Line:	10
	; >>>>> printString("Reset Inerrupt"); 
	mov	ax, L_myinth_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	11
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_myinth_2:
	push	bp
	mov	bp, sp
	jmp	L_myinth_3
L_myinth_6:
	DB	0xA,0xD,0
L_myinth_5:
	DB	"TICK ",0
	ALIGN	2
tickInterrupt:
	; >>>>> Line:	15
	; >>>>> { 
	jmp	L_myinth_7
L_myinth_8:
	; >>>>> Line:	16
	; >>>>> E 
	inc	word [tickCount]
	; >>>>> Line:	18
	; >>>>> printString("TICK "); 
	mov	ax, L_myinth_5
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	19
	; >>>>> printInt(tickCount); 
	push	word [tickCount]
	call	printInt
	add	sp, 2
	; >>>>> Line:	20
	; >>>>> printString("\n\r"); 
	mov	ax, L_myinth_6
	push	ax
	call	printString
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_myinth_7:
	push	bp
	mov	bp, sp
	jmp	L_myinth_8
L_myinth_13:
	DB	" IGNORED",0
L_myinth_12:
	DB	"KEYPRESS ",0
L_myinth_11:
	DB	"DELAY COMPLETE",0
L_myinth_10:
	DB	"DELAY KEY PRESSED",0
	ALIGN	2
keyboardInterrupt:
	; >>>>> Line:	25
	; >>>>> { 
	jmp	L_myinth_14
L_myinth_15:
	; >>>>> Line:	28
	; >>>>> if (KeyBuffer == 100) 
	mov	word [bp-2], 0
	; >>>>> Line:	28
	; >>>>> if (KeyBuffer == 100) 
	cmp	word [KeyBuffer], 100
	jne	L_myinth_16
	; >>>>> Line:	31
	; >>>>> printString("DELAY KEY PRESSED"); 
	mov	ax, L_myinth_10
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	32
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	33
	; >>>>> localVar = 0; 
	mov	word [bp-2], 0
	; >>>>> Line:	34
	; >>>>> while (localVar < 20000) 
	jmp	L_myinth_18
L_myinth_17:
	; >>>>> Line:	36
	; >>>>> localVar++; 
	inc	word [bp-2]
L_myinth_18:
	cmp	word [bp-2], 20000
	jb	L_myinth_17
L_myinth_19:
	; >>>>> Line:	38
	; >>>>> printString("DELAY COMPLETE"); 
	mov	ax, L_myinth_11
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	39
	; >>>>> printNewLine(); 
	call	printNewLine
	jmp	L_myinth_20
L_myinth_16:
	; >>>>> Line:	41
	; >>>>> else if (KeyBuffer == 'p'){ 
	cmp	word [KeyBuffer], 112
	jne	L_myinth_21
	; >>>>> Line:	43
	; >>>>> YKSemPost(NSemPtr); 
	push	word [NSemPtr]
	call	YKSemPost
	add	sp, 2
	jmp	L_myinth_22
L_myinth_21:
	; >>>>> Line:	45
	; >>>>> else if ((KeyBuffer > 97) && (KeyBuffer <123)) 
	cmp	word [KeyBuffer], 97
	jle	L_myinth_23
	cmp	word [KeyBuffer], 123
	jge	L_myinth_23
	; >>>>> Line:	48
	; >>>>> printString("KE 
	mov	ax, L_myinth_12
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	49
	; >>>>> printChar(KeyBuffer); 
	push	word [KeyBuffer]
	call	printChar
	add	sp, 2
	; >>>>> Line:	51
	; >>>>> printString(" IGNORED"); 
	mov	ax, L_myinth_13
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	52
	; >>>>> printNewLine(); 
	call	printNewLine
L_myinth_23:
L_myinth_24:
L_myinth_22:
L_myinth_20:
	; >>>>> Line:	54
	; >>>>> else {} 
	mov	sp, bp
	pop	bp
	ret
L_myinth_14:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_myinth_15
