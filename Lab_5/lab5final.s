        CPU     8086
        ORG     0h
InterruptVectorTable:
        ; Internal x86 Interrupts:
        dd      0 ; Reserved (Div err)  ; Int 00h
        dd      0 ; Reserved (Step)     ; Int 01h
        dd      0 ; Reserved (NMI)      ; Int 02h
        dd      0 ; Reserved (Break)    ; Int 03h
        dd      0 ; Reserved (Overflow) ; Int 04h
        dd      0                       ; Int 05h
        dd      0                       ; Int 06h
        dd      0                       ; Int 07h
        ; Hardware Interrupts:
        dd      Reset ; Reset               ; Int 08h (IRQ 0)
        dd      Tick ; Tick                ; Int 09h (IRQ 1)
        dd      Keyboard ; Keyboard            ; Int 0Ah (IRQ 2)
        dd      0 ; Simptris Game Over  ; Int 0Bh (IRQ 3)
        dd      0 ; Simptris New Piece  ; Int 0Ch (IRQ 4)
        dd      0 ; Simptris Received   ; Int 0Dh (IRQ 5)
        dd      0 ; Simptris Touchdown  ; Int 0Eh (IRQ 6)
        dd      0 ; Simptris Clear      ; Int 0Fh (IRQ 7)
        ; Software Interrupts:
        dd      0 ; Reserved (PC BIOS)  ; Int 10h
        dd      0                       ; Int 11h
        dd      0                       ; Int 12h
        dd      0                       ; Int 13h
        dd      0                       ; Int 14h
        dd      0                       ; Int 15h
        dd      0                       ; Int 16h
        dd      0                       ; Int 17h
        dd      0                       ; Int 18h
        dd      0                       ; Int 19h
        dd      0                       ; Int 1Ah
        dd      0                       ; Int 1Bh
        dd      0                       ; Int 1Ch
        dd      0                       ; Int 1Dh
        dd      0                       ; Int 1Eh
        dd      0                       ; Int 1Fh
        dd      0                       ; Int 20h
        dd      0 ; Reserved (DOS)      ; Int 21h
        dd      0 ; Simptris Services   ; Int 22h
        dd      0                       ; Int 23h
        dd      0                       ; Int 24h
        dd      0                       ; Int 25h
        dd      0                       ; Int 26h
        dd      0                       ; Int 27h
        dd      0                       ; Int 28h
        dd      0                       ; Int 29h
        dd      0                       ; Int 2Ah
        dd      0                       ; Int 2Bh
        dd      0                       ; Int 2Ch
        dd      0                       ; Int 2Dh
        dd      0                       ; Int 2Eh
        dd      0                       ; Int 2Fh
KeyBuffer:                              ; Address 0xC0
        dw      0
NewPieceType:                           ; Address 0xC2
        dw      0
NewPieceID:                             ; Address 0xC4
        dw      0
NewPieceOrientation:                    ; Address 0xC6
        dw      0
NewPieceColumn:                         ; Address 0xC8
        dw      0
TouchdownID:                            ; Address 0xCA
	dw	0
ScreenBitMap0:                          ; Address 0xCC
        dw      0
ScreenBitMap1:
        dw      0
ScreenBitMap2:
        dw      0
ScreenBitMap3:
        dw      0
ScreenBitMap4:
        dw      0
ScreenBitMap5:
        dw      0
TIMES   100h-($-$$) db  0               ; Fill up to (but not including) address 100h with 0
	jmp	main
; This file contains support routines for 32-bit on the 8086.
; It is intended for use code generated by the C86 compiler.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SR_asldiv:			; l1 /= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_ldiv
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmod:			; l1 %= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmod
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmul:			; l1 *= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmul
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshl:			; l1 <<= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshl
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshr:			; l1 >>= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshr
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


SR_asuldiv:			; u1 /= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_uldiv
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asilmod:			; u1 %= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ilmod
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulmul:			; u1 *= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulmul
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshl:			; u1 << u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshl
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshr:			; u1 >> u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshr
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


; Main 32-bit routines begin here:

SR_ldiv:	; N_LDIV@
	pop    cx
	push   cs
	push   cx
	; LDIV@
	xor    cx,cx
	jmp    LSR_01
SR_uldiv:	; N_LUDIV@
	pop    cx
	push   cs
	push   cx
	; F_LUDIV@
	mov    cx,0001
	jmp    LSR_01
SR_lmod:	; N_LMOD@
	pop    cx
	push   cs
	push   cx
	; F_LMOD@
	mov    cx,0002
	jmp    LSR_01
SR_ilmod:	; N_LUMOD@
	pop    cx
	push   cs
	push   cx
	; LUMOD@
	mov    cx,0003
LSR_01:
	push   bp
	push   si
	push   di
	mov    bp,sp
	mov    di,cx
	mov    ax,[bp+0Ah]
	mov    dx,[bp+0Ch]
	mov    bx,[bp+0Eh]
	mov    cx,[bp+10h]
	or     cx,cx
	jne    LSR_02
	or     dx,dx
	je     LSR_10
	or     bx,bx
	je     LSR_10
LSR_02:
	test   di,0001
	jne    LSR_04
	or     dx,dx
	jns    LSR_03
	neg    dx
	neg    ax
	sbb    dx,0000
	or     di,000Ch
LSR_03:
	or     cx,cx
	jns    LSR_04
	neg    cx
	neg    bx
	sbb    cx,0000
	xor    di,0004
LSR_04:
	mov    bp,cx
	mov    cx,0020h
	push   di
	xor    di,di
	xor    si,si
LSR_05:
	shl    ax,1
	rcl    dx,1
	rcl    si,1
	rcl    di,1
	cmp    di,bp
	jb     LSR_07
	ja     LSR_06
	cmp    si,bx
	jb     LSR_07
LSR_06:
	sub    si,bx
	sbb    di,bp
	inc    ax
LSR_07:
	loop   LSR_05
	pop    bx
	test   bx,0002
	je     LSR_08
	mov    ax,si
	mov    dx,di
	shr    bx,1
LSR_08:
	test   bx,0004h
	je     LSR_09
	neg    dx
	neg    ax
	sbb    dx,0000
LSR_09:
	pop    di
	pop    si
	pop    bp
	retf   0008
LSR_10:
	div    bx
	test   di,0002
	je     LSR_11
	xchg   dx,ax
LSR_11:
	xor    dx,dx
	jmp    LSR_09
SR_lshl:	; N_LXLSH@
SR_ulshl:
	; r = a << b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

	mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXLSH@
	cmp    cl,10h
	jnb    LSR_12
	mov    bx,ax
	shl    ax,cl
	shl    dx,cl
	neg    cl
	add    cl,10h
	shr    bx,cl
	or     dx,bx
	pop    cx
	pop    bp
	retf
LSR_12:
	sub    cl,10h
	xchg   dx,ax
	xor    ax,ax
	shl    dx,cl
	pop    cx
	pop    bp
	retf
SR_lshr:	; N_LXRSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXRSH@
	cmp    cl,10h
	jnb    LSR_13
	mov    bx,dx
	shr    ax,cl
	sar    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_13:
	sub    cl,10h
	xchg   dx,ax
	cwd
	sar    ax,cl
	pop    cx
	pop    bp
	retf
SR_ulshr:	; N_LXURSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXURSH@
	cmp    cl,10h
	jnb    LSR_14
	mov    bx,dx
	shr    ax,cl
	shr    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_14:
	sub    cl,10h
	xchg   dx,ax
	xor    dx,dx
	shr    ax,cl
	pop    cx
	pop    bp
	retf
SR_lmul:	; N_LXMUL@
SR_ulmul:
	; r = a * b
	push   bp
	push   si
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx
	push   bx

        mov    bx, [bp+6]	; pop loword(a)
	mov    cx, [bp+8]	; pop hiword(a)
	mov    ax, [bp+10]	; pop loword(b)
	mov    dx, [bp+12]	; pop hiword(b)
	
	xchg   si,ax
	xchg   dx,ax
	test   ax,ax
	je     LSR_15
	mul    bx
LSR_15:
	jcxz   LSR_16
	xchg   cx,ax
	mul    si
	add    ax,cx
LSR_16:
	xchg   si,ax
	mul    bx
	add    dx,si
	pop    bx
	pop    cx
	pop    si
	pop    bp
	ret

; Generated by c86 (BYU-NASM) 5.1 (beta) from clib.c
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
new_line:
	db	13,10,36
	ALIGN	2
signalEOI:
	jmp	L_clib_1
L_clib_2:
	mov	al, 0x20
	out	0x20, al
	mov	sp, bp
	pop	bp
	ret
L_clib_1:
	push	bp
	mov	bp, sp
	jmp	L_clib_2
	ALIGN	2
exit:
	jmp	L_clib_4
L_clib_5:
	mov	ah, 4Ch
	mov	al, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_4:
	push	bp
	mov	bp, sp
	jmp	L_clib_5
	ALIGN	2
print:
	jmp	L_clib_7
L_clib_8:
	mov	ah, 40h
	mov	bx, 1
	mov	cx, [bp+6]
	mov	dx, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_7:
	push	bp
	mov	bp, sp
	jmp	L_clib_8
	ALIGN	2
printChar:
	jmp	L_clib_10
L_clib_11:
	mov	ah, 2
	mov	dl, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_10:
	push	bp
	mov	bp, sp
	jmp	L_clib_11
	ALIGN	2
printNewLine:
	jmp	L_clib_13
L_clib_14:
	mov	ah, 9
	mov	dx, new_line
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_13:
	push	bp
	mov	bp, sp
	jmp	L_clib_14
	ALIGN	2
printString:
	jmp	L_clib_16
L_clib_17:
	xor	si,si
	mov	bx, [bp+4]
	jmp	printString2
	printString1:
	inc	si
	printString2:
	cmp	byte [bx+si],0
	jne	printString1
	mov	dx, bx
	mov	cx, si
	mov	ah, 40h
	mov	bx, 1
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_16:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_clib_17
	ALIGN	2
printInt:
	jmp	L_clib_19
L_clib_20:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	cmp	word [bp+4], 0
	jge	L_clib_21
	mov	byte [bp-10], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	neg	ax
	mov	word [bp+4], ax
L_clib_21:
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_22
	mov	word [bp-4], 1
	jmp	L_clib_23
L_clib_22:
	jmp	L_clib_25
L_clib_24:
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
L_clib_25:
	mov	ax, word [bp+4]
	cwd
	idiv	word [bp-4]
	test	ax, ax
	je	L_clib_24
L_clib_26:
L_clib_23:
	jmp	L_clib_28
L_clib_27:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	ax, dx
	mov	word [bp+4], ax
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
	mov	ax, word [bp-4]
	mov	word [bp-4], ax
L_clib_28:
	cmp	word [bp-4], 0
	jg	L_clib_27
L_clib_29:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_19:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_20
	ALIGN	2
printLong:
	jmp	L_clib_31
L_clib_32:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	cmp	word [bp+6], 0
	jg	L_clib_33
	jl	L_clib_34
	cmp	word [bp+4], 0
	jae	L_clib_33
L_clib_34:
	mov	byte [bp-17], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	neg	ax
	adc	dx, 0
	neg	dx
	mov	word [bp+4], ax
	mov	word [bp+6], dx
L_clib_33:
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_35
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_36
L_clib_35:
	jmp	L_clib_38
L_clib_37:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_38:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_ldiv
	or	dx, ax
	je	L_clib_37
L_clib_39:
L_clib_36:
	jmp	L_clib_41
L_clib_40:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_lmod
	mov	word [bp+4], ax
	mov	word [bp+6], dx
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_41:
	cmp	word [bp-4], 0
	jg	L_clib_40
	jne	L_clib_43
	cmp	word [bp-6], 0
	ja	L_clib_40
L_clib_43:
L_clib_42:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_31:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_32
	ALIGN	2
printUInt:
	jmp	L_clib_45
L_clib_46:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_47
	mov	word [bp-4], 1
	jmp	L_clib_48
L_clib_47:
	jmp	L_clib_50
L_clib_49:
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_50:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	test	ax, ax
	je	L_clib_49
L_clib_51:
L_clib_48:
	jmp	L_clib_53
L_clib_52:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	word [bp+4], dx
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_53:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_clib_52
L_clib_54:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_45:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_46
	ALIGN	2
printULong:
	jmp	L_clib_56
L_clib_57:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_58
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_59
L_clib_58:
	jmp	L_clib_61
L_clib_60:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_61:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	or	dx, ax
	je	L_clib_60
L_clib_62:
L_clib_59:
	jmp	L_clib_64
L_clib_63:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	lea	ax, [bp+4]
	push	ax
	call	SR_asilmod
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_64:
	mov	ax, word [bp-6]
	mov	dx, word [bp-4]
	or	dx, ax
	jne	L_clib_63
L_clib_65:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_56:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_57
	ALIGN	2
printByte:
	jmp	L_clib_67
L_clib_68:
	mov	al, byte [bp+4]
	cbw
	mov	cx, 4
	sar	ax, cl
	and	ax, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_69
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_70
L_clib_69:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_70:
	mov	byte [bp-3], al
	mov	al, byte [bp+4]
	and	al, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_71
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_72
L_clib_71:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_72:
	mov	byte [bp-2], al
	mov	ax, 2
	push	ax
	lea	ax, [bp-3]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_67:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_clib_68
	ALIGN	2
printWord:
	jmp	L_clib_74
L_clib_75:
	mov	word [bp-2], 3
	jmp	L_clib_77
L_clib_76:
	mov	ax, word [bp+4]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_80
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_81
L_clib_80:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_81:
	mov	si, word [bp-2]
	lea	dx, [bp-7]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp+4]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp+4], ax
L_clib_79:
	dec	word [bp-2]
L_clib_77:
	cmp	word [bp-2], 0
	jge	L_clib_76
L_clib_78:
	mov	ax, 4
	push	ax
	lea	ax, [bp-7]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_74:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_clib_75
	ALIGN	2
printDWord:
	jmp	L_clib_83
L_clib_84:
	lea	ax, [bp+4]
	mov	si, ax
	mov	ax, word [si]
	mov	word [bp-6], ax
	lea	ax, [bp+4]
	mov	si, ax
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-8], ax
	mov	word [bp-2], 3
	jmp	L_clib_86
L_clib_85:
	mov	ax, word [bp-6]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_89
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_90
L_clib_89:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_90:
	mov	dx, word [bp-2]
	add	dx, 4
	mov	si, dx
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-6]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_91
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_92
L_clib_91:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_92:
	mov	si, word [bp-2]
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-8]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-8], ax
L_clib_88:
	dec	word [bp-2]
L_clib_86:
	cmp	word [bp-2], 0
	jge	L_clib_85
L_clib_87:
	mov	ax, 8
	push	ax
	lea	ax, [bp-16]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_83:
	push	bp
	mov	bp, sp
	sub	sp, 16
	jmp	L_clib_84



;.globl resetInterrupt

;ISR 
  
Reset:

sti							;set the interrupt flag. Enable interrupts
call resetInterrupt			;Call the interrupt handler
cli							;clear the interrupt flag. Disable interrupts
call signalEOI					;signal EOI to the PIC
iret						;return


Tick:
    					;1. Save the context 
call save

call YKEnterISR			;Call YKEnterISR
    					;2. Enable interrupts
call YKExitMutex		;sti						;set the interrupt flag. Enable interrupts
    					;3. Run the interrupt handler
call tickInterrupt		;OLD CODE
call YKTickHandler
    					;4. Disable interrupts.
call YKEnterMutex		;cli				;clear the interrupt flag. Disable interrupts
	   					;5. Send the EOI command to the PIC, 
call signalEOI

call YKExitISR			;Call YKExitISR
    					;6. Restore the context

call restore
    					;7. Execute the iret instruction. 
iret


Keyboard:
    					;1. Save the context 
call save
    					;2. Enable interrupts
sti				;set the interrupt flag. Enable interrupts
    					;3. Run the interrupt handler
call keyboardInterrupt
    					;4. Disable interrupts.
cli				;clear the interrupt flag. Disable interrupts
	   					;5. Send the EOI command to the PIC, 
call signalEOI
    					;6. Restore the context
call restore
    					;7. Execute the iret instruction. 
iret


YKEnterMutex:
	cli			;Disable interrupts
	ret

YKExitMutex:
	sti			;Enable interrupts
	ret

save:
				;Save the context of the current task. 9 total
	push	ax
	push	bx
	push	cx
	push	dx
	push	es
	push	ds
	push 	si
	push	di
	push 	bp
				;Return address must be placed on top of the stack
				;Move 9 words up the stack
	mov		bp, sp 			;Move stack pointer
	push	word[bp+18]		;Go to the top of the stack
	mov		[bp+18], cx		;Keep track of cx

	mov cx, [ISRDepth]
	cmp cx, 0				;Compare the ISRDepth with 0. This will perform (ISRDepth-0)
	jg return				;if (ISRDepth-0) is greater than 0, we need to return.
							;If the ISRDepth is 0, it will skip the return

	mov bx, [YKRunningTask]	;Grab the currently running task
	mov bp, sp				
	add	bp, 2
	mov [bx], bp

return:
	ret

YKDispatcher:
	
	push bp 	
	mov bp, sp	
	cmp	byte[bp+4], 1		; compare the argument with 1 
	pop bp
	je	dispatcherRestore 	;if the argument is 1, restore old saved context
	push cs					
	pushf					;Push flag register onto stack
	call save				;Save the new context
	mov	bp, sp				;Move stack pointer to bp
	mov	bx, [bp+20]			;Store the task
	mov	ax, [bp+24]			;Store the interrupt flag
	mov	[bp+20], ax			;Set the task	
	or bx, 0x0200			;or flag with 0x0200
	mov	[bp+24], bx			;Move flag to flag position

dispatcherRestore:			;If not saved, restore the old context
	mov bx, [YKRdyList]		;store the new task
	mov sp, [bx]			;Store saved bp
	mov	[YKRunningTask], bx	;Grab the currently running task. to restore content
	call restore			;Restore the content of the running task
	iret					;iret to restore context not restored already

restore:					;Restore context
	
	mov	bp, sp
	mov cx, [bp+20]
	pop	word[bp+20]
	pop		bp
	pop		di
	pop		si
	pop		ds
	pop		es
	pop		dx
	pop		cx
	pop		bx
	pop		ax
	ret

YKIMRInit:
	push ax
	push bp
	mov bp, sp
	mov al, [bp+6]
	pop bp
	pop ax
	ret
; Generated by c86 (BYU-NASM) 5.1 (beta) from myinth.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
tickCount:
	DW	0
L_myinth_1:
	DB	"Reset Inerrupt",0
	ALIGN	2
resetInterrupt:
	; >>>>> Line:	9
	; >>>>> { 
	jmp	L_myinth_2
L_myinth_3:
	; >>>>> Line:	10
	; >>>>> printString("Reset Inerrupt"); 
	mov	ax, L_myinth_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	11
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_myinth_2:
	push	bp
	mov	bp, sp
	jmp	L_myinth_3
L_myinth_6:
	DB	0xA,0xD,0
L_myinth_5:
	DB	"TICK ",0
	ALIGN	2
tickInterrupt:
	; >>>>> Line:	15
	; >>>>> { 
	jmp	L_myinth_7
L_myinth_8:
	; >>>>> Line:	16
	; >>>>> E 
	inc	word [tickCount]
	; >>>>> Line:	18
	; >>>>> printString("TICK "); 
	mov	ax, L_myinth_5
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	19
	; >>>>> printInt(tickCount); 
	push	word [tickCount]
	call	printInt
	add	sp, 2
	; >>>>> Line:	20
	; >>>>> printString("\n\r"); 
	mov	ax, L_myinth_6
	push	ax
	call	printString
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_myinth_7:
	push	bp
	mov	bp, sp
	jmp	L_myinth_8
L_myinth_13:
	DB	" IGNORED",0
L_myinth_12:
	DB	"KEYPRESS ",0
L_myinth_11:
	DB	"DELAY COMPLETE",0
L_myinth_10:
	DB	"DELAY KEY PRESSED",0
	ALIGN	2
keyboardInterrupt:
	; >>>>> Line:	25
	; >>>>> { 
	jmp	L_myinth_14
L_myinth_15:
	; >>>>> Line:	28
	; >>>>> if (KeyBuffer == 100) 
	mov	word [bp-2], 0
	; >>>>> Line:	28
	; >>>>> if (KeyBuffer == 100) 
	cmp	word [KeyBuffer], 100
	jne	L_myinth_16
	; >>>>> Line:	31
	; >>>>> printString("DELAY KEY PRESSED"); 
	mov	ax, L_myinth_10
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	32
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	33
	; >>>>> localVar = 0; 
	mov	word [bp-2], 0
	; >>>>> Line:	34
	; >>>>> while (localVar < 20000) 
	jmp	L_myinth_18
L_myinth_17:
	; >>>>> Line:	36
	; >>>>> localVar++; 
	inc	word [bp-2]
L_myinth_18:
	cmp	word [bp-2], 20000
	jb	L_myinth_17
L_myinth_19:
	; >>>>> Line:	38
	; >>>>> printString("DELAY COMPLETE"); 
	mov	ax, L_myinth_11
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	39
	; >>>>> printNewLine(); 
	call	printNewLine
	jmp	L_myinth_20
L_myinth_16:
	; >>>>> Line:	41
	; >>>>> else if (KeyBuffer == 'p'){ 
	cmp	word [KeyBuffer], 112
	jne	L_myinth_21
	; >>>>> Line:	43
	; >>>>> YKSemPost(NSemPtr); 
	push	word [NSemPtr]
	call	YKSemPost
	add	sp, 2
	jmp	L_myinth_22
L_myinth_21:
	; >>>>> Line:	45
	; >>>>> else if ((KeyBuffer > 97) && (KeyBuffer <123)) 
	cmp	word [KeyBuffer], 97
	jle	L_myinth_23
	cmp	word [KeyBuffer], 123
	jge	L_myinth_23
	; >>>>> Line:	48
	; >>>>> printString("KE 
	mov	ax, L_myinth_12
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	49
	; >>>>> printChar(KeyBuffer); 
	push	word [KeyBuffer]
	call	printChar
	add	sp, 2
	; >>>>> Line:	51
	; >>>>> printString(" IGNORED"); 
	mov	ax, L_myinth_13
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	52
	; >>>>> printNewLine(); 
	call	printNewLine
L_myinth_23:
L_myinth_24:
L_myinth_22:
L_myinth_20:
	; >>>>> Line:	54
	; >>>>> else {} 
	mov	sp, bp
	pop	bp
	ret
L_myinth_14:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_myinth_15
; Generated by c86 (BYU-NASM) 5.1 (beta) from lab5app.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
L_lab5app_3:
	DB	"works",0
L_lab5app_2:
	DB	"it",0
L_lab5app_1:
	DB	"Hey",0
	ALIGN	2
TaskWord:
	; >>>>> Line:	25
	; >>>>> { 
	jmp	L_lab5app_4
L_lab5app_5:
	; >>>>> Line:	26
	; >>>>> while (1) 
	jmp	L_lab5app_7
L_lab5app_6:
	; >>>>> Line:	28
	; >>>>> YKSemPend(WSemPtr); 
	push	word [WSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	29
	; >>>>> printString("Hey"); 
	mov	ax, L_lab5app_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	30
	; >>>>> YKSemPost(PSemPtr); 
	push	word [PSemPtr]
	call	YKSemPost
	add	sp, 2
	; >>>>> Line:	32
	; >>>>> YKSemPend(WSemPtr); 
	push	word [WSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	33
	; >>>>> printString("it"); 
	mov	ax, L_lab5app_2
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	34
	; >>>>> YKSemPost(SSemPtr); 
	push	word [SSemPtr]
	call	YKSemPost
	add	sp, 2
	; >>>>> Line:	36
	; >>>>> YKSemPend(WSemPtr); 
	push	word [WSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	37
	; >>>>> printString("works"); 
	mov	ax, L_lab5app_3
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	38
	; >>>>> YKSemPost(PSemPtr); 
	push	word [PSemPtr]
	call	YKSemPost
	add	sp, 2
L_lab5app_7:
	jmp	L_lab5app_6
L_lab5app_8:
	mov	sp, bp
	pop	bp
	ret
L_lab5app_4:
	push	bp
	mov	bp, sp
	jmp	L_lab5app_5
	ALIGN	2
TaskSpace:
	; >>>>> Line:	43
	; >>>>> { 
	jmp	L_lab5app_10
L_lab5app_11:
	; >>>>> Line:	44
	; >>>>> while (1) 
	jmp	L_lab5app_13
L_lab5app_12:
	; >>>>> Line:	46
	; >>>>> YKSemPend(SSemPtr); 
	push	word [SSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	47
	; >>>>> printChar(' '); 
	mov	al, 32
	push	ax
	call	printChar
	add	sp, 2
	; >>>>> Line:	48
	; >>>>> YKSemPost(WSemPtr); 
	push	word [WSemPtr]
	call	YKSemPost
	add	sp, 2
L_lab5app_13:
	jmp	L_lab5app_12
L_lab5app_14:
	mov	sp, bp
	pop	bp
	ret
L_lab5app_10:
	push	bp
	mov	bp, sp
	jmp	L_lab5app_11
L_lab5app_16:
	DB	"!",'"',0xD,0xA,0
	ALIGN	2
TaskPunc:
	; >>>>> Line:	53
	; >>>>> { 
	jmp	L_lab5app_17
L_lab5app_18:
	; >>>>> Line:	54
	; >>>>> while (1) 
	jmp	L_lab5app_20
L_lab5app_19:
	; >>>>> Line:	56
	; >>>>> YKSemPend(PSe 
	push	word [PSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	57
	; >>>>> printChar('"'); 
	mov	al, 34
	push	ax
	call	printChar
	add	sp, 2
	; >>>>> Line:	58
	; >>>>> YKSemPost(WSemPtr); 
	push	word [WSemPtr]
	call	YKSemPost
	add	sp, 2
	; >>>>> Line:	60
	; >>>>> YKSemPend(PSemPtr); 
	push	word [PSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	61
	; >>>>> printChar(','); 
	mov	al, 44
	push	ax
	call	printChar
	add	sp, 2
	; >>>>> Line:	62
	; >>>>> YKSemPost(SSemPtr); 
	push	word [SSemPtr]
	call	YKSemPost
	add	sp, 2
	; >>>>> Line:	64
	; >>>>> YKSemPend(PSemPtr); 
	push	word [PSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	65
	; >>>>> printString("!\"\r\n"); 
	mov	ax, L_lab5app_16
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	66
	; >>>>> YKSemPost(PSemPtr); 
	push	word [PSemPtr]
	call	YKSemPost
	add	sp, 2
	; >>>>> Line:	68
	; >>>>> YKDelayTask(6); 
	mov	ax, 6
	push	ax
	call	YKDelayTask
	add	sp, 2
L_lab5app_20:
	jmp	L_lab5app_19
L_lab5app_21:
	mov	sp, bp
	pop	bp
	ret
L_lab5app_17:
	push	bp
	mov	bp, sp
	jmp	L_lab5app_18
	ALIGN	2
TaskPrime:
	; >>>>> Line:	73
	; >>>>> { 
	jmp	L_lab5app_23
L_lab5app_24:
	; >>>>> Line:	78
	; >>>>> while (1) 
	mov	word [bp-2], 1001
	; >>>>> Line:	78
	; >>>>> while (1) 
	jmp	L_lab5app_26
L_lab5app_25:
	; >>>>> Line:	80
	; >>>>> YKSemPend(NSemPtr); 
	push	word [NSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	83
	; >>>>> lncnt = 0; 
	mov	word [bp-8], 0
	; >>>>> Line:	84
	; >>>>> endval = curval + 500; 
	mov	ax, word [bp-2]
	add	ax, 500
	mov	word [bp-10], ax
	; >>>>> Line:	85
	; >>>>> for ( ; curval < endval; curval += 2) 
	jmp	L_lab5app_29
L_lab5app_28:
	; >>>>> Line:	87
	; >>>>>  
	mov	word [bp-6], 0
	; >>>>> Line:	88
	; >>>>> for (j = 3; (j*j) < curval; j += 2) 
	mov	word [bp-4], 3
	jmp	L_lab5app_33
L_lab5app_32:
	; >>>>> Line:	90
	; >>>>> if (curval % j == 0) 
	mov	ax, word [bp-2]
	cwd
	idiv	word [bp-4]
	mov	ax, dx
	test	ax, ax
	jne	L_lab5app_36
	; >>>>> Line:	92
	; >>>>> flag = 1; 
	mov	word [bp-6], 1
	; >>>>> Line:	93
	; >>>>> break; 
	jmp	L_lab5app_34
L_lab5app_36:
L_lab5app_35:
	add	word [bp-4], 2
L_lab5app_33:
	mov	ax, word [bp-4]
	imul	word [bp-4]
	mov	dx, word [bp-2]
	cmp	dx, ax
	jg	L_lab5app_32
L_lab5app_34:
	; >>>>> Line:	96
	; >>>>> if (!flag) 
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_lab5app_37
	; >>>>> Line:	98
	; >>>>> printChar(' '); 
	mov	al, 32
	push	ax
	call	printChar
	add	sp, 2
	; >>>>> Line:	99
	; >>>>> printInt(curval); 
	push	word [bp-2]
	call	printInt
	add	sp, 2
	; >>>>> Line:	100
	; >>>>> lncnt++; 
	inc	word [bp-8]
	; >>>>> Line:	101
	; >>>>> if (lncnt > 9) 
	cmp	word [bp-8], 9
	jle	L_lab5app_38
	; >>>>> Line:	103
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	104
	; >>>>> lncnt = 0; 
	mov	word [bp-8], 0
L_lab5app_38:
L_lab5app_37:
L_lab5app_31:
	add	word [bp-2], 2
L_lab5app_29:
	mov	ax, word [bp-10]
	cmp	ax, word [bp-2]
	jg	L_lab5app_28
L_lab5app_30:
	; >>>>> Line:	108
	; >>>>> ntInt( 
	call	printNewLine
L_lab5app_26:
	jmp	L_lab5app_25
L_lab5app_27:
	mov	sp, bp
	pop	bp
	ret
L_lab5app_23:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_lab5app_24
L_lab5app_45:
	DB	"% >>>>>",0xD,0xA,0
L_lab5app_44:
	DB	", CPU usage: ",0
L_lab5app_43:
	DB	"<<<<< Context switches: ",0
L_lab5app_42:
	DB	"P SEM VALUE -> ",0
L_lab5app_41:
	DB	"Determining CPU capacity",0xD,0xA,0
L_lab5app_40:
	DB	"Welcome to the YAK kernel",0xD,0xA,0
	ALIGN	2
TaskStat:
	; >>>>> Line:	113
	; >>>>> { 
	jmp	L_lab5app_46
L_lab5app_47:
	; >>>>> Line:	117
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	118
	; >>>>> printString("Welcome to the YAK kernel\r\n"); 
	mov	ax, L_lab5app_40
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	119
	; >>>>> printString("Determining CPU capacity\r\n"); 
	mov	ax, L_lab5app_41
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	120
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	121
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	122
	; >>>>> YKDelayTask(5); 
	mov	ax, 5
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	123
	; >>>>> max = YKIdleCount / 25; 
	mov	ax, word [YKIdleCount]
	xor	dx, dx
	mov	cx, 25
	div	cx
	mov	word [bp-2], ax
	; >>>>> Line:	124
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	126
	; >>>>> printString("P SEM VALUE -> "); 
	mov	ax, L_lab5app_42
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	127
	; >>>>> printInt(PSemPtr->value); 
	mov	si, word [PSemPtr]
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	128
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	129
	; >>>>> YKNewTask(TaskPrime, (void *) &TaskPRMStk[512], 32); 
	mov	al, 32
	push	ax
	mov	ax, (TaskPRMStk+1024)
	push	ax
	mov	ax, TaskPrime
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	130
	; >>>>> printString("P SEM VALUE -> "); 
	mov	ax, L_lab5app_42
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	131
	; >>>>> printInt( 
	mov	si, word [PSemPtr]
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	132
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	133
	; >>>>> YKNewTask(TaskWord, (void *) &TaskWStk[512], 10); 
	mov	al, 10
	push	ax
	mov	ax, (TaskWStk+1024)
	push	ax
	mov	ax, TaskWord
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	134
	; >>>>> YKNewTask(TaskSpace, (void *) &TaskSStk[512], 11); 
	mov	al, 11
	push	ax
	mov	ax, (TaskSStk+1024)
	push	ax
	mov	ax, TaskSpace
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	135
	; >>>>> YKNewTask(TaskPunc, (void *) &TaskPStk[512], 12); 
	mov	al, 12
	push	ax
	mov	ax, (TaskPStk+1024)
	push	ax
	mov	ax, TaskPunc
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	137
	; >>>>> while (1) 
	jmp	L_lab5app_49
L_lab5app_48:
	; >>>>> Line:	139
	; >>>>> YKDelayTask(20); 
	mov	ax, 20
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	141
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	142
	; >>>>> switchCount = YKCtxSwCount; 
	mov	ax, word [YKCtxSwCount]
	mov	word [bp-4], ax
	; >>>>> Line:	143
	; >>>>> idleCount = YKIdleCount; 
	mov	ax, word [YKIdleCount]
	mov	word [bp-6], ax
	; >>>>> Line:	144
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	146
	; >>>>> printString ("<<<<< Context switches: "); 
	mov	ax, L_lab5app_43
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	147
	; >>>>> printInt((int)switchCount); 
	push	word [bp-4]
	call	printInt
	add	sp, 2
	; >>>>> Line:	148
	; >>>>> printString(", CPU usage: "); 
	mov	ax, L_lab5app_44
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	149
	; >>>>> tmp = (int) (idleCo 
	mov	ax, word [bp-6]
	xor	dx, dx
	div	word [bp-2]
	mov	word [bp-8], ax
	; >>>>> Line:	150
	; >>>>> printInt(100-tmp); 
	mov	ax, 100
	sub	ax, word [bp-8]
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	151
	; >>>>> printString("% >>>>>\r\n"); 
	mov	ax, L_lab5app_45
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	153
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	154
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	155
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	156
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_lab5app_49:
	jmp	L_lab5app_48
L_lab5app_50:
	mov	sp, bp
	pop	bp
	ret
L_lab5app_46:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_lab5app_47
	ALIGN	2
main:
	; >>>>> Line:	161
	; >>>>> { 
	jmp	L_lab5app_52
L_lab5app_53:
	; >>>>> Line:	162
	; >>>>> YKInitialize(); 
	call	YKInitialize
	; >>>>> Line:	165
	; >>>>> PSemPtr = YKSemCreate(1); 
	mov	ax, 1
	push	ax
	call	YKSemCreate
	add	sp, 2
	mov	word [PSemPtr], ax
	; >>>>> Line:	166
	; >>>>> SSemPtr = YKSemCreate(0); 
	xor	ax, ax
	push	ax
	call	YKSemCreate
	add	sp, 2
	mov	word [SSemPtr], ax
	; >>>>> Line:	167
	; >>>>> WSemPtr = YKSemCreate(0); 
	xor	ax, ax
	push	ax
	call	YKSemCreate
	add	sp, 2
	mov	word [WSemPtr], ax
	; >>>>> Line:	168
	; >>>>> NSemPtr = YKSemCreate(0); 
	xor	ax, ax
	push	ax
	call	YKSemCreate
	add	sp, 2
	mov	word [NSemPtr], ax
	; >>>>> Line:	169
	; >>>>> YKNewTask(TaskStat, (void *) &TaskStatStk[512], 30); 
	mov	al, 30
	push	ax
	mov	ax, (TaskStatStk+1024)
	push	ax
	mov	ax, TaskStat
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	171
	; >>>>> YKRun(); 
	call	YKRun
	mov	sp, bp
	pop	bp
	ret
L_lab5app_52:
	push	bp
	mov	bp, sp
	jmp	L_lab5app_53
	ALIGN	2
PSemPtr:
	TIMES	2 db 0
SSemPtr:
	TIMES	2 db 0
WSemPtr:
	TIMES	2 db 0
NSemPtr:
	TIMES	2 db 0
TaskWStk:
	TIMES	1024 db 0
TaskSStk:
	TIMES	1024 db 0
TaskPStk:
	TIMES	1024 db 0
TaskStatStk:
	TIMES	1024 db 0
TaskPRMStk:
	TIMES	1024 db 0
; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKCtxSwCount:
	DW	0
i:
	DW	0
hasRun:
	DW	0
	ALIGN	2
YKInitialize:
	; >>>>> Line:	36
	; >>>>> { 
	jmp	L_yakc_1
L_yakc_2:
	; >>>>> Line:	37
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	38
	; >>>>> YKIMRInit(0x00); 
	xor	ax, ax
	push	ax
	call	YKIMRInit
	add	sp, 2
	; >>>>> Line:	39
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	40
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	41
	; >>>>> YKTickNum = 0; 
	mov	word [YKTickNum], 0
	; >>>>> Line:	42
	; >>>>> ISRDepth = 0; 
	mov	word [ISRDepth], 0
	; >>>>> Line:	43
	; >>>>> YKSave = 0; 
	mov	word [YKSave], 0
	; >>>>> Line:	44
	; >>>>> YKRestore = 0; 
	mov	word [YKRestore], 0
	; >>>>> Line:	45
	; >>>>> YKRdyList = 0; 
	mov	word [YKRdyList], 0
	; >>>>> Line:	46
	; >>>>> YKSuspList = 0; 
	mov	word [YKSuspList], 0
	; >>>>> Line:	47
	; >>>>> YKRunningTask = 0; 
	mov	word [YKRunningTask], 0
	; >>>>> Line:	48
	; >>>>> hasRun = 0; 
	mov	word [hasRun], 0
	; >>>>> Line:	49
	; >>>>> YKAvaiSems = 4; 
	mov	word [YKAvaiSems], 4
	; >>>>> Line:	51
	; >>>>> YKAvailTCBList = &(YKTCBArray[0]); 
	mov	word [YKAvailTCBList], YKTCBArray
	; >>>>> Line:	53
	; >>>>> for (i = 0; 
	mov	word [i], 0
	jmp	L_yakc_4
L_yakc_3:
	; >>>>> Line:	54
	; >>>>> YKTCBArray[i].next = &(YKTCBArray[i+1]); 
	mov	ax, word [i]
	inc	ax
	mov	cx, 4
	shl	ax, cl
	add	ax, YKTCBArray
	mov	dx, word [i]
	mov	cx, 4
	shl	dx, cl
	add	dx, YKTCBArray
	mov	si, dx
	add	si, 12
	mov	word [si], ax
L_yakc_6:
	inc	word [i]
L_yakc_4:
	cmp	word [i], 6
	jl	L_yakc_3
L_yakc_5:
	; >>>>> Line:	56
	; >>>>> YKTCBArray[6].next = 0; 
	mov	word [(108+YKTCBArray)], 0
	; >>>>> Line:	57
	; >>>>> YKTCBArray[6].prev = 0; 
	mov	word [(110+YKTCBArray)], 0
	; >>>>> Line:	59
	; >>>>> YKNewTask(YKIdleTask,(void *) &(idleStk[2048]),100); 
	mov	al, 100
	push	ax
	mov	ax, (idleStk+4096)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	mov	sp, bp
	pop	bp
	ret
L_yakc_1:
	push	bp
	mov	bp, sp
	jmp	L_yakc_2
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	63
	; >>>>> void YKIdleTask(){ 
	jmp	L_yakc_8
L_yakc_9:
	; >>>>> Line:	64
	; >>>>> while(1){ 
	jmp	L_yakc_11
L_yakc_10:
	; >>>>> Line:	66
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	67
	; >>>>> YKIdleCount++; 
	inc	word [YKIdleCount]
	; >>>>> Line:	68
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_11:
	jmp	L_yakc_10
L_yakc_12:
	mov	sp, bp
	pop	bp
	ret
L_yakc_8:
	push	bp
	mov	bp, sp
	jmp	L_yakc_9
	ALIGN	2
YKScheduler:
	; >>>>> Line:	72
	; >>>>> void YKScheduler(int isSaved){ 
	jmp	L_yakc_14
L_yakc_15:
	; >>>>> Line:	73
	; >>>>> if (YKRunningTask != YKRdyList){ 
	mov	ax, word [YKRdyList]
	cmp	ax, word [YKRunningTask]
	je	L_yakc_16
	; >>>>> Line:	74
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	75
	; >>>>> YKDispatcher(isSaved); 
	push	word [bp+4]
	call	YKDispatcher
	add	sp, 2
L_yakc_16:
	mov	sp, bp
	pop	bp
	ret
L_yakc_14:
	push	bp
	mov	bp, sp
	jmp	L_yakc_15
	ALIGN	2
YKNewTask:
	; >>>>> Line:	83
	; >>>>> { 
	jmp	L_yakc_18
L_yakc_19:
	; >>>>> Line:	87
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	89
	; >>>>> newPoint = YKAvailTCBList; 
	mov	ax, word [YKAvailTCBList]
	mov	word [bp-4], ax
	; >>>>> Line:	90
	; >>>>> if(newPoint == 0){ 
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yakc_20
	; >>>>> Line:	91
	; >>>>> return; 
	jmp	L_yakc_21
L_yakc_20:
	; >>>>> Line:	94
	; >>>>> YKAvailTCBList = newPoint->next; 
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [si]
	mov	word [YKAvailTCBList], ax
	; >>>>> Line:	97
	; >>>>> newPoint->priority = priority; 
	mov	al, byte [bp+8]
	xor	ah, ah
	mov	si, word [bp-4]
	add	si, 4
	mov	word [si], ax
	; >>>>> Line:	98
	; >>>>> newPoint->delay = 0; 
	mov	si, word [bp-4]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	99
	; >>>>> newPoint->state = 1; 
	mov	si, word [bp-4]
	add	si, 2
	mov	word [si], 1
	; >>>>> Line:	101
	; >>>>> if (YKRdyList == 0) 
	mov	ax, word [YKRdyList]
	test	ax, ax
	jne	L_yakc_22
	; >>>>> Line:	103
	; >>>>> YKRdyList = newPoint; 
	mov	ax, word [bp-4]
	mov	word [YKRdyList], ax
	; >>>>> Line:	104
	; >>>>> newPoint->next = 0; 
	mov	si, word [bp-4]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	105
	; >>>>> newPoint->prev = 0; 
	mov	si, word [bp-4]
	add	si, 14
	mov	word [si], 0
	jmp	L_yakc_23
L_yakc_22:
	; >>>>> Line:	109
	; >>>>> comparisonPoint = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-6], ax
	; >>>>> Line:	110
	; >>>>> for (i = 0; i < 6; i ++) 
	mov	word [i], 0
	jmp	L_yakc_25
L_yakc_24:
	; >>>>> Line:	112
	; >>>>> if (newPoint->priority < comparison 
	mov	si, word [bp-4]
	add	si, 4
	mov	di, word [bp-6]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_yakc_28
	; >>>>> Line:	113
	; >>>>> break; 
	jmp	L_yakc_26
	jmp	L_yakc_29
L_yakc_28:
	; >>>>> Line:	116
	; >>>>> comparisonPoint = comparisonPoint->next; 
	mov	si, word [bp-6]
	add	si, 12
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakc_29:
L_yakc_27:
	inc	word [i]
L_yakc_25:
	cmp	word [i], 6
	jl	L_yakc_24
L_yakc_26:
	; >>>>> Line:	119
	; >>>>> if (comparisonPoint->prev == 0){ 
	mov	si, word [bp-6]
	add	si, 14
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_30
	; >>>>> Line:	120
	; >>>>> YKRdyList = newPoint; 
	mov	ax, word [bp-4]
	mov	word [YKRdyList], ax
	jmp	L_yakc_31
L_yakc_30:
	; >>>>> Line:	123
	; >>>>> comparisonPoint->prev->next = newPoint; 
	mov	si, word [bp-6]
	add	si, 14
	mov	si, word [si]
	add	si, 12
	mov	ax, word [bp-4]
	mov	word [si], ax
L_yakc_31:
	; >>>>> Line:	126
	; >>>>> newPoint->prev = comparisonPoint->prev; 
	mov	si, word [bp-6]
	add	si, 14
	mov	di, word [bp-4]
	add	di, 14
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	127
	; >>>>> newPoint->next = comparisonPoint; 
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	128
	; >>>>> comparisonPoint->prev = newPoint; 
	mov	si, word [bp-6]
	add	si, 14
	mov	ax, word [bp-4]
	mov	word [si], ax
L_yakc_23:
	; >>>>> Line:	131
	; >>>>> stackPoint = (unsigned *)taskStack; 
	mov	ax, word [bp+6]
	mov	word [bp-2], ax
	; >>>>> Line:	134
	; >>>>> for (i = 0; i < 13; i++) 
	mov	word [i], 0
	jmp	L_yakc_33
L_yakc_32:
	; >>>>> Line:	136
	; >>>>> if (i == 1){ 
	cmp	word [i], 1
	jne	L_yakc_36
	; >>>>> Line:	137
	; >>>>> stackPoint[0] = 0x0200; 
	mov	si, word [bp-2]
	mov	word [si], 512
	jmp	L_yakc_37
L_yakc_36:
	; >>>>> Line:	139
	; >>>>> else if (i 
	cmp	word [i], 3
	jne	L_yakc_38
	; >>>>> Line:	140
	; >>>>> stackPoint[0] = (unsigned)task; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	jmp	L_yakc_39
L_yakc_38:
	; >>>>> Line:	143
	; >>>>> stackPoint[0] = 0; 
	mov	si, word [bp-2]
	mov	word [si], 0
L_yakc_39:
L_yakc_37:
	; >>>>> Line:	145
	; >>>>> stackPoint--; 
	sub	word [bp-2], 2
L_yakc_35:
	inc	word [i]
L_yakc_33:
	cmp	word [i], 13
	jl	L_yakc_32
L_yakc_34:
	; >>>>> Line:	148
	; >>>>> newPoint->stackptr = (void *)stackPoint; 
	mov	si, word [bp-4]
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	150
	; >>>>> if(hasRun == 1) { 
	cmp	word [hasRun], 1
	jne	L_yakc_40
	; >>>>> Line:	151
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	152
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_40:
L_yakc_21:
	mov	sp, bp
	pop	bp
	ret
L_yakc_18:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_19
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	157
	; >>>>> { 
	jmp	L_yakc_42
L_yakc_43:
	; >>>>> Line:	159
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	160
	; >>>>> if (count == 0){ 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakc_44
	; >>>>> Line:	161
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	162
	; >>>>> return; 
	jmp	L_yakc_45
L_yakc_44:
	; >>>>> Line:	165
	; >>>>> delayPoint = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	166
	; >>>>> YKRdyList = delayPoint->next; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	167
	; >>>>> if (YKRdyList != 0) 
	mov	ax, word [YKRdyList]
	test	ax, ax
	je	L_yakc_46
	; >>>>> Line:	169
	; >>>>> YKRdyList->prev = 0; 
	mov	si, word [YKRdyList]
	add	si, 14
	mov	word [si], 0
L_yakc_46:
	; >>>>> Line:	171
	; >>>>> delayPoint->state = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	172
	; >>>>> delayPoint->delay = count; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	173
	; >>>>> != 0) 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [YKSuspList]
	mov	word [si], ax
	; >>>>> Line:	174
	; >>>>> YKSuspList = delayPoint; 
	mov	ax, word [bp-2]
	mov	word [YKSuspList], ax
	; >>>>> Line:	175
	; >>>>> delayPoint->prev = 0; 
	mov	si, word [bp-2]
	add	si, 14
	mov	word [si], 0
	; >>>>> Line:	176
	; >>>>> if (delayPoint->next != 0) 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_47
	; >>>>> Line:	178
	; >>>>> delayPoint->next->prev = delayPoint; 
	mov	si, word [bp-2]
	add	si, 12
	mov	si, word [si]
	add	si, 14
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_47:
	; >>>>> Line:	180
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	181
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_45:
	mov	sp, bp
	pop	bp
	ret
L_yakc_42:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_43
L_yakc_50:
	DB	0xA,0xD,0
L_yakc_49:
	DB	"TICK ",0
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	185
	; >>>>> { 
	jmp	L_yakc_51
L_yakc_52:
	; >>>>> Line:	187
	; >>>>> YKTickNum++; 
	inc	word [YKTickNum]
	; >>>>> Line:	189
	; >>>>> printString("TICK "); 
	mov	ax, L_yakc_49
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	190
	; >>>>> printInt(YKTickNum); 
	push	word [YKTickNum]
	call	printInt
	add	sp, 2
	; >>>>> Line:	191
	; >>>>> printString("\n\r"); 
	mov	ax, L_yakc_50
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	193
	; >>>>> temp = YKSuspList; 
	mov	ax, word [YKSuspList]
	mov	word [bp-2], ax
	; >>>>> Line:	194
	; >>>>> while (temp != 0) 
	jmp	L_yakc_54
L_yakc_53:
	; >>>>> Line:	196
	; >>>>> temp->delay--; 
	mov	si, word [bp-2]
	add	si, 6
	dec	word [si]
	; >>>>> Line:	197
	; >>>>> if (temp->delay == 0) 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_56
	; >>>>> Line:	199
	; >>>>> temp->state = 1; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 1
	; >>>>> Line:	200
	; >>>>> taskHold = temp->next; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	201
	; >>>>> if (temp->prev != 0) 
	mov	si, word [bp-2]
	add	si, 14
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_57
	; >>>>> Line:	203
	; >>>>>  
	mov	si, word [bp-2]
	add	si, 12
	mov	di, word [bp-2]
	add	di, 14
	mov	di, word [di]
	add	di, 12
	mov	ax, word [si]
	mov	word [di], ax
	jmp	L_yakc_58
L_yakc_57:
	; >>>>> Line:	206
	; >>>>> YKSuspList = temp->next; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	mov	word [YKSuspList], ax
L_yakc_58:
	; >>>>> Line:	208
	; >>>>> if (temp->next != 0) 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_59
	; >>>>> Line:	210
	; >>>>> temp->next->prev = temp->prev; 
	mov	si, word [bp-2]
	add	si, 14
	mov	di, word [bp-2]
	add	di, 12
	mov	di, word [di]
	add	di, 14
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_59:
	; >>>>> Line:	212
	; >>>>> comparisonPoint = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-6], ax
	; >>>>> Line:	214
	; >>>>> for (i = 0; i < 6; i ++) 
	mov	word [i], 0
	jmp	L_yakc_61
L_yakc_60:
	; >>>>> Line:	216
	; >>>>> if (temp->priority < comparisonPoint->priority){ 
	mov	si, word [bp-2]
	add	si, 4
	mov	di, word [bp-6]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_yakc_64
	; >>>>> Line:	217
	; >>>>> break; 
	jmp	L_yakc_62
	jmp	L_yakc_65
L_yakc_64:
	; >>>>> Line:	220
	; >>>>> comparisonPoint = comparisonPoint->next; 
	mov	si, word [bp-6]
	add	si, 12
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakc_65:
L_yakc_63:
	inc	word [i]
L_yakc_61:
	cmp	word [i], 6
	jl	L_yakc_60
L_yakc_62:
	; >>>>> Line:	223
	; >>>>> if (comparisonPoint->prev == 0){ 
	mov	si, word [bp-6]
	add	si, 14
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_66
	; >>>>> Line:	224
	; >>>>> YKRdyList = temp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_67
L_yakc_66:
	; >>>>> Line:	227
	; >>>>> comparisonPoint->prev->next = temp; 
	mov	si, word [bp-6]
	add	si, 14
	mov	si, word [si]
	add	si, 12
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_67:
	; >>>>> Line:	230
	; >>>>> temp->prev = c 
	mov	si, word [bp-6]
	add	si, 14
	mov	di, word [bp-2]
	add	di, 14
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	231
	; >>>>> temp->next = comparisonPoint; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	232
	; >>>>> comparisonPoint->prev = temp; 
	mov	si, word [bp-6]
	add	si, 14
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	233
	; >>>>> temp = taskHold; 
	mov	ax, word [bp-4]
	mov	word [bp-2], ax
	jmp	L_yakc_68
L_yakc_56:
	; >>>>> Line:	236
	; >>>>> temp = temp->next; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_68:
L_yakc_54:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_53
L_yakc_55:
	mov	sp, bp
	pop	bp
	ret
L_yakc_51:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_52
	ALIGN	2
YKRun:
	; >>>>> Line:	241
	; >>>>> void YKRun(void){ 
	jmp	L_yakc_70
L_yakc_71:
	; >>>>> Line:	242
	; >>>>> hasRun = 1; 
	mov	word [hasRun], 1
	; >>>>> Line:	243
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_70:
	push	bp
	mov	bp, sp
	jmp	L_yakc_71
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	247
	; >>>>> { 
	jmp	L_yakc_73
L_yakc_74:
	; >>>>> Line:	248
	; >>>>> ISRDepth++; 
	inc	word [ISRDepth]
	mov	sp, bp
	pop	bp
	ret
L_yakc_73:
	push	bp
	mov	bp, sp
	jmp	L_yakc_74
	ALIGN	2
YKExitISR:
	; >>>>> Line:	252
	; >>>>> { 
	jmp	L_yakc_76
L_yakc_77:
	; >>>>> Line:	253
	; >>>>> ISRDepth--; 
	dec	word [ISRDepth]
	; >>>>> Line:	254
	; >>>>> if (ISRDepth == 0) 
	mov	ax, word [ISRDepth]
	test	ax, ax
	jne	L_yakc_78
	; >>>>> Line:	256
	; >>>>> if (hasRun) 
	mov	ax, word [hasRun]
	test	ax, ax
	je	L_yakc_79
	; >>>>> Line:	258
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_79:
L_yakc_78:
	mov	sp, bp
	pop	bp
	ret
L_yakc_76:
	push	bp
	mov	bp, sp
	jmp	L_yakc_77
L_yakc_81:
	DB	"Not enough sems",0
	ALIGN	2
YKSemCreate:
	; >>>>> Line:	263
	; >>>>> YKSEM* YKSemCreate(int initialValue){ 
	jmp	L_yakc_82
L_yakc_83:
	; >>>>> Line:	264
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	265
	; >>>>> if (YKAvaiSems <= 0){ 
	cmp	word [YKAvaiSems], 0
	jg	L_yakc_84
	; >>>>> Line:	266
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	267
	; >>>>> printString("Not enough sems"); 
	mov	ax, L_yakc_81
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	268
	; >>>>> = 0) 
	mov	al, 255
	push	ax
	call	exit
	add	sp, 2
	jmp	L_yakc_85
L_yakc_84:
	; >>>>> Line:	271
	; >>>>> YKAvaiSems--; 
	dec	word [YKAvaiSems]
	; >>>>> Line:	272
	; >>>>> YKSems[YKAvaiSems].value = initialValue; 
	mov	ax, word [YKAvaiSems]
	shl	ax, 1
	shl	ax, 1
	mov	si, ax
	add	si, YKSems
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	273
	; >>>>> YKSems[YKAvaiSems].blockedOn = 0; 
	mov	ax, word [YKAvaiSems]
	shl	ax, 1
	shl	ax, 1
	add	ax, YKSems
	mov	si, ax
	add	si, 2
	mov	word [si], 0
L_yakc_85:
	; >>>>> Line:	275
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	278
	; >>>>> return (&(YKSems[YKAvaiSems])); 
	mov	ax, word [YKAvaiSems]
	shl	ax, 1
	shl	ax, 1
	add	ax, YKSems
L_yakc_86:
	mov	sp, bp
	pop	bp
	ret
L_yakc_82:
	push	bp
	mov	bp, sp
	jmp	L_yakc_83
	ALIGN	2
YKSemPend:
	; >>>>> Line:	282
	; >>>>> void YKSemPend(YKSEM *semaphore){ 
	jmp	L_yakc_88
L_yakc_89:
	; >>>>> Line:	286
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	293
	; >>>>> if (semaphore->value > 0){ 
	mov	si, word [bp+4]
	cmp	word [si], 0
	jle	L_yakc_90
	; >>>>> Line:	295
	; >>>>> semaphore->value--; 
	dec	word [si]
	; >>>>> Line:	296
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	297
	; >>>>> return; 
	jmp	L_yakc_91
L_yakc_90:
	; >>>>> Line:	299
	; >>>>> semaphore->value--; 
	mov	si, word [bp+4]
	dec	word [si]
	; >>>>> Line:	301
	; >>>>> temp = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	303
	; >>>>> YKRdyList = temp->next; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	304
	; >>>>> if (YKRdyList != 0) 
	mov	ax, word [YKRdyList]
	test	ax, ax
	je	L_yakc_92
	; >>>>> Line:	305
	; >>>>>  
	mov	si, word [YKRdyList]
	add	si, 14
	mov	word [si], 0
L_yakc_92:
	; >>>>> Line:	307
	; >>>>> temp->state = 2; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 2
	; >>>>> Line:	309
	; >>>>> if (semaphore->blockedOn == 0){ 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_93
	; >>>>> Line:	310
	; >>>>> semaphore->blockedOn = temp; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	311
	; >>>>> temp->next = 0; 
	mov	si, word [bp-2]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	312
	; >>>>> temp->prev = 0; 
	mov	si, word [bp-2]
	add	si, 14
	mov	word [si], 0
	jmp	L_yakc_94
L_yakc_93:
	; >>>>> Line:	315
	; >>>>> iter = semaphore->blockedOn; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	316
	; >>>>> temp2 = 0; 
	mov	word [bp-4], 0
	; >>>>> Line:	317
	; >>>>> while (iter != 0 && iter->priority < temp->priority){ 
	jmp	L_yakc_96
L_yakc_95:
	; >>>>> Line:	318
	; >>>>> temp2 = iter; 
	mov	ax, word [bp-6]
	mov	word [bp-4], ax
	; >>>>> Line:	319
	; >>>>> iter = iter->next; 
	mov	si, word [bp-6]
	add	si, 12
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakc_96:
	mov	ax, word [bp-6]
	test	ax, ax
	je	L_yakc_98
	mov	si, word [bp-6]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_95
L_yakc_98:
L_yakc_97:
	; >>>>> Line:	321
	; >>>>> if (iter == 0){ 
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_yakc_99
	; >>>>> Line:	322
	; >>>>> temp2->next = temp; 
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	323
	; >>>>> temp->prev = temp; 
	mov	si, word [bp-2]
	add	si, 14
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	324
	; >>>>> temp->next = 0; 
	mov	si, word [bp-2]
	add	si, 12
	mov	word [si], 0
	jmp	L_yakc_100
L_yakc_99:
	; >>>>> Line:	327
	; >>>>> t; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	328
	; >>>>> temp->prev = temp2; 
	mov	si, word [bp-2]
	add	si, 14
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	329
	; >>>>> iter->prev = temp; 
	mov	si, word [bp-6]
	add	si, 14
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	330
	; >>>>> if (temp2 == 0) 
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yakc_101
	; >>>>> Line:	331
	; >>>>> semaphore->blockedOn = temp; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp-2]
	mov	word [si], ax
	jmp	L_yakc_102
L_yakc_101:
	; >>>>> Line:	333
	; >>>>> temp2->next = temp; 
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_102:
L_yakc_100:
L_yakc_94:
	; >>>>> Line:	338
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	340
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_91:
	mov	sp, bp
	pop	bp
	ret
L_yakc_88:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_yakc_89
	ALIGN	2
YKSemPost:
	; >>>>> Line:	343
	; >>>>> void YKSemPost(YKSEM *semaphore){ 
	jmp	L_yakc_104
L_yakc_105:
	; >>>>> Line:	349
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	350
	; >>>>> if (semaphore->value++ >= 0){ 
	mov	si, word [bp+4]
	mov	ax, word [si]
	inc	word [si]
	test	ax, ax
	jl	L_yakc_106
	; >>>>> Line:	351
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	352
	; >>>>> return; 
	jmp	L_yakc_107
L_yakc_106:
	; >>>>> Line:	355
	; >>>>> temp = semaphore->blockedOn; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	356
	; >>>>> semaphore->blockedOn = temp->next; 
	mov	si, word [bp-2]
	add	si, 12
	mov	di, word [bp+4]
	add	di, 2
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	357
	; >>>>>  
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_108
	; >>>>> Line:	358
	; >>>>> semaphore->blockedOn->prev = 0; 
	mov	si, word [bp+4]
	add	si, 2
	mov	si, word [si]
	add	si, 14
	mov	word [si], 0
L_yakc_108:
	; >>>>> Line:	360
	; >>>>> temp->state = 1; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 1
	; >>>>> Line:	362
	; >>>>> temp2 = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	363
	; >>>>> while (temp2->priority < temp->priority){ 
	jmp	L_yakc_110
L_yakc_109:
	; >>>>> Line:	364
	; >>>>> temp2 = temp2->next; 
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_110:
	mov	si, word [bp-4]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_109
L_yakc_111:
	; >>>>> Line:	366
	; >>>>> if (temp2->prev == 0){ 
	mov	si, word [bp-4]
	add	si, 14
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_112
	; >>>>> Line:	367
	; >>>>> YKRdyList = temp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_113
L_yakc_112:
	; >>>>> Line:	370
	; >>>>> temp2->prev->next = temp; 
	mov	si, word [bp-4]
	add	si, 14
	mov	si, word [si]
	add	si, 12
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_113:
	; >>>>> Line:	372
	; >>>>> temp->prev = temp2->prev; 
	mov	si, word [bp-4]
	add	si, 14
	mov	di, word [bp-2]
	add	di, 14
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	373
	; >>>>> temp->next = temp2; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	374
	; >>>>> temp2->prev = temp; 
	mov	si, word [bp-4]
	add	si, 14
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	376
	; >>>>> if (ISRDepth == 0) 
	mov	ax, word [ISRDepth]
	test	ax, ax
	jne	L_yakc_114
	; >>>>> Line:	379
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_114:
	; >>>>> Line:	381
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_107:
	mov	sp, bp
	pop	bp
	ret
L_yakc_104:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_105
	ALIGN	2
YKIdleCount:
	TIMES	2 db 0
YKTickNum:
	TIMES	2 db 0
ISRDepth:
	TIMES	2 db 0
YKSave:
	TIMES	2 db 0
YKRestore:
	TIMES	2 db 0
YKSems:
	TIMES	16 db 0
YKAvaiSems:
	TIMES	2 db 0
YKRdyList:
	TIMES	2 db 0
YKAvailTCBList:
	TIMES	2 db 0
YKSuspList:
	TIMES	2 db 0
YKRunningTask:
	TIMES	2 db 0
YKTCBArray:
	TIMES	112 db 0
idleStk:
	TIMES	4096 db 0
