; Generated by c86 (BYU-NASM) 5.1 (beta) from yakk.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKCtxSwCount:
	DW	0
i:
	DW	0
hasRun:
	DW	0
	ALIGN	2
YKInitialize:
	; >>>>> Line:	42
	; >>>>> { 
	jmp	L_yakk_1
L_yakk_2:
	; >>>>> Line:	43
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	45
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	46
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	48
	; >>>>> YKSave = 0; 
	mov	word [YKSave], 0
	; >>>>> Line:	49
	; >>>>> YKRestore = 0; 
	mov	word [YKRestore], 0
	; >>>>> Line:	50
	; >>>>> YKRdyList = 0; 
	mov	word [YKRdyList], 0
	; >>>>> Line:	51
	; >>>>> YKSuspList = 0; 
	mov	word [YKSuspList], 0
	; >>>>> Line:	52
	; >>>>> YKRunningTask = 0; 
	mov	word [YKRunningTask], 0
	; >>>>> Line:	53
	; >>>>> hasRun = 0; 
	mov	word [hasRun], 0
	; >>>>> Line:	55
	; >>>>> YKAvailTCBList = &(YKTCBArray[0]); 
	mov	word [YKAvailTCBList], YKTCBArray
	; >>>>> Line:	59
	; >>>>> for (i = 0; i < 4; i++){ 
	mov	word [i], 0
	jmp	L_yakk_4
L_yakk_3:
	; >>>>> Line:	60
	; >>>>> YKTCBArray[i].next = &(YKTCBArray[i+1]); 
	mov	ax, word [i]
	inc	ax
	mov	cx, 12
	imul	cx
	add	ax, YKTCBArray
	push	ax
	mov	ax, word [i]
	mov	cx, 12
	imul	cx
	mov	dx, ax
	add	dx, YKTCBArray
	mov	si, dx
	add	si, 8
	pop	ax
	mov	word [si], ax
L_yakk_6:
	inc	word [i]
L_yakk_4:
	cmp	word [i], 4
	jl	L_yakk_3
L_yakk_5:
	; >>>>> Line:	65
	; >>>>> YKTCBArray[4].next = 0; 
	mov	word [(56+YKTCBArray)], 0
	; >>>>> Line:	66
	; >>>>> YKTCBArray[4].prev = 0; 
	mov	word [(58+YKTCBArray)], 0
	; >>>>> Line:	68
	; >>>>> YKNewTask(YKIdleTask,(void *) &(idleStk[2048]),100); 
	mov	al, 100
	push	ax
	mov	ax, (idleStk+4096)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	mov	sp, bp
	pop	bp
	ret
L_yakk_1:
	push	bp
	mov	bp, sp
	jmp	L_yakk_2
L_yakk_8:
	DB	"IDLE TASK",0xA,0
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	73
	; >>>>> void YKIdleTask(){ 
	jmp	L_yakk_9
L_yakk_10:
	; >>>>> Line:	74
	; >>>>> printString("IDLE TASK\n"); 
	mov	ax, L_yakk_8
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	75
	; >>>>> while(1){ 
	jmp	L_yakk_12
L_yakk_11:
	; >>>>> Line:	76
	; >>>>>  
	call	YKEnterMutex
	; >>>>> Line:	77
	; >>>>> YKIdleCount++; 
	inc	word [YKIdleCount]
	; >>>>> Line:	78
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakk_12:
	jmp	L_yakk_11
L_yakk_13:
	mov	sp, bp
	pop	bp
	ret
L_yakk_9:
	push	bp
	mov	bp, sp
	jmp	L_yakk_10
	ALIGN	2
YKScheduler:
	; >>>>> Line:	82
	; >>>>> void YKScheduler(int isSaved){ 
	jmp	L_yakk_15
L_yakk_16:
	; >>>>> Line:	83
	; >>>>> if (YKRunningTask != YKRdyList){ 
	mov	ax, word [YKRdyList]
	cmp	ax, word [YKRunningTask]
	je	L_yakk_17
	; >>>>> Line:	84
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	85
	; >>>>> YKDispatcher(isSaved); 
	push	word [bp+4]
	call	YKDispatcher
	add	sp, 2
L_yakk_17:
	mov	sp, bp
	pop	bp
	ret
L_yakk_15:
	push	bp
	mov	bp, sp
	jmp	L_yakk_16
	ALIGN	2
YKNewTask:
	; >>>>> Line:	90
	; >>>>> { 
	jmp	L_yakk_19
L_yakk_20:
	; >>>>> Line:	94
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	96
	; >>>>> tempPtr0 = YKAvailTCBList; 
	mov	ax, word [YKAvailTCBList]
	mov	word [bp-4], ax
	; >>>>> Line:	97
	; >>>>> if(tempPtr0 == 0){ 
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yakk_21
	; >>>>> Line:	98
	; >>>>> return; 
	jmp	L_yakk_22
L_yakk_21:
	; >>>>> Line:	101
	; >>>>> YKAvailTCBList = tempPtr0->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKAvailTCBList], ax
	; >>>>> Line:	103
	; >>>>> tempPtr0->priority = priority; 
	mov	al, byte [bp+8]
	xor	ah, ah
	mov	si, word [bp-4]
	add	si, 4
	mov	word [si], ax
	; >>>>> Line:	104
	; >>>>>  
	mov	si, word [bp-4]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	106
	; >>>>> if (YKRdyList == 0) 
	mov	ax, word [YKRdyList]
	test	ax, ax
	jne	L_yakk_23
	; >>>>> Line:	108
	; >>>>> YKRdyList = tempPtr0; 
	mov	ax, word [bp-4]
	mov	word [YKRdyList], ax
	; >>>>> Line:	109
	; >>>>> tempPtr0->next = 0; 
	mov	si, word [bp-4]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	110
	; >>>>> tempPtr0->prev = 0; 
	mov	si, word [bp-4]
	add	si, 10
	mov	word [si], 0
	jmp	L_yakk_24
L_yakk_23:
	; >>>>> Line:	114
	; >>>>> tempPtr1 = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-6], ax
	; >>>>> Line:	116
	; >>>>> for (i = 0; i < 4; i ++) 
	mov	word [i], 0
	jmp	L_yakk_26
L_yakk_25:
	; >>>>> Line:	118
	; >>>>> if (tempPtr0->priority < tempPtr1->priority){ 
	mov	si, word [bp-4]
	add	si, 4
	mov	di, word [bp-6]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_yakk_29
	; >>>>> Line:	119
	; >>>>> break; 
	jmp	L_yakk_27
	jmp	L_yakk_30
L_yakk_29:
	; >>>>> Line:	123
	; >>>>> tempPtr1 = tempPtr1->next; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakk_30:
L_yakk_28:
	inc	word [i]
L_yakk_26:
	cmp	word [i], 4
	jl	L_yakk_25
L_yakk_27:
	; >>>>> Line:	126
	; >>>>> if (tempPtr1->prev == 0){ 
	mov	si, word [bp-6]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakk_31
	; >>>>> Line:	127
	; >>>>> YKRdyList = tempPtr0; 
	mov	ax, word [bp-4]
	mov	word [YKRdyList], ax
	jmp	L_yakk_32
L_yakk_31:
	; >>>>> Line:	130
	; >>>>> )stack 
	mov	si, word [bp-6]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
L_yakk_32:
	; >>>>> Line:	132
	; >>>>> tempPtr0->prev = tempPtr1->prev; 
	mov	si, word [bp-6]
	add	si, 10
	mov	di, word [bp-4]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	133
	; >>>>> tempPtr0->next = tempPtr1; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	134
	; >>>>> tempPtr1->prev = tempPtr0; 
	mov	si, word [bp-6]
	add	si, 10
	mov	ax, word [bp-4]
	mov	word [si], ax
L_yakk_24:
	; >>>>> Line:	136
	; >>>>> stackPoint = (unsigned *)taskStack; 
	mov	ax, word [bp+6]
	mov	word [bp-2], ax
	; >>>>> Line:	141
	; >>>>> for (i = 0; i < 13; i++) 
	mov	word [i], 0
	jmp	L_yakk_34
L_yakk_33:
	; >>>>> Line:	143
	; >>>>> if (i == 1){ 
	cmp	word [i], 1
	jne	L_yakk_37
	; >>>>> Line:	144
	; >>>>> stackPoint[0] = 0x0200; 
	mov	si, word [bp-2]
	mov	word [si], 512
	jmp	L_yakk_38
L_yakk_37:
	; >>>>> Line:	146
	; >>>>> else if (i == 3){ 
	cmp	word [i], 3
	jne	L_yakk_39
	; >>>>> Line:	147
	; >>>>> stackPoint[0] = (unsigned)task; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	jmp	L_yakk_40
L_yakk_39:
	; >>>>> Line:	150
	; >>>>> stackPoint[0] = 0; 
	mov	si, word [bp-2]
	mov	word [si], 0
L_yakk_40:
L_yakk_38:
	; >>>>> Line:	152
	; >>>>> stackPoint--; 
	sub	word [bp-2], 2
L_yakk_36:
	inc	word [i]
L_yakk_34:
	cmp	word [i], 13
	jl	L_yakk_33
L_yakk_35:
	; >>>>> Line:	155
	; >>>>> tempPtr0->stackptr = (void *)stack 
	mov	si, word [bp-4]
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	157
	; >>>>> if(hasRun == 1) { 
	cmp	word [hasRun], 1
	jne	L_yakk_41
	; >>>>> Line:	158
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	159
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakk_41:
L_yakk_22:
	mov	sp, bp
	pop	bp
	ret
L_yakk_19:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakk_20
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	166
	; >>>>> void YKDelayTask(unsigned count){ 
	jmp	L_yakk_43
L_yakk_44:
	; >>>>> Line:	172
	; >>>>> if(count == 0){ 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakk_45
	; >>>>> Line:	173
	; >>>>> return; 
	jmp	L_yakk_46
L_yakk_45:
	; >>>>> Line:	175
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	177
	; >>>>> tempPtr0 = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	178
	; >>>>> tempPtr0->delay = count; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	181
	; >>>>> tempPtr1 = YKSuspList; 
	mov	ax, word [YKSuspList]
	mov	word [bp-4], ax
	; >>>>> Line:	183
	; >>>>> tempPtr2 = YKRdyList->next; 
	mov	si, word [YKRdyList]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	186
	; >>>>> if (YKSuspList == 0) 
	mov	ax, word [YKSuspList]
	test	ax, ax
	jne	L_yakk_47
	; >>>>> Line:	188
	; >>>>> YKSuspList = tempPtr0; 
	mov	ax, word [bp-2]
	mov	word [YKSuspList], ax
	; >>>>> Line:	189
	; >>>>> tempPtr0->next = 0; 
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	190
	; >>>>> tempPtr0->prev = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	jmp	L_yakk_48
L_yakk_47:
	; >>>>> Line:	194
	; >>>>> while(tempPtr1->next != 0) 
	jmp	L_yakk_50
L_yakk_49:
	; >>>>> Line:	196
	; >>>>> tempPtr1 = t 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakk_50:
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakk_49
L_yakk_51:
	; >>>>> Line:	198
	; >>>>> tempPtr1->next = tempPtr0; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	199
	; >>>>> tempPtr1->next->prev = tempPtr1; 
	mov	si, word [bp-4]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	200
	; >>>>> tempPtr1->next->next = 0; 
	mov	si, word [bp-4]
	add	si, 8
	mov	si, word [si]
	add	si, 8
	mov	word [si], 0
L_yakk_48:
	; >>>>> Line:	203
	; >>>>> tempPtr2->prev = 0; 
	mov	si, word [bp-6]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	204
	; >>>>> YKRdyList = tempPtr2; 
	mov	ax, word [bp-6]
	mov	word [YKRdyList], ax
	; >>>>> Line:	207
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	208
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakk_46:
	mov	sp, bp
	pop	bp
	ret
L_yakk_43:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakk_44
L_yakk_54:
	DB	0xA,0xD,0
L_yakk_53:
	DB	"TICK: ",0
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	217
	; >>>>> { 
	jmp	L_yakk_55
L_yakk_56:
	; >>>>> Line:	219
	; >>>>> YKTickNum++; 
	inc	word [YKTickNum]
	; >>>>> Line:	221
	; >>>>> printString("\n"); 
	mov	ax, (L_yakk_8+9)
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	222
	; >>>>> printString("TICK: "); 
	mov	ax, L_yakk_53
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	223
	; >>>>> printInt(YKTickNum); 
	push	word [YKTickNum]
	call	printInt
	add	sp, 2
	; >>>>> Line:	224
	; >>>>> printString("\n\r"); 
	mov	ax, L_yakk_54
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	226
	; >>>>> temp = YKSuspList; 
	mov	ax, word [YKSuspList]
	mov	word [bp-2], ax
	; >>>>> Line:	227
	; >>>>> while (temp != 0) 
	jmp	L_yakk_58
L_yakk_57:
	; >>>>> Line:	229
	; >>>>> temp->delay--; 
	mov	si, word [bp-2]
	add	si, 6
	dec	word [si]
	; >>>>> Line:	230
	; >>>>> if (temp->delay == 0) 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakk_60
	; >>>>> Line:	232
	; >>>>> taskHold = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	233
	; >>>>> if (temp 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	je	L_yakk_61
	; >>>>> Line:	235
	; >>>>> temp->prev->next = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp-2]
	add	di, 10
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	jmp	L_yakk_62
L_yakk_61:
	; >>>>> Line:	238
	; >>>>> YKSuspList = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKSuspList], ax
L_yakk_62:
	; >>>>> Line:	240
	; >>>>> if (temp->next != 0) 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakk_63
	; >>>>> Line:	242
	; >>>>> temp->next->prev = temp->prev; 
	mov	si, word [bp-2]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 8
	mov	di, word [di]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
L_yakk_63:
	; >>>>> Line:	244
	; >>>>> comparisonPoint = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-6], ax
	; >>>>> Line:	252
	; >>>>> for (i = 0; i < 4; i ++) 
	mov	word [i], 0
	jmp	L_yakk_65
L_yakk_64:
	; >>>>> Line:	254
	; >>>>> if (temp->priority < comparisonPoint->priority){ 
	mov	si, word [bp-2]
	add	si, 4
	mov	di, word [bp-6]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_yakk_68
	; >>>>> Line:	256
	; >>>>> break; 
	jmp	L_yakk_66
	jmp	L_yakk_69
L_yakk_68:
	; >>>>> Line:	260
	; >>>>> comparisonPoint = comparisonPoint->next; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakk_69:
L_yakk_67:
	inc	word [i]
L_yakk_65:
	cmp	word [i], 4
	jl	L_yakk_64
L_yakk_66:
	; >>>>> Line:	263
	; >>>>> if (comparisonPoint->prev == 0){ 
	mov	si, word [bp-6]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakk_70
	; >>>>> Line:	267
	; >>>>> YKRdyList = temp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakk_71
L_yakk_70:
	; >>>>> Line:	271
	; >>>>> comparisonPoint->prev->next = 
	mov	si, word [bp-6]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakk_71:
	; >>>>> Line:	275
	; >>>>> temp->prev = comparisonPoint->prev; 
	mov	si, word [bp-6]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	276
	; >>>>> temp->next = comparisonPoint; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	277
	; >>>>> comparisonPoint->prev = temp; 
	mov	si, word [bp-6]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	278
	; >>>>> temp = taskHold; 
	mov	ax, word [bp-4]
	mov	word [bp-2], ax
	jmp	L_yakk_72
L_yakk_60:
	; >>>>> Line:	281
	; >>>>> temp = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakk_72:
L_yakk_58:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakk_57
L_yakk_59:
	mov	sp, bp
	pop	bp
	ret
L_yakk_55:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakk_56
	ALIGN	2
YKRun:
	; >>>>> Line:	287
	; >>>>> void YKRun(void){ 
	jmp	L_yakk_74
L_yakk_75:
	; >>>>> Line:	288
	; >>>>> hasRun = 1; 
	mov	word [hasRun], 1
	; >>>>> Line:	289
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakk_74:
	push	bp
	mov	bp, sp
	jmp	L_yakk_75
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	293
	; >>>>> void YKEnterISR(void){ 
	jmp	L_yakk_77
L_yakk_78:
	; >>>>> Line:	295
	; >>>>> YKISRDepth++; 
	inc	word [YKISRDepth]
	mov	sp, bp
	pop	bp
	ret
L_yakk_77:
	push	bp
	mov	bp, sp
	jmp	L_yakk_78
	ALIGN	2
YKExitISR:
	; >>>>> Line:	299
	; >>>>> void YKExitISR(void){ 
	jmp	L_yakk_80
L_yakk_81:
	; >>>>> Line:	301
	; >>>>> YKISRDepth--; 
	dec	word [YKISRDepth]
	; >>>>> Line:	303
	; >>>>> if(YKISRDepth == 0) { 
	mov	ax, word [YKISRDepth]
	test	ax, ax
	jne	L_yakk_82
	; >>>>> Line:	304
	; >>>>> if(hasRun == 1) 
	cmp	word [hasRun], 1
	jne	L_yakk_83
	; >>>>> Line:	306
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakk_83:
L_yakk_82:
	mov	sp, bp
	pop	bp
	ret
L_yakk_80:
	push	bp
	mov	bp, sp
	jmp	L_yakk_81
	ALIGN	2
YKIdleCount:
	TIMES	2 db 0
YKTickNum:
	TIMES	2 db 0
YKISRDepth:
	TIMES	2 db 0
YKSave:
	TIMES	2 db 0
YKRestore:
	TIMES	2 db 0
YKRdyList:
	TIMES	2 db 0
YKAvailTCBList:
	TIMES	2 db 0
YKSuspList:
	TIMES	2 db 0
YKRunningTask:
	TIMES	2 db 0
YKTCBArray:
	TIMES	60 db 0
idleStk:
	TIMES	4096 db 0
