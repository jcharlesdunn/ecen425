; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKCtxSwCount:
	DW	0
i:
	DW	0
hasRun:
	DW	0
	ALIGN	2
YKInitialize:
	; >>>>> Line:	44
	; >>>>> { 
	jmp	L_yakc_1
L_yakc_2:
	; >>>>> Line:	45
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	46
	; >>>>> YKIMRInit(0x00); 
	xor	ax, ax
	push	ax
	call	YKIMRInit
	add	sp, 2
	; >>>>> Line:	47
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	49
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	50
	; >>>>> YKTickNum = 0; 
	mov	word [YKTickNum], 0
	; >>>>> Line:	51
	; >>>>> ISRDepth = 0; 
	mov	word [ISRDepth], 0
	; >>>>> Line:	52
	; >>>>> YKSave = 0; 
	mov	word [YKSave], 0
	; >>>>> Line:	53
	; >>>>> YKRestore = 0; 
	mov	word [YKRestore], 0
	; >>>>> Line:	55
	; >>>>> YKRdyList = 0; 
	mov	word [YKRdyList], 0
	; >>>>> Line:	56
	; >>>>> YKSuspList = 0; 
	mov	word [YKSuspList], 0
	; >>>>> Line:	57
	; >>>>> YKRunningTask = 0; 
	mov	word [YKRunningTask], 0
	; >>>>> Line:	58
	; >>>>> hasRun = 0; 
	mov	word [hasRun], 0
	; >>>>> Line:	59
	; >>>>> YKAvaiSems = 4; 
	mov	word [YKAvaiSems], 4
	; >>>>> Line:	62
	; >>>>> idxNextAvailQ = 0; 
	mov	word [idxNextAvailQ], 0
	; >>>>> Line:	64
	; >>>>> idxNextAvailEvent = 0; 
	mov	word [idxNextAvailEvent], 0
	; >>>>> Line:	66
	; >>>>> YKAvailTCBList = &(YKTCBArray[0]); 
	mov	word [YKAvailTCBList], YKTCBArray
	; >>>>> Line:	68
	; >>>>> for (i = 0; i < 6; i++){ 
	mov	word [i], 0
	jmp	L_yakc_4
L_yakc_3:
	; >>>>> Line:	69
	; >>>>> YKTCBArray[i].next = &(YKTCBArray[i+1]); 
	mov	ax, word [i]
	inc	ax
	mov	cx, 4
	shl	ax, cl
	add	ax, YKTCBArray
	mov	dx, word [i]
	mov	cx, 4
	shl	dx, cl
	add	dx, YKTCBArray
	mov	si, dx
	add	si, 12
	mov	word [si], ax
L_yakc_6:
	inc	word [i]
L_yakc_4:
	cmp	word [i], 6
	jl	L_yakc_3
L_yakc_5:
	; >>>>> Line:	71
	; >>>>> YKTCBArray[6].next = 0; 
	mov	word [(108+YKTCBArray)], 0
	; >>>>> Line:	72
	; >>>>> YKTCBArray[6].prev = 0; 
	mov	word [(110+YKTCBArray)], 0
	; >>>>> Line:	74
	; >>>>> YKNewTask(YKIdleTask, 
	mov	al, 100
	push	ax
	mov	ax, (idleStk+4096)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	75
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_1:
	push	bp
	mov	bp, sp
	jmp	L_yakc_2
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	79
	; >>>>> void YKIdleTask(){ 
	jmp	L_yakc_8
L_yakc_9:
	; >>>>> Line:	80
	; >>>>> while(1){ 
	jmp	L_yakc_11
L_yakc_10:
	; >>>>> Line:	82
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	83
	; >>>>> YKIdleCount++; 
	inc	word [YKIdleCount]
	; >>>>> Line:	84
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_11:
	jmp	L_yakc_10
L_yakc_12:
	mov	sp, bp
	pop	bp
	ret
L_yakc_8:
	push	bp
	mov	bp, sp
	jmp	L_yakc_9
	ALIGN	2
YKScheduler:
	; >>>>> Line:	88
	; >>>>> void YKScheduler(int isSaved){ 
	jmp	L_yakc_14
L_yakc_15:
	; >>>>> Line:	89
	; >>>>> if (YKRunningTask != YKRdyList){ 
	mov	ax, word [YKRdyList]
	cmp	ax, word [YKRunningTask]
	je	L_yakc_16
	; >>>>> Line:	90
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	91
	; >>>>> YKDispatcher(isSaved); 
	push	word [bp+4]
	call	YKDispatcher
	add	sp, 2
L_yakc_16:
	mov	sp, bp
	pop	bp
	ret
L_yakc_14:
	push	bp
	mov	bp, sp
	jmp	L_yakc_15
	ALIGN	2
YKNewTask:
	; >>>>> Line:	99
	; >>>>> { 
	jmp	L_yakc_18
L_yakc_19:
	; >>>>> Line:	104
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	106
	; >>>>> newPoint = YKAvailTCBList; 
	mov	ax, word [YKAvailTCBList]
	mov	word [bp-4], ax
	; >>>>> Line:	107
	; >>>>> if(newPoint == 0){ 
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yakc_20
	; >>>>> Line:	108
	; >>>>> ->prev == 
	jmp	L_yakc_21
L_yakc_20:
	; >>>>> Line:	111
	; >>>>> YKAvailTCBList = newPoint->next; 
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [si]
	mov	word [YKAvailTCBList], ax
	; >>>>> Line:	114
	; >>>>> newPoint->priority = priority; 
	mov	al, byte [bp+8]
	xor	ah, ah
	mov	si, word [bp-4]
	add	si, 4
	mov	word [si], ax
	; >>>>> Line:	115
	; >>>>> newPoint->delay = 0; 
	mov	si, word [bp-4]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	116
	; >>>>> newPoint->state = 1; 
	mov	si, word [bp-4]
	add	si, 2
	mov	word [si], 1
	; >>>>> Line:	118
	; >>>>> if (YKRdyList == 0) 
	mov	ax, word [YKRdyList]
	test	ax, ax
	jne	L_yakc_22
	; >>>>> Line:	120
	; >>>>> YKRdyList = newPoint; 
	mov	ax, word [bp-4]
	mov	word [YKRdyList], ax
	; >>>>> Line:	121
	; >>>>> newPoint->next = 0; 
	mov	si, word [bp-4]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	122
	; >>>>> newPoint->prev = 0; 
	mov	si, word [bp-4]
	add	si, 14
	mov	word [si], 0
	jmp	L_yakc_23
L_yakc_22:
	; >>>>> Line:	126
	; >>>>> comparisonPoint = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-6], ax
	; >>>>> Line:	127
	; >>>>> for (i = 0; i < 6; i ++) 
	mov	word [i], 0
	jmp	L_yakc_25
L_yakc_24:
	; >>>>> Line:	129
	; >>>>> if (newPoint->priority < comparisonPoint->priority){ 
	mov	si, word [bp-4]
	add	si, 4
	mov	di, word [bp-6]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_yakc_28
	; >>>>> Line:	130
	; >>>>> break; 
	jmp	L_yakc_26
	jmp	L_yakc_29
L_yakc_28:
	; >>>>> Line:	133
	; >>>>> comparisonPoint = comparisonPoint->next; 
	mov	si, word [bp-6]
	add	si, 12
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakc_29:
L_yakc_27:
	inc	word [i]
L_yakc_25:
	cmp	word [i], 6
	jl	L_yakc_24
L_yakc_26:
	; >>>>> Line:	136
	; >>>>> if (comparisonPoint->prev == 
	mov	si, word [bp-6]
	add	si, 14
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_30
	; >>>>> Line:	137
	; >>>>> YKRdyList = newPoint; 
	mov	ax, word [bp-4]
	mov	word [YKRdyList], ax
	jmp	L_yakc_31
L_yakc_30:
	; >>>>> Line:	140
	; >>>>> comparisonPoint->prev->next = newPoint; 
	mov	si, word [bp-6]
	add	si, 14
	mov	si, word [si]
	add	si, 12
	mov	ax, word [bp-4]
	mov	word [si], ax
L_yakc_31:
	; >>>>> Line:	143
	; >>>>> newPoint->prev = comparisonPoint->prev; 
	mov	si, word [bp-6]
	add	si, 14
	mov	di, word [bp-4]
	add	di, 14
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	144
	; >>>>> newPoint->next = comparisonPoint; 
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	145
	; >>>>> comparisonPoint->prev = newPoint; 
	mov	si, word [bp-6]
	add	si, 14
	mov	ax, word [bp-4]
	mov	word [si], ax
L_yakc_23:
	; >>>>> Line:	148
	; >>>>> stackPoint = (unsigned *)taskStack; 
	mov	ax, word [bp+6]
	mov	word [bp-2], ax
	; >>>>> Line:	151
	; >>>>> for (i = 0; i < 13; i++) 
	mov	word [i], 0
	jmp	L_yakc_33
L_yakc_32:
	; >>>>> Line:	153
	; >>>>> if (i == 1){ 
	cmp	word [i], 1
	jne	L_yakc_36
	; >>>>> Line:	154
	; >>>>> stackPoint[0] = 0x0200; 
	mov	si, word [bp-2]
	mov	word [si], 512
	jmp	L_yakc_37
L_yakc_36:
	; >>>>> Line:	156
	; >>>>> else if (i == 3){ 
	cmp	word [i], 3
	jne	L_yakc_38
	; >>>>> Line:	157
	; >>>>> stackPoint[0] = (unsigned)task; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	jmp	L_yakc_39
L_yakc_38:
	; >>>>> Line:	160
	; >>>>> stackPoint[0] = 0; 
	mov	si, word [bp-2]
	mov	word [si], 0
L_yakc_39:
L_yakc_37:
	; >>>>> Line:	162
	; >>>>> stackPoint--; 
	sub	word [bp-2], 2
L_yakc_35:
	inc	word [i]
L_yakc_33:
	cmp	word [i], 13
	jl	L_yakc_32
L_yakc_34:
	; >>>>> Line:	165
	; >>>>> newPoint->stackptr = (void * 
	mov	si, word [bp-4]
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	167
	; >>>>> if(hasRun == 1) { 
	cmp	word [hasRun], 1
	jne	L_yakc_40
	; >>>>> Line:	168
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_40:
	; >>>>> Line:	170
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_21:
	mov	sp, bp
	pop	bp
	ret
L_yakc_18:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_19
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	175
	; >>>>> { 
	jmp	L_yakc_42
L_yakc_43:
	; >>>>> Line:	177
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	178
	; >>>>> if (count == 0){ 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakc_44
	; >>>>> Line:	179
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	180
	; >>>>> return; 
	jmp	L_yakc_45
L_yakc_44:
	; >>>>> Line:	183
	; >>>>> delayPoint = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	184
	; >>>>> YKRdyList = delayPoint->next; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	185
	; >>>>> if (YKRdyList != 0) 
	mov	ax, word [YKRdyList]
	test	ax, ax
	je	L_yakc_46
	; >>>>> Line:	187
	; >>>>> YKRdyList->prev = 0; 
	mov	si, word [YKRdyList]
	add	si, 14
	mov	word [si], 0
L_yakc_46:
	; >>>>> Line:	189
	; >>>>> delayPoint->state = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	190
	; >>>>> delayPoint->delay = count; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	191
	; >>>>> delayPoint->next = YKSuspList; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [YKSuspList]
	mov	word [si], ax
	; >>>>> Line:	192
	; >>>>> YKSuspList = delayPoint; 
	mov	ax, word [bp-2]
	mov	word [YKSuspList], ax
	; >>>>> Line:	193
	; >>>>> delayPoint->prev = 0; 
	mov	si, word [bp-2]
	add	si, 14
	mov	word [si], 0
	; >>>>> Line:	194
	; >>>>> if (delayPoint->next != 0) 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_47
	; >>>>> Line:	196
	; >>>>> delayPoint->next->prev = delayPoi 
	mov	si, word [bp-2]
	add	si, 12
	mov	si, word [si]
	add	si, 14
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_47:
	; >>>>> Line:	198
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	199
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_45:
	mov	sp, bp
	pop	bp
	ret
L_yakc_42:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_43
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	203
	; >>>>> { 
	jmp	L_yakc_49
L_yakc_50:
	; >>>>> Line:	215
	; >>>>> YKTickNum++; 
	inc	word [YKTickNum]
	; >>>>> Line:	216
	; >>>>> temp = YKSuspList; 
	mov	ax, word [YKSuspList]
	mov	word [bp-2], ax
	; >>>>> Line:	217
	; >>>>> while (temp != 0) 
	jmp	L_yakc_52
L_yakc_51:
	; >>>>> Line:	219
	; >>>>> temp->delay--; 
	mov	si, word [bp-2]
	add	si, 6
	dec	word [si]
	; >>>>> Line:	220
	; >>>>> if (temp->delay == 0) 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_54
	; >>>>> Line:	222
	; >>>>> temp->state = 1; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 1
	; >>>>> Line:	223
	; >>>>> taskHold = temp->next; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	224
	; >>>>> if (temp->prev != 0) 
	mov	si, word [bp-2]
	add	si, 14
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_55
	; >>>>> Line:	226
	; >>>>> temp->prev->next = temp->next; 
	mov	si, word [bp-2]
	add	si, 12
	mov	di, word [bp-2]
	add	di, 14
	mov	di, word [di]
	add	di, 12
	mov	ax, word [si]
	mov	word [di], ax
	jmp	L_yakc_56
L_yakc_55:
	; >>>>> Line:	229
	; >>>>> YKSuspList = temp->next; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	mov	word [YKSuspList], ax
L_yakc_56:
	; >>>>> Line:	231
	; >>>>> if (temp->next != 0) 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_57
	; >>>>> Line:	233
	; >>>>> temp->next->prev = temp->prev; 
	mov	si, word [bp-2]
	add	si, 14
	mov	di, word [bp-2]
	add	di, 12
	mov	di, word [di]
	add	di, 14
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_57:
	; >>>>> Line:	235
	; >>>>> comparisonPoint = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-6], ax
	; >>>>> Line:	237
	; >>>>> for (i = 0; i < 6;  
	mov	word [i], 0
	jmp	L_yakc_59
L_yakc_58:
	; >>>>> Line:	239
	; >>>>> if (temp->priority < comparisonPoint->priority){ 
	mov	si, word [bp-2]
	add	si, 4
	mov	di, word [bp-6]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_yakc_62
	; >>>>> Line:	240
	; >>>>> break; 
	jmp	L_yakc_60
	jmp	L_yakc_63
L_yakc_62:
	; >>>>> Line:	243
	; >>>>> comparisonPoint = comparisonPoint->next; 
	mov	si, word [bp-6]
	add	si, 12
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakc_63:
L_yakc_61:
	inc	word [i]
L_yakc_59:
	cmp	word [i], 6
	jl	L_yakc_58
L_yakc_60:
	; >>>>> Line:	246
	; >>>>> if (comparisonPoint->prev == 0){ 
	mov	si, word [bp-6]
	add	si, 14
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_64
	; >>>>> Line:	247
	; >>>>> YKRdyList = temp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_65
L_yakc_64:
	; >>>>> Line:	250
	; >>>>> comparisonPoint->prev->next = temp; 
	mov	si, word [bp-6]
	add	si, 14
	mov	si, word [si]
	add	si, 12
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_65:
	; >>>>> Line:	253
	; >>>>> temp->prev = comparisonPoint->prev; 
	mov	si, word [bp-6]
	add	si, 14
	mov	di, word [bp-2]
	add	di, 14
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	254
	; >>>>> temp->next = comparisonPoint; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	255
	; >>>>> comparisonPoint->prev = temp; 
	mov	si, word [bp-6]
	add	si, 14
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	256
	; >>>>> temp = taskHold; 
	mov	ax, word [bp-4]
	mov	word [bp-2], ax
	jmp	L_yakc_66
L_yakc_54:
	; >>>>> Line:	259
	; >>>>> temp = temp->next; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_66:
L_yakc_52:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_51
L_yakc_53:
	mov	sp, bp
	pop	bp
	ret
L_yakc_49:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_50
	ALIGN	2
YKRun:
	; >>>>> Line:	264
	; >>>>> void YKRun(void){ 
	jmp	L_yakc_68
L_yakc_69:
	; >>>>> Line:	265
	; >>>>> hasRun = 1; 
	mov	word [hasRun], 1
	; >>>>> Line:	266
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_68:
	push	bp
	mov	bp, sp
	jmp	L_yakc_69
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	270
	; >>>>> { 
	jmp	L_yakc_71
L_yakc_72:
	; >>>>> Line:	271
	; >>>>> ISRDepth++; 
	inc	word [ISRDepth]
	mov	sp, bp
	pop	bp
	ret
L_yakc_71:
	push	bp
	mov	bp, sp
	jmp	L_yakc_72
	ALIGN	2
YKExitISR:
	; >>>>> Line:	275
	; >>>>> { 
	jmp	L_yakc_74
L_yakc_75:
	; >>>>> Line:	276
	; >>>>> ISRDepth--; 
	dec	word [ISRDepth]
	; >>>>> Line:	277
	; >>>>> if (ISRDepth == 0) 
	mov	ax, word [ISRDepth]
	test	ax, ax
	jne	L_yakc_76
	; >>>>> Line:	279
	; >>>>> if (hasRun) 
	mov	ax, word [hasRun]
	test	ax, ax
	je	L_yakc_77
	; >>>>> Line:	281
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_77:
L_yakc_76:
	mov	sp, bp
	pop	bp
	ret
L_yakc_74:
	push	bp
	mov	bp, sp
	jmp	L_yakc_75
L_yakc_79:
	DB	"Not enough sems",0
	ALIGN	2
YKSemCreate:
	; >>>>> Line:	286
	; >>>>> YKSEM* YKSemCreate(int initialValue){ 
	jmp	L_yakc_80
L_yakc_81:
	; >>>>> Line:	287
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	288
	; >>>>> if (YKAvaiSems <= 0){ 
	cmp	word [YKAvaiSems], 0
	jg	L_yakc_82
	; >>>>> Line:	289
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	290
	; >>>>> printString("Not enough sems"); 
	mov	ax, L_yakc_79
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	291
	; >>>>> exit(0xff); 
	mov	al, 255
	push	ax
	call	exit
	add	sp, 2
	jmp	L_yakc_83
L_yakc_82:
	; >>>>> Line:	294
	; >>>>> YKAvaiSems--; 
	dec	word [YKAvaiSems]
	; >>>>> Line:	295
	; >>>>> YKSems[YKAvaiSems].value = initialValue; 
	mov	ax, word [YKAvaiSems]
	shl	ax, 1
	shl	ax, 1
	mov	si, ax
	add	si, YKSems
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	296
	; >>>>> YKSems[YKAvaiSems].blockedOn = 0; 
	mov	ax, word [YKAvaiSems]
	shl	ax, 1
	shl	ax, 1
	add	ax, YKSems
	mov	si, ax
	add	si, 2
	mov	word [si], 0
L_yakc_83:
	; >>>>> Line:	298
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	301
	; >>>>> return (&(YKSems[YKAvaiSems])); 
	mov	ax, word [YKAvaiSems]
	shl	ax, 1
	shl	ax, 1
	add	ax, YKSems
L_yakc_84:
	mov	sp, bp
	pop	bp
	ret
L_yakc_80:
	push	bp
	mov	bp, sp
	jmp	L_yakc_81
	ALIGN	2
YKSemPend:
	; >>>>> Line:	305
	; >>>>> void YKSemPend(YKSEM *semaphore){ 
	jmp	L_yakc_86
L_yakc_87:
	; >>>>> Line:	309
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	311
	; >>>>> if (semaphore->value > 0){ 
	mov	si, word [bp+4]
	cmp	word [si], 0
	jle	L_yakc_88
	; >>>>> Line:	313
	; >>>>> semaphore->value--; 
	dec	word [si]
	; >>>>> Line:	314
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	315
	; >>>>> return; 
	jmp	L_yakc_89
L_yakc_88:
	; >>>>> Line:	317
	; >>>>> semaphore->value--; 
	mov	si, word [bp+4]
	dec	word [si]
	; >>>>> Line:	319
	; >>>>> temp = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	321
	; >>>>> YKRdyList = temp->next; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	322
	; >>>>> if (YKRdyList != 0) 
	mov	ax, word [YKRdyList]
	test	ax, ax
	je	L_yakc_90
	; >>>>> Line:	323
	; >>>>> YKRdyList->prev = 0; 
	mov	si, word [YKRdyList]
	add	si, 14
	mov	word [si], 0
L_yakc_90:
	; >>>>> Line:	325
	; >>>>> temp->state = 2; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 2
	; >>>>> Line:	327
	; >>>>> if (semaphore->blockedOn == 0){ 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_91
	; >>>>> Line:	328
	; >>>>> semaphore->blockedOn = temp; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	329
	; >>>>> temp->next = 0; 
	mov	si, word [bp-2]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	330
	; >>>>> temp->prev = 0; 
	mov	si, word [bp-2]
	add	si, 14
	mov	word [si], 0
	jmp	L_yakc_92
L_yakc_91:
	; >>>>> Line:	333
	; >>>>> iter = semaphore->bloc 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	334
	; >>>>> temp2 = 0; 
	mov	word [bp-4], 0
	; >>>>> Line:	335
	; >>>>> while (iter != 0 && iter->priority < temp->priority){ 
	jmp	L_yakc_94
L_yakc_93:
	; >>>>> Line:	336
	; >>>>> temp2 = iter; 
	mov	ax, word [bp-6]
	mov	word [bp-4], ax
	; >>>>> Line:	337
	; >>>>> iter = iter->next; 
	mov	si, word [bp-6]
	add	si, 12
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakc_94:
	mov	ax, word [bp-6]
	test	ax, ax
	je	L_yakc_96
	mov	si, word [bp-6]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_93
L_yakc_96:
L_yakc_95:
	; >>>>> Line:	339
	; >>>>> if (iter == 0){ 
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_yakc_97
	; >>>>> Line:	340
	; >>>>> temp2->next = temp; 
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	341
	; >>>>> temp->prev = temp; 
	mov	si, word [bp-2]
	add	si, 14
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	342
	; >>>>> temp->next = 0; 
	mov	si, word [bp-2]
	add	si, 12
	mov	word [si], 0
	jmp	L_yakc_98
L_yakc_97:
	; >>>>> Line:	345
	; >>>>> temp->next = iter; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	346
	; >>>>> temp->prev = temp2; 
	mov	si, word [bp-2]
	add	si, 14
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	347
	; >>>>> iter->prev = temp; 
	mov	si, word [bp-6]
	add	si, 14
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	348
	; >>>>> if (temp2 == 0) 
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yakc_99
	; >>>>> Line:	349
	; >>>>> semaphore->blockedOn = temp; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp-2]
	mov	word [si], ax
	jmp	L_yakc_100
L_yakc_99:
	; >>>>> Line:	351
	; >>>>> temp2->next = temp 
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_100:
L_yakc_98:
L_yakc_92:
	; >>>>> Line:	355
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	357
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_89:
	mov	sp, bp
	pop	bp
	ret
L_yakc_86:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_yakc_87
	ALIGN	2
YKSemPost:
	; >>>>> Line:	360
	; >>>>> void YKSemPost(YKSEM *semaphore){ 
	jmp	L_yakc_102
L_yakc_103:
	; >>>>> Line:	366
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	367
	; >>>>> if (semaphore->value++ >= 0){ 
	mov	si, word [bp+4]
	mov	ax, word [si]
	inc	word [si]
	test	ax, ax
	jl	L_yakc_104
	; >>>>> Line:	368
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	369
	; >>>>> return; 
	jmp	L_yakc_105
L_yakc_104:
	; >>>>> Line:	372
	; >>>>> temp = semaphore->blockedOn; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	373
	; >>>>> semaphore->blockedOn = temp->next; 
	mov	si, word [bp-2]
	add	si, 12
	mov	di, word [bp+4]
	add	di, 2
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	374
	; >>>>> if (semaphore->blockedOn != 0) 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_106
	; >>>>> Line:	375
	; >>>>> semaphore->blockedOn->prev = 0; 
	mov	si, word [bp+4]
	add	si, 2
	mov	si, word [si]
	add	si, 14
	mov	word [si], 0
L_yakc_106:
	; >>>>> Line:	377
	; >>>>> temp->state = 1; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 1
	; >>>>> Line:	379
	; >>>>> temp2 = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	380
	; >>>>> while (temp2->priority < temp->priority){ 
	jmp	L_yakc_108
L_yakc_107:
	; >>>>> Line:	381
	; >>>>> temp2 = temp2->next; 
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_108:
	mov	si, word [bp-4]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_107
L_yakc_109:
	; >>>>> Line:	383
	; >>>>> if (temp2- 
	mov	si, word [bp-4]
	add	si, 14
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_110
	; >>>>> Line:	384
	; >>>>> YKRdyList = temp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_111
L_yakc_110:
	; >>>>> Line:	387
	; >>>>> temp2->prev->next = temp; 
	mov	si, word [bp-4]
	add	si, 14
	mov	si, word [si]
	add	si, 12
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_111:
	; >>>>> Line:	389
	; >>>>> temp->prev = temp2->prev; 
	mov	si, word [bp-4]
	add	si, 14
	mov	di, word [bp-2]
	add	di, 14
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	390
	; >>>>> temp->next = temp2; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	391
	; >>>>> temp2->prev = temp; 
	mov	si, word [bp-4]
	add	si, 14
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	393
	; >>>>> if (ISRDepth == 0) 
	mov	ax, word [ISRDepth]
	test	ax, ax
	jne	L_yakc_112
	; >>>>> Line:	396
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_112:
	; >>>>> Line:	398
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_105:
	mov	sp, bp
	pop	bp
	ret
L_yakc_102:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_103
	ALIGN	2
YKQCreate:
	; >>>>> Line:	402
	; >>>>> YKQ* YKQCreate(void ** start, unsigned int size){ 
	jmp	L_yakc_114
L_yakc_115:
	; >>>>> Line:	404
	; >>>>> currQ->length = size; 
	mov	ax, word [idxNextAvailQ]
	inc	word [idxNextAvailQ]
	mov	cx, 14
	imul	cx
	add	ax, YKQArray
	mov	word [bp-2], ax
	; >>>>> Line:	404
	; >>>>> currQ->length = size; 
	mov	si, word [bp-2]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	405
	; >>>>> currQ->head = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	406
	; >>>>> currQ->tail = 0; 
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], 0
	; >>>>> Line:	407
	; >>>>> currQ->msgQ = start; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	408
	; >>>>> currQ->full = 0; 
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	409
	; >>>>> currQ->empty = 1; 
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], 1
	; >>>>> Line:	410
	; >>>>> currQ->waitList = 0; 
	mov	si, word [bp-2]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	411
	; >>>>> return currQ; 
	mov	ax, word [bp-2]
L_yakc_116:
	mov	sp, bp
	pop	bp
	ret
L_yakc_114:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_115
	ALIGN	2
YKQPend:
	; >>>>> Line:	414
	; >>>>> iter->next; 
	jmp	L_yakc_118
L_yakc_119:
	; >>>>> Line:	419
	; >>>>> YKEnterMutex(); 
	mov	word [bp-2], 0
	; >>>>> Line:	419
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	421
	; >>>>> if(queue->empty) 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_120
	; >>>>> Line:	424
	; >>>>> temp = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	426
	; >>>>> YKRdyList = temp->next; 
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	427
	; >>>>> if (YKRdyList != 0) 
	mov	ax, word [YKRdyList]
	test	ax, ax
	je	L_yakc_121
	; >>>>> Line:	428
	; >>>>> YKRdyList->prev = 0; 
	mov	si, word [YKRdyList]
	add	si, 14
	mov	word [si], 0
L_yakc_121:
	; >>>>> Line:	430
	; >>>>> temp->state = 43; 
	mov	si, word [bp-4]
	add	si, 2
	mov	word [si], 43
	; >>>>> Line:	432
	; >>>>> if (queue->waitList == 0){ 
	mov	si, word [bp+4]
	add	si, 12
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_122
	; >>>>> Line:	433
	; >>>>> queue->waitList = temp; 
	mov	si, word [bp+4]
	add	si, 12
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	434
	; >>>>> temp->next = 0; 
	mov	si, word [bp-4]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	435
	; >>>>> temp->prev = 0; 
	mov	si, word [bp-4]
	add	si, 14
	mov	word [si], 0
	jmp	L_yakc_123
L_yakc_122:
	; >>>>> Line:	438
	; >>>>> iter = queue->waitList; 
	mov	si, word [bp+4]
	add	si, 12
	mov	ax, word [si]
	mov	word [bp-8], ax
	; >>>>> Line:	439
	; >>>>> temp2 = 0; 
	mov	word [bp-6], 0
	; >>>>> Line:	440
	; >>>>> while (iter != 0 && iter->priority < temp->priority){ 
	jmp	L_yakc_125
L_yakc_124:
	; >>>>> Line:	441
	; >>>>> temp2 = iter; 
	mov	ax, word [bp-8]
	mov	word [bp-6], ax
	; >>>>> Line:	442
	; >>>>> iter = iter->next; 
	mov	si, word [bp-8]
	add	si, 12
	mov	ax, word [si]
	mov	word [bp-8], ax
L_yakc_125:
	mov	ax, word [bp-8]
	test	ax, ax
	je	L_yakc_127
	mov	si, word [bp-8]
	add	si, 4
	mov	di, word [bp-4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_124
L_yakc_127:
L_yakc_126:
	; >>>>> Line:	444
	; >>>>> if (iter == 0){ 
	mov	ax, word [bp-8]
	test	ax, ax
	jne	L_yakc_128
	; >>>>> Line:	445
	; >>>>> temp2->next = temp; 
	mov	si, word [bp-6]
	add	si, 12
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	446
	; >>>>> temp->prev = temp; 
	mov	si, word [bp-4]
	add	si, 14
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	447
	; >>>>> temp->next = 0; 
	mov	si, word [bp-4]
	add	si, 12
	mov	word [si], 0
	jmp	L_yakc_129
L_yakc_128:
	; >>>>> Line:	450
	; >>>>> temp->next = iter; 
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [bp-8]
	mov	word [si], ax
	; >>>>> Line:	451
	; >>>>> temp->prev = temp2; 
	mov	si, word [bp-4]
	add	si, 14
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	452
	; >>>>> iter->prev = temp; 
	mov	si, word [bp-8]
	add	si, 14
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	453
	; >>>>> if (temp2 == 0) 
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_yakc_130
	; >>>>> Line:	454
	; >>>>> queue->waitList = temp; 
	mov	si, word [bp+4]
	add	si, 12
	mov	ax, word [bp-4]
	mov	word [si], ax
	jmp	L_yakc_131
L_yakc_130:
	; >>>>> Line:	456
	; >>>>> temp2->next = temp; 
	mov	si, word [bp-6]
	add	si, 12
	mov	ax, word [bp-4]
	mov	word [si], ax
L_yakc_131:
L_yakc_129:
L_yakc_123:
	; >>>>> Line:	460
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	463
	; >>>>> retPtr = queue->msgQ[queue->head]; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp+4]
	add	di, 10
	add	si, word [di]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	464
	; >>>>> queue->full = 0; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	467
	; >>>>> if(queue->head == (queue->length - 1)){ 
	mov	si, word [bp+4]
	add	si, 2
	mov	di, word [bp+4]
	mov	ax, word [di]
	dec	ax
	cmp	ax, word [si]
	jne	L_yakc_132
	; >>>>> Line:	468
	; >>>>> queue->head = 0; 
	mov	si, word [bp+4]
	add	si, 2
	mov	word [si], 0
	jmp	L_yakc_133
L_yakc_132:
	; >>>>> Line:	471
	; >>>>> queue->hea 
	mov	si, word [bp+4]
	add	si, 2
	inc	word [si]
L_yakc_133:
	; >>>>> Line:	474
	; >>>>> if(queue->head == queue->tail) 
	mov	si, word [bp+4]
	add	si, 2
	mov	di, word [bp+4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jne	L_yakc_134
	; >>>>> Line:	476
	; >>>>> queue->empty = 1; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 1
L_yakc_134:
	; >>>>> Line:	478
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	jmp	L_yakc_135
L_yakc_120:
	; >>>>> Line:	482
	; >>>>> retPtr = queue->msgQ[queue->head]; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp+4]
	add	di, 10
	add	si, word [di]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	483
	; >>>>> queue->full = 0; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	486
	; >>>>> if(queue->head == (queue->length - 1)){ 
	mov	si, word [bp+4]
	add	si, 2
	mov	di, word [bp+4]
	mov	ax, word [di]
	dec	ax
	cmp	ax, word [si]
	jne	L_yakc_136
	; >>>>> Line:	487
	; >>>>> queue->head = 0; 
	mov	si, word [bp+4]
	add	si, 2
	mov	word [si], 0
	jmp	L_yakc_137
L_yakc_136:
	; >>>>> Line:	490
	; >>>>> queue->head++; 
	mov	si, word [bp+4]
	add	si, 2
	inc	word [si]
L_yakc_137:
	; >>>>> Line:	493
	; >>>>> if(queue->head == queue->tail) 
	mov	si, word [bp+4]
	add	si, 2
	mov	di, word [bp+4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jne	L_yakc_138
	; >>>>> Line:	495
	; >>>>> queue->empty = 1; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 1
L_yakc_138:
L_yakc_135:
	; >>>>> Line:	500
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	502
	; >>>>> return retPtr; 
	mov	ax, word [bp-2]
L_yakc_139:
	mov	sp, bp
	pop	bp
	ret
L_yakc_118:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_yakc_119
	ALIGN	2
YKQPost:
	; >>>>> Line:	506
	; >>>>> int YKQPost(YKQ* queue, void* msg){ 
	jmp	L_yakc_141
L_yakc_142:
	; >>>>> Line:	510
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	512
	; >>>>> if(queue->full){ 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_143
	; >>>>> Line:	513
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	514
	; >>>>> return 0 
	xor	ax, ax
	jmp	L_yakc_144
L_yakc_143:
	; >>>>> Line:	518
	; >>>>> queue->msgQ[queue->tail] = msg; 
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp+4]
	add	di, 10
	add	si, word [di]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	521
	; >>>>> if(queue->tail == (queue->length - 1)){ 
	mov	si, word [bp+4]
	add	si, 4
	mov	di, word [bp+4]
	mov	ax, word [di]
	dec	ax
	cmp	ax, word [si]
	jne	L_yakc_145
	; >>>>> Line:	522
	; >>>>> queue->tail = 0; 
	mov	si, word [bp+4]
	add	si, 4
	mov	word [si], 0
	jmp	L_yakc_146
L_yakc_145:
	; >>>>> Line:	525
	; >>>>> queue->tail++; 
	mov	si, word [bp+4]
	add	si, 4
	inc	word [si]
L_yakc_146:
	; >>>>> Line:	530
	; >>>>> queue->empty = 0; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	532
	; >>>>> if(queue->tail == queue->head){ 
	mov	si, word [bp+4]
	add	si, 4
	mov	di, word [bp+4]
	add	di, 2
	mov	ax, word [di]
	cmp	ax, word [si]
	jne	L_yakc_147
	; >>>>> Line:	533
	; >>>>> queue->full = 1; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 1
L_yakc_147:
	; >>>>> Line:	538
	; >>>>> if(queue->waitList != 0){ 
	mov	si, word [bp+4]
	add	si, 12
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_148
	; >>>>> Line:	540
	; >>>>> waitTask = queue->waitList; 
	mov	si, word [bp+4]
	add	si, 12
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	541
	; >>>>> if(waitTask->next !=0) 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_149
	; >>>>> Line:	543
	; >>>>> tempPtr = waitTask->next; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	544
	; >>>>> tempPtr->prev = 0; 
	mov	si, word [bp-4]
	add	si, 14
	mov	word [si], 0
	; >>>>> Line:	545
	; >>>>> queue->waitList = tempPtr; 
	mov	si, word [bp+4]
	add	si, 12
	mov	ax, word [bp-4]
	mov	word [si], ax
	jmp	L_yakc_150
L_yakc_149:
	; >>>>> Line:	548
	; >>>>> queue->waitList = 0; 
	mov	si, word [bp+4]
	add	si, 12
	mov	word [si], 0
L_yakc_150:
	; >>>>> Line:	551
	; >>>>> waitTask->state = 1; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 1
	; >>>>> Line:	553
	; >>>>> tempPtr2 = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-6], ax
	; >>>>> Line:	554
	; >>>>> while (tempPtr2->priority < waitTask->priori 
	jmp	L_yakc_152
L_yakc_151:
	; >>>>> Line:	555
	; >>>>> tempPtr2 = tempPtr2->next; 
	mov	si, word [bp-6]
	add	si, 12
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakc_152:
	mov	si, word [bp-6]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_151
L_yakc_153:
	; >>>>> Line:	557
	; >>>>> if (tempPtr2->prev == 0){ 
	mov	si, word [bp-6]
	add	si, 14
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_154
	; >>>>> Line:	558
	; >>>>> YKRdyList = waitTask; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_155
L_yakc_154:
	; >>>>> Line:	561
	; >>>>> tempPtr2->prev->next = waitTask; 
	mov	si, word [bp-6]
	add	si, 14
	mov	si, word [si]
	add	si, 12
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_155:
	; >>>>> Line:	563
	; >>>>> waitTask->prev = tempPtr2->prev; 
	mov	si, word [bp-6]
	add	si, 14
	mov	di, word [bp-2]
	add	di, 14
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	564
	; >>>>> waitTask->next = tempPtr2; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	565
	; >>>>> tempPtr2->prev = waitTask; 
	mov	si, word [bp-6]
	add	si, 14
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_148:
	; >>>>> Line:	568
	; >>>>> if (ISRDepth == 0) 
	mov	ax, word [ISRDepth]
	test	ax, ax
	jne	L_yakc_156
	; >>>>> Line:	569
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_156:
	; >>>>> Line:	572
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	574
	; >>>>> return 1; 
	mov	ax, 1
L_yakc_144:
	mov	sp, bp
	pop	bp
	ret
L_yakc_141:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_142
	ALIGN	2
YKEventCreate:
	; >>>>> Line:	579
	; >>>>> { 
	jmp	L_yakc_158
L_yakc_159:
	; >>>>> Line:	581
	; >>>>> currEvent->value = initialValue; 
	mov	ax, word [idxNextAvailEvent]
	inc	word [idxNextAvailEvent]
	shl	ax, 1
	shl	ax, 1
	add	ax, YKEventArray
	mov	word [bp-2], ax
	; >>>>> Line:	581
	; >>>>> currEvent->value = initialValue; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	582
	; >>>>> currEvent->waitList = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	584
	; >>>>> return currEvent; 
	mov	ax, word [bp-2]
L_yakc_160:
	mov	sp, bp
	pop	bp
	ret
L_yakc_158:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_159
	ALIGN	2
YKEventPend:
	; >>>>> Line:	588
	; >>>>> { 
	jmp	L_yakc_162
L_yakc_163:
	; >>>>> Line:	592
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	594
	; >>>>> if(waitMode == 0x1) 
	cmp	word [bp+8], 1
	jne	L_yakc_164
	; >>>>> Line:	596
	; >>>>> if(event->value & eventMask) 
	mov	si, word [bp+4]
	mov	ax, word [si]
	and	ax, word [bp+6]
	je	L_yakc_165
	; >>>>> Line:	597
	; >>>>> return event->value; 
	mov	ax, word [si]
	jmp	L_yakc_166
L_yakc_165:
	jmp	L_yakc_167
L_yakc_164:
	; >>>>> Line:	601
	; >>>>> if(event->value == eventMask) 
	mov	si, word [bp+4]
	mov	ax, word [bp+6]
	cmp	ax, word [si]
	jne	L_yakc_168
	; >>>>> Line:	602
	; >>>>> return event->value; 
	mov	ax, word [si]
	jmp	L_yakc_166
L_yakc_168:
L_yakc_167:
	; >>>>> Line:	604
	; >>>>> temp = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	606
	; >>>>> YKRdyList = temp->next; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	607
	; >>>>> if (YKRdyList != 0) 
	mov	ax, word [YKRdyList]
	test	ax, ax
	je	L_yakc_169
	; >>>>> Line:	608
	; >>>>> YKRdyList->prev = 0; 
	mov	si, word [YKRdyList]
	add	si, 14
	mov	word [si], 0
L_yakc_169:
	; >>>>> Line:	610
	; >>>>> temp->waitMode = waitMode; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [bp+8]
	mov	word [si], ax
	; >>>>> Line:	611
	; >>>>> temp->waitValue = eventMask; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	614
	; >>>>> if (event->waitList == 0){ 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_170
	; >>>>> Line:	615
	; >>>>> event->waitList = te 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	616
	; >>>>> temp->next = 0; 
	mov	si, word [bp-2]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	617
	; >>>>> temp->prev = 0; 
	mov	si, word [bp-2]
	add	si, 14
	mov	word [si], 0
	jmp	L_yakc_171
L_yakc_170:
	; >>>>> Line:	620
	; >>>>> iter = event->waitList; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	621
	; >>>>> temp2 = 0; 
	mov	word [bp-4], 0
	; >>>>> Line:	622
	; >>>>> while (iter != 0 && iter->priority < temp->priority){ 
	jmp	L_yakc_173
L_yakc_172:
	; >>>>> Line:	623
	; >>>>> temp2 = iter; 
	mov	ax, word [bp-6]
	mov	word [bp-4], ax
	; >>>>> Line:	624
	; >>>>> iter = iter->next; 
	mov	si, word [bp-6]
	add	si, 12
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakc_173:
	mov	ax, word [bp-6]
	test	ax, ax
	je	L_yakc_175
	mov	si, word [bp-6]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_172
L_yakc_175:
L_yakc_174:
	; >>>>> Line:	626
	; >>>>> if (iter == 0){ 
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_yakc_176
	; >>>>> Line:	627
	; >>>>> temp2->next = temp; 
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	628
	; >>>>> temp->prev = temp; 
	mov	si, word [bp-2]
	add	si, 14
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	629
	; >>>>> temp->next = 0; 
	mov	si, word [bp-2]
	add	si, 12
	mov	word [si], 0
	jmp	L_yakc_177
L_yakc_176:
	; >>>>> Line:	632
	; >>>>> temp->next = iter; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	633
	; >>>>> temp->prev = temp2; 
	mov	si, word [bp-2]
	add	si, 14
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	634
	; >>>>> iter->prev = temp; 
	mov	si, word [bp-6]
	add	si, 14
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	635
	; >>>>> if (temp2 == 0) 
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yakc_178
	; >>>>> Line:	636
	; >>>>> m 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp-2]
	mov	word [si], ax
	jmp	L_yakc_179
L_yakc_178:
	; >>>>> Line:	638
	; >>>>> temp2->next = temp; 
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_179:
L_yakc_177:
L_yakc_171:
	; >>>>> Line:	643
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	645
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	649
	; >>>>> return event->value; 
	mov	si, word [bp+4]
	mov	ax, word [si]
L_yakc_166:
	mov	sp, bp
	pop	bp
	ret
L_yakc_162:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_yakc_163
	ALIGN	2
YKEventSet:
	; >>>>> Line:	654
	; >>>>> { 
	jmp	L_yakc_181
L_yakc_182:
	; >>>>> Line:	657
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	658
	; >>>>> event->value = event->value | eventMask; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	or	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	660
	; >>>>> temp3 = event->waitList; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	661
	; >>>>> while(temp3 != 0) 
	jmp	L_yakc_184
L_yakc_183:
	; >>>>> Line:	663
	; >>>>> temp4 = temp3->next; 
	mov	si, word [bp-6]
	add	si, 12
	mov	ax, word [si]
	mov	word [bp-8], ax
	; >>>>> Line:	664
	; >>>>> removeBool = 0; 
	mov	word [bp-10], 0
	; >>>>> Line:	665
	; >>>>> if(temp3->waitMode == 0x2) 
	mov	si, word [bp-6]
	add	si, 10
	cmp	word [si], 2
	jne	L_yakc_186
	; >>>>> Line:	667
	; >>>>> if(event->value == temp3->waitValue) 
	mov	si, word [bp-6]
	add	si, 8
	mov	di, word [bp+4]
	mov	ax, word [di]
	cmp	ax, word [si]
	jne	L_yakc_187
	; >>>>> Line:	668
	; >>>>> temp2-> 
	mov	word [bp-10], 1
L_yakc_187:
	jmp	L_yakc_188
L_yakc_186:
	; >>>>> Line:	672
	; >>>>> if(event->value & temp3->waitValue) 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [si]
	mov	si, word [bp+4]
	and	ax, word [si]
	je	L_yakc_189
	; >>>>> Line:	673
	; >>>>> removeBool = 1; 
	mov	word [bp-10], 1
L_yakc_189:
L_yakc_188:
	; >>>>> Line:	675
	; >>>>> if(removeBool) 
	mov	ax, word [bp-10]
	test	ax, ax
	je	L_yakc_190
	; >>>>> Line:	679
	; >>>>> temp = event->waitList; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	680
	; >>>>> event->waitList = temp->next; 
	mov	si, word [bp-2]
	add	si, 12
	mov	di, word [bp+4]
	add	di, 2
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	681
	; >>>>> if (event->waitList != 0) 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_191
	; >>>>> Line:	682
	; >>>>> event->waitList->prev = 0; 
	mov	si, word [bp+4]
	add	si, 2
	mov	si, word [si]
	add	si, 14
	mov	word [si], 0
L_yakc_191:
	; >>>>> Line:	684
	; >>>>> temp->state = 1; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 1
	; >>>>> Line:	686
	; >>>>> temp2 = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	687
	; >>>>> while (temp2->priority < temp->priority){ 
	jmp	L_yakc_193
L_yakc_192:
	; >>>>> Line:	688
	; >>>>> temp2 = temp2->next; 
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_193:
	mov	si, word [bp-4]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_192
L_yakc_194:
	; >>>>> Line:	690
	; >>>>> if (temp2->prev == 0){ 
	mov	si, word [bp-4]
	add	si, 14
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_195
	; >>>>> Line:	691
	; >>>>> YKRdyList = temp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_196
L_yakc_195:
	; >>>>> Line:	694
	; >>>>> temp2->prev->next = temp; 
	mov	si, word [bp-4]
	add	si, 14
	mov	si, word [si]
	add	si, 12
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_196:
	; >>>>> Line:	696
	; >>>>> temp->prev = temp2->prev; 
	mov	si, word [bp-4]
	add	si, 14
	mov	di, word [bp-2]
	add	di, 14
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	697
	; >>>>> temp->next = temp2; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	698
	; >>>>> temp2-> 
	mov	si, word [bp-4]
	add	si, 14
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_190:
	; >>>>> Line:	700
	; >>>>> temp3 = temp4; 
	mov	ax, word [bp-8]
	mov	word [bp-6], ax
L_yakc_184:
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_yakc_183
L_yakc_185:
	; >>>>> Line:	704
	; >>>>> if (ISRDepth == 0) 
	mov	ax, word [ISRDepth]
	test	ax, ax
	jne	L_yakc_197
	; >>>>> Line:	705
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_197:
	; >>>>> Line:	706
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_181:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_yakc_182
	ALIGN	2
YKEventReset:
	; >>>>> Line:	711
	; >>>>> { 
	jmp	L_yakc_199
L_yakc_200:
	; >>>>> Line:	713
	; >>>>> event->value = (event->value) & (~eventMask); 
	mov	ax, word [bp+6]
	not	ax
	mov	si, word [bp+4]
	and	ax, word [si]
	mov	word [si], ax
	mov	sp, bp
	pop	bp
	ret
L_yakc_199:
	push	bp
	mov	bp, sp
	jmp	L_yakc_200
	ALIGN	2
YKIdleCount:
	TIMES	2 db 0
YKTickNum:
	TIMES	2 db 0
ISRDepth:
	TIMES	2 db 0
YKSave:
	TIMES	2 db 0
YKRestore:
	TIMES	2 db 0
YKSems:
	TIMES	16 db 0
YKAvaiSems:
	TIMES	2 db 0
YKRdyList:
	TIMES	2 db 0
YKAvailTCBList:
	TIMES	2 db 0
YKSuspList:
	TIMES	2 db 0
YKRunningTask:
	TIMES	2 db 0
YKTCBArray:
	TIMES	112 db 0
YKQArray:
	TIMES	140 db 0
idxNextAvailQ:
	TIMES	2 db 0
YKEventArray:
	TIMES	40 db 0
idxNextAvailEvent:
	TIMES	2 db 0
idleStk:
	TIMES	4096 db 0
